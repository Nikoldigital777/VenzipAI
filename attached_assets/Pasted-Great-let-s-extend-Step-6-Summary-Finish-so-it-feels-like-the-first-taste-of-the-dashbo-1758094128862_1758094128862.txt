Great ✅ — let’s extend **Step 6 (Summary & Finish)** so it feels like the *first taste of the dashboard*.

This will reassure your client that the onboarding created a **real compliance workspace** (frameworks, tasks, AI chat enabled) before dropping them into the full app.

---

# 🎯 Updated Step 6: Summary & Finish

```tsx
// inside onboarding.tsx

import { Progress } from "@/components/ui/progress"; // assuming shadcn/ui or your existing component

function OnboardingSummary({ company, frameworks, totalTasks }) {
  return (
    <div className="p-8">
      <h2 className="text-2xl font-semibold mb-2">Your workspace is ready 🎉</h2>
      <p className="text-gray-600 mb-6">
        Here’s a snapshot of what we’ve set up for you:
      </p>

      {/* Summary details */}
      <div className="bg-white border rounded-xl shadow-sm p-6 mb-8">
        <ul className="space-y-2 text-gray-700">
          <li>
            <span className="font-medium">Company:</span> {company.name}
          </li>
          <li>
            <span className="font-medium">Frameworks:</span>{" "}
            {frameworks.map((f) => f.displayName).join(", ")}
          </li>
          <li>
            <span className="font-medium">Tasks Generated:</span>{" "}
            {totalTasks}
          </li>
          <li>
            <span className="font-medium">AI Assistant:</span> Enabled
          </li>
        </ul>
      </div>

      {/* Mini dashboard preview */}
      <div>
        <h3 className="font-semibold text-lg mb-4">Framework Progress</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
          {frameworks.map((f) => (
            <div
              key={f.id}
              className="p-4 rounded-xl bg-gray-50 border flex flex-col items-center"
            >
              <div className="w-24 h-24 relative">
                <Progress
                  value={0} // start at 0%
                  className="w-24 h-24 rounded-full"
                />
                <span className="absolute inset-0 flex items-center justify-center text-lg font-semibold text-indigo-600">
                  0%
                </span>
              </div>
              <p className="mt-2 text-sm text-gray-700">{f.displayName}</p>
            </div>
          ))}
        </div>
      </div>

      {/* CTA */}
      <div className="mt-10 flex justify-end">
        <button
          onClick={() => navigate("/dashboard")}
          className="px-6 py-3 bg-indigo-600 text-white font-medium rounded-lg shadow hover:bg-indigo-700 transition"
        >
          Go to Dashboard →
        </button>
      </div>
    </div>
  );
}
```

---

# 🧩 Backend Support

When `/api/onboarding/complete` returns, include:

```json
{
  "success": true,
  "company": {
    "id": "uuid",
    "name": "Acme Health Inc."
  },
  "frameworks": [
    { "id": "iso27001", "displayName": "ISO 27001" },
    { "id": "hipaa", "displayName": "HIPAA Security Rule" }
  ],
  "totalTasks": 163
}
```

Then pass this payload into `OnboardingSummary`.

---

# 📊 End Result (Step 6 Experience)

* **Summary card**:

  * Company name, selected frameworks, total tasks, AI assistant enabled.
* **Mini-dashboard preview**:

  * Grid of frameworks → each shows progress ring at 0%.
  * Matches the *real dashboard view* they’ll see next.
* **Strong CTA**: “Go to Dashboard →”

---

# ✅ Why This Matters

* Looks **professional** and consistent with enterprise compliance apps.
* Gives client confidence: their **frameworks + tasks exist** already.
* Smooth transition: onboarding → dashboard feels seamless.