You got it. Below are **ready-to-paste** server routes and full client pages with CRUD + filters for **Tasks** and **Risks**, aligned to your stack: Express + Drizzle + React Query + shadcn UI. I matched your existing routing and components so these drop in cleanly (your `Tasks` and `Risks` pages are already registered in `App.tsx`, and shadcn primitives are present).

---

# 1) Server: routes for **/api/tasks** and **/api/risks**

**File:** `server/routes.ts`
Append below the existing routes:

```ts
// --- TASKS CRUD & FILTERS ---
import { complianceTasks, taskPriorityEnum, taskStatusEnum, risks as risksTable, riskSeverityEnum, riskProbabilityEnum } from "../shared/schema";

// Helpers to coerce enums safely
const TASK_STATUSES = ["todo", "in_progress", "blocked", "done"] as const;
const TASK_PRIORITIES = ["low", "medium", "high", "critical"] as const;
const RISK_SEVERITIES = ["low", "medium", "high", "critical"] as const;
const RISK_PROBABILITIES = ["low", "medium", "high"] as const;

// GET /api/tasks?framework=&status=&priority=&q=&limit=&offset=
router.get("/api/tasks", async (req, res) => {
  try {
    const { framework, status, priority, q } = req.query as Record<string, string | undefined>;
    const limit = Math.min(100, Math.max(1, parseInt(String(req.query.limit ?? "25"), 10)));
    const offset = Math.max(0, parseInt(String(req.query.offset ?? "0"), 10));

    const where = [];
    if (framework) where.push(eq(complianceTasks.framework, framework));
    if (status && TASK_STATUSES.includes(status as any)) where.push(eq(complianceTasks.status, status as any));
    if (priority && TASK_PRIORITIES.includes(priority as any)) where.push(eq(complianceTasks.priority, priority as any));
    // naive search on title/description
    let query = db.select().from(complianceTasks);
    if (where.length) {
      // @ts-ignore
      query = query.where(where.reduce((a, b) => a ? and(a, b) : b, null));
    }
    query = query.orderBy(desc(complianceTasks.updatedAt)).limit(limit).offset(offset);

    let rows = await query;
    if (q && q.trim()) {
      const needle = q.toLowerCase();
      rows = rows.filter(r =>
        (r.title ?? "").toLowerCase().includes(needle) ||
        (r.description ?? "").toLowerCase().includes(needle)
      );
    }

    const [{ count }] = await db.execute<{ count: number }>(
      sql`SELECT COUNT(*)::int AS count FROM ${complianceTasks}`
    );

    res.json({ items: rows, total: count });
  } catch (e: any) {
    res.status(500).json({ error: e.message });
  }
});

// POST /api/tasks
router.post("/api/tasks", async (req, res) => {
  try {
    const body = req.body ?? {};
    if (!body.title || !body.framework) {
      return res.status(400).json({ error: "title and framework are required" });
    }
    const [row] = await db.insert(complianceTasks).values({
      framework: String(body.framework),
      title: String(body.title),
      description: body.description ? String(body.description) : null,
      priority: TASK_PRIORITIES.includes(body.priority) ? body.priority : "medium",
      status: TASK_STATUSES.includes(body.status) ? body.status : "todo",
      dueDate: body.dueDate ? new Date(body.dueDate) : null,
      assigneeId: body.assigneeId ?? null,
    }).returning();

    await db.insert(auditLogs).values({
      userId: getUserIdFromReq(req),
      action: "task_create",
      resourceType: "compliance_tasks",
      resourceId: row.id,
      detail: { title: row.title, framework: row.framework },
    });

    res.json(row);
  } catch (e: any) {
    res.status(500).json({ error: e.message });
  }
});

// PATCH /api/tasks/:id
router.patch("/api/tasks/:id", async (req, res) => {
  try {
    const id = String(req.params.id);
    const body = req.body ?? {};

    const updates: any = {};
    if (body.title !== undefined) updates.title = String(body.title);
    if (body.description !== undefined) updates.description = body.description ? String(body.description) : null;
    if (body.framework !== undefined) updates.framework = String(body.framework);
    if (body.priority !== undefined && TASK_PRIORITIES.includes(body.priority)) updates.priority = body.priority;
    if (body.status !== undefined && TASK_STATUSES.includes(body.status)) updates.status = body.status;
    if (body.dueDate !== undefined) updates.dueDate = body.dueDate ? new Date(body.dueDate) : null;
    if (body.assigneeId !== undefined) updates.assigneeId = body.assigneeId ?? null;
    updates.updatedAt = new Date();

    const [row] = await db.update(complianceTasks).set(updates).where(eq(complianceTasks.id, id)).returning();

    await db.insert(auditLogs).values({
      userId: getUserIdFromReq(req),
      action: "task_update",
      resourceType: "compliance_tasks",
      resourceId: row?.id ?? null,
      detail: updates,
    });

    res.json(row);
  } catch (e: any) {
    res.status(500).json({ error: e.message });
  }
});

// DELETE /api/tasks/:id
router.delete("/api/tasks/:id", async (req, res) => {
  try {
    const id = String(req.params.id);
    const [row] = await db.delete(complianceTasks).where(eq(complianceTasks.id, id)).returning();

    await db.insert(auditLogs).values({
      userId: getUserIdFromReq(req),
      action: "task_delete",
      resourceType: "compliance_tasks",
      resourceId: row?.id ?? null,
    });

    res.json({ ok: true, id });
  } catch (e: any) {
    res.status(500).json({ error: e.message });
  }
});


// --- RISKS CRUD & FILTERS ---
// GET /api/risks?category=&severity=&probability=&q=&limit=&offset=
router.get("/api/risks", async (req, res) => {
  try {
    const { category, severity, probability, q } = req.query as Record<string, string | undefined>;
    const limit = Math.min(100, Math.max(1, parseInt(String(req.query.limit ?? "25"), 10)));
    const offset = Math.max(0, parseInt(String(req.query.offset ?? "0"), 10));

    const where = [];
    if (category) where.push(eq(risksTable.category, category));
    if (severity && RISK_SEVERITIES.includes(severity as any)) where.push(eq(risksTable.severity, severity as any));
    if (probability && RISK_PROBABILITIES.includes(probability as any)) where.push(eq(risksTable.probability, probability as any));

    let query = db.select().from(risksTable);
    if (where.length) {
      // @ts-ignore
      query = query.where(where.reduce((a, b) => a ? and(a, b) : b, null));
    }
    query = query.orderBy(desc(risksTable.updatedAt)).limit(limit).offset(offset);

    let rows = await query;
    if (q && q.trim()) {
      const needle = q.toLowerCase();
      rows = rows.filter(r =>
        (r.title ?? "").toLowerCase().includes(needle) ||
        (r.description ?? "").toLowerCase().includes(needle)
      );
    }

    const [{ count }] = await db.execute<{ count: number }>(
      sql`SELECT COUNT(*)::int AS count FROM ${risksTable}`
    );

    res.json({ items: rows, total: count });
  } catch (e: any) {
    res.status(500).json({ error: e.message });
  }
});

// POST /api/risks
router.post("/api/risks", async (req, res) => {
  try {
    const body = req.body ?? {};
    if (!body.title || !body.category) {
      return res.status(400).json({ error: "title and category are required" });
    }
    const [row] = await db.insert(risksTable).values({
      category: String(body.category), // operational|technical|compliance
      title: String(body.title),
      description: body.description ? String(body.description) : null,
      severity: RISK_SEVERITIES.includes(body.severity) ? body.severity : "medium",
      probability: RISK_PROBABILITIES.includes(body.probability) ? body.probability : "medium",
      mitigation: body.mitigation ? String(body.mitigation) : null,
      ownerId: body.ownerId ?? null,
    }).returning();

    await db.insert(auditLogs).values({
      userId: getUserIdFromReq(req),
      action: "risk_create",
      resourceType: "risks",
      resourceId: row.id,
      detail: { title: row.title, category: row.category },
    });

    res.json(row);
  } catch (e: any) {
    res.status(500).json({ error: e.message });
  }
});

// PATCH /api/risks/:id
router.patch("/api/risks/:id", async (req, res) => {
  try {
    const id = String(req.params.id);
    const body = req.body ?? {};

    const updates: any = {};
    if (body.title !== undefined) updates.title = String(body.title);
    if (body.description !== undefined) updates.description = body.description ? String(body.description) : null;
    if (body.category !== undefined) updates.category = String(body.category);
    if (body.severity !== undefined && RISK_SEVERITIES.includes(body.severity)) updates.severity = body.severity;
    if (body.probability !== undefined && RISK_PROBABILITIES.includes(body.probability)) updates.probability = body.probability;
    if (body.mitigation !== undefined) updates.mitigation = body.mitigation ? String(body.mitigation) : null;
    if (body.ownerId !== undefined) updates.ownerId = body.ownerId ?? null;
    updates.updatedAt = new Date();

    const [row] = await db.update(risksTable).set(updates).where(eq(risksTable.id, id)).returning();

    await db.insert(auditLogs).values({
      userId: getUserIdFromReq(req),
      action: "risk_update",
      resourceType: "risks",
      resourceId: row?.id ?? null,
      detail: updates,
    });

    res.json(row);
  } catch (e: any) {
    res.status(500).json({ error: e.message });
  }
});

// DELETE /api/risks/:id
router.delete("/api/risks/:id", async (req, res) => {
  try {
    const id = String(req.params.id);
    const [row] = await db.delete(risksTable).where(eq(risksTable.id, id)).returning();

    await db.insert(auditLogs).values({
      userId: getUserIdFromReq(req),
      action: "risk_delete",
      resourceType: "risks",
      resourceId: row?.id ?? null,
    });

    res.json({ ok: true, id });
  } catch (e: any) {
    res.status(500).json({ error: e.message });
  }
});
```

*These reuse your existing `auditLogs` for the activity feed and follow the same Express pattern you’re already using.*

---

# 2) Client: **Tasks** page with CRUD + filters

**File:** `client/src/pages/tasks.tsx`
**Replace file with:**

```tsx
// client/src/pages/tasks.tsx
import { useEffect, useMemo, useState } from "react";
import { useMutation, useQuery } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";

type Task = {
  id: string;
  framework: string;
  title: string;
  description: string | null;
  priority: "low" | "medium" | "high" | "critical";
  status: "todo" | "in_progress" | "blocked" | "done";
  dueDate: string | null;
  assigneeId: string | null;
  createdAt: string;
  updatedAt: string;
};

type ListResp<T> = { items: T[]; total: number };

const PRIORITIES = ["low", "medium", "high", "critical"] as const;
const STATUSES = ["todo", "in_progress", "blocked", "done"] as const;
const FRAMEWORKS = ["SOC2", "HIPAA", "ISO27001", "GDPR"];

export default function TasksPage() {
  // filters
  const [q, setQ] = useState("");
  const [framework, setFramework] = useState<string | undefined>();
  const [priority, setPriority] = useState<string | undefined>();
  const [status, setStatus] = useState<string | undefined>();

  // list
  const { data, isLoading, refetch } = useQuery<ListResp<Task>>({
    queryKey: ["/api/tasks", { q, framework, priority, status }],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (q) params.set("q", q);
      if (framework) params.set("framework", framework);
      if (priority) params.set("priority", priority);
      if (status) params.set("status", status);
      const res = await apiRequest("GET", `/api/tasks?${params.toString()}`);
      if (!res.ok) throw new Error("Failed to load tasks");
      return res.json();
    },
  });

  // create / update / delete mutations
  const createMutation = useMutation({
    mutationFn: async (body: Partial<Task>) => {
      const res = await apiRequest("POST", "/api/tasks", body);
      if (!res.ok) throw new Error("Create failed");
      return res.json();
    },
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["/api/tasks"] }),
  });

  const updateMutation = useMutation({
    mutationFn: async ({ id, body }: { id: string; body: Partial<Task> }) => {
      const res = await apiRequest("PATCH", `/api/tasks/${id}`, body);
      if (!res.ok) throw new Error("Update failed");
      return res.json();
    },
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["/api/tasks"] }),
  });

  const deleteMutation = useMutation({
    mutationFn: async (id: string) => {
      const res = await apiRequest("DELETE", `/api/tasks/${id}`);
      if (!res.ok) throw new Error("Delete failed");
      return res.json();
    },
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["/api/tasks"] }),
  });

  // new task form state
  const [open, setOpen] = useState(false);
  const [draft, setDraft] = useState<Partial<Task>>({
    framework: "SOC2",
    title: "",
    description: "",
    priority: "medium",
    status: "todo",
    dueDate: "",
  });

  const onCreate = async () => {
    await createMutation.mutateAsync({
      framework: draft.framework!,
      title: draft.title!,
      description: draft.description ?? "",
      priority: draft.priority ?? "medium",
      status: draft.status ?? "todo",
      dueDate: draft.dueDate || null,
    });
    setOpen(false);
    setDraft({ framework: "SOC2", title: "", description: "", priority: "medium", status: "todo", dueDate: "" });
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-12 grid gap-6">
      {/* Filters */}
      <Card>
        <CardHeader><CardTitle>Tasks</CardTitle></CardHeader>
        <CardContent className="grid lg:grid-cols-5 gap-3">
          <Input placeholder="Search…" value={q} onChange={(e) => setQ(e.target.value)} />
          <Select value={framework} onValueChange={setFramework}>
            <SelectTrigger><SelectValue placeholder="Framework" /></SelectTrigger>
            <SelectContent>
              {FRAMEWORKS.map(f => <SelectItem key={f} value={f}>{f}</SelectItem>)}
            </SelectContent>
          </Select>
          <Select value={priority} onValueChange={setPriority}>
            <SelectTrigger><SelectValue placeholder="Priority" /></SelectTrigger>
            <SelectContent>
              {PRIORITIES.map(p => <SelectItem key={p} value={p}>{p}</SelectItem>)}
            </SelectContent>
          </Select>
          <Select value={status} onValueChange={setStatus}>
            <SelectTrigger><SelectValue placeholder="Status" /></SelectTrigger>
            <SelectContent>
              {STATUSES.map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}
            </SelectContent>
          </Select>
          <div className="flex gap-2">
            <Button onClick={() => refetch()}>Apply</Button>
            <Button variant="outline" onClick={() => { setQ(""); setFramework(undefined); setPriority(undefined); setStatus(undefined); }}>
              Reset
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Actions */}
      <div className="flex justify-end">
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button className="bg-venzip-primary text-white">New Task</Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader><DialogTitle>Create Task</DialogTitle></DialogHeader>
            <div className="grid gap-3">
              <Select value={draft.framework} onValueChange={(v) => setDraft(d => ({ ...d, framework: v as any }))}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  {FRAMEWORKS.map(f => <SelectItem key={f} value={f}>{f}</SelectItem>)}
                </SelectContent>
              </Select>
              <Input placeholder="Title" value={draft.title ?? ""} onChange={(e) => setDraft(d => ({ ...d, title: e.target.value }))} />
              <Input placeholder="Description" value={draft.description ?? ""} onChange={(e) => setDraft(d => ({ ...d, description: e.target.value }))} />
              <div className="grid grid-cols-3 gap-3">
                <Select value={draft.priority} onValueChange={(v) => setDraft(d => ({ ...d, priority: v as any }))}>
                  <SelectTrigger><SelectValue placeholder="Priority" /></SelectTrigger>
                  <SelectContent>
                    {PRIORITIES.map(p => <SelectItem key={p} value={p}>{p}</SelectItem>)}
                  </SelectContent>
                </Select>
                <Select value={draft.status} onValueChange={(v) => setDraft(d => ({ ...d, status: v as any }))}>
                  <SelectTrigger><SelectValue placeholder="Status" /></SelectTrigger>
                  <SelectContent>
                    {STATUSES.map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}
                  </SelectContent>
                </Select>
                <Input type="date" value={draft.dueDate ?? ""} onChange={(e) => setDraft(d => ({ ...d, dueDate: e.target.value }))} />
              </div>
              <div className="flex justify-end gap-2">
                <Button variant="outline" onClick={() => setOpen(false)}>Cancel</Button>
                <Button onClick={onCreate} disabled={!draft.title || !draft.framework}>Create</Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Table */}
      <Card>
        <CardContent>
          {isLoading ? (
            <div className="py-8 text-sm text-gray-500">Loading…</div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Title</TableHead>
                  <TableHead>Framework</TableHead>
                  <TableHead>Priority</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Due</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {(data?.items ?? []).map((t) => (
                  <TableRow key={t.id}>
                    <TableCell className="font-medium">{t.title}</TableCell>
                    <TableCell>{t.framework}</TableCell>
                    <TableCell className="capitalize">{t.priority}</TableCell>
                    <TableCell className="capitalize">{t.status}</TableCell>
                    <TableCell>{t.dueDate ? new Date(t.dueDate).toLocaleDateString() : "-"}</TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => updateMutation.mutate({ id: t.id, body: { status: nextStatus(t.status) } })}
                        >
                          Advance
                        </Button>
                        <Button
                          variant="destructive"
                          size="sm"
                          onClick={() => deleteMutation.mutate(t.id)}
                        >
                          Delete
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

function nextStatus(s: Task["status"]): Task["status"] {
  const order = ["todo", "in_progress", "blocked", "done"] as const;
  const idx = order.indexOf(s);
  return order[Math.min(order.length - 1, idx + 1)];
}
```

This uses your **Table**, **Card**, **Button**, **Input**, **Select**, and **Dialog** components that already exist in your repo.

---

# 3) Client: **Risks** page with CRUD + filters

**File:** `client/src/pages/risks.tsx`
**Replace file with:**

```tsx
// client/src/pages/risks.tsx
import { useState } from "react";
import { useMutation, useQuery } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";

type Risk = {
  id: string;
  category: string; // operational | technical | compliance
  title: string;
  description: string | null;
  severity: "low" | "medium" | "high" | "critical";
  probability: "low" | "medium" | "high";
  mitigation: string | null;
  ownerId: string | null;
  createdAt: string;
  updatedAt: string;
};

type ListResp<T> = { items: T[]; total: number };

const CATEGORIES = ["operational", "technical", "compliance"];
const SEVERITIES = ["low", "medium", "high", "critical"] as const;
const PROBABILITIES = ["low", "medium", "high"] as const;

export default function RisksPage() {
  const [q, setQ] = useState("");
  const [category, setCategory] = useState<string | undefined>();
  const [severity, setSeverity] = useState<string | undefined>();
  const [probability, setProbability] = useState<string | undefined>();

  const { data, isLoading, refetch } = useQuery<ListResp<Risk>>({
    queryKey: ["/api/risks", { q, category, severity, probability }],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (q) params.set("q", q);
      if (category) params.set("category", category);
      if (severity) params.set("severity", severity);
      if (probability) params.set("probability", probability);
      const res = await apiRequest("GET", `/api/risks?${params.toString()}`);
      if (!res.ok) throw new Error("Failed to load risks");
      return res.json();
    },
  });

  const createMutation = useMutation({
    mutationFn: async (body: Partial<Risk>) => {
      const res = await apiRequest("POST", "/api/risks", body);
      if (!res.ok) throw new Error("Create failed");
      return res.json();
    },
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["/api/risks"] }),
  });

  const updateMutation = useMutation({
    mutationFn: async ({ id, body }: { id: string; body: Partial<Risk> }) => {
      const res = await apiRequest("PATCH", `/api/risks/${id}`, body);
      if (!res.ok) throw new Error("Update failed");
      return res.json();
    },
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["/api/risks"] }),
  });

  const deleteMutation = useMutation({
    mutationFn: async (id: string) => {
      const res = await apiRequest("DELETE", `/api/risks/${id}`);
      if (!res.ok) throw new Error("Delete failed");
      return res.json();
    },
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["/api/risks"] }),
  });

  const [open, setOpen] = useState(false);
  const [draft, setDraft] = useState<Partial<Risk>>({
    category: "operational",
    title: "",
    description: "",
    severity: "medium",
    probability: "medium",
    mitigation: "",
  });

  const onCreate = async () => {
    await createMutation.mutateAsync({
      category: draft.category!,
      title: draft.title!,
      description: draft.description ?? "",
      severity: draft.severity ?? "medium",
      probability: draft.probability ?? "medium",
      mitigation: draft.mitigation ?? "",
    });
    setOpen(false);
    setDraft({ category: "operational", title: "", description: "", severity: "medium", probability: "medium", mitigation: "" });
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-12 grid gap-6">
      {/* Filters */}
      <Card>
        <CardHeader><CardTitle>Risks</CardTitle></CardHeader>
        <CardContent className="grid lg:grid-cols-5 gap-3">
          <Input placeholder="Search…" value={q} onChange={(e) => setQ(e.target.value)} />
          <Select value={category} onValueChange={setCategory}>
            <SelectTrigger><SelectValue placeholder="Category" /></SelectTrigger>
            <SelectContent>
              {CATEGORIES.map(c => <SelectItem key={c} value={c}>{c}</SelectItem>)}
            </SelectContent>
          </Select>
          <Select value={severity} onValueChange={setSeverity}>
            <SelectTrigger><SelectValue placeholder="Severity" /></SelectTrigger>
            <SelectContent>
              {SEVERITIES.map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}
            </SelectContent>
          </Select>
          <Select value={probability} onValueChange={setProbability}>
            <SelectTrigger><SelectValue placeholder="Probability" /></SelectTrigger>
            <SelectContent>
              {PROBABILITIES.map(p => <SelectItem key={p} value={p}>{p}</SelectItem>)}
            </SelectContent>
          </Select>
          <div className="flex gap-2">
            <Button onClick={() => refetch()}>Apply</Button>
            <Button variant="outline" onClick={() => { setQ(""); setCategory(undefined); setSeverity(undefined); setProbability(undefined); }}>
              Reset
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Actions */}
      <div className="flex justify-end">
        <Dialog open={open} onOpenChange={setOpen}>
          <DialogTrigger asChild>
            <Button className="bg-venzip-primary text-white">New Risk</Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader><DialogTitle>Create Risk</DialogTitle></DialogHeader>
            <div className="grid gap-3">
              <Select value={draft.category} onValueChange={(v) => setDraft(d => ({ ...d, category: v }))}>
                <SelectTrigger><SelectValue /></SelectTrigger>
                <SelectContent>
                  {CATEGORIES.map(c => <SelectItem key={c} value={c}>{c}</SelectItem>)}
                </SelectContent>
              </Select>
              <Input placeholder="Title" value={draft.title ?? ""} onChange={(e) => setDraft(d => ({ ...d, title: e.target.value }))} />
              <Input placeholder="Description" value={draft.description ?? ""} onChange={(e) => setDraft(d => ({ ...d, description: e.target.value }))} />
              <div className="grid grid-cols-3 gap-3">
                <Select value={draft.severity} onValueChange={(v) => setDraft(d => ({ ...d, severity: v as any }))}>
                  <SelectTrigger><SelectValue placeholder="Severity" /></SelectTrigger>
                  <SelectContent>
                    {SEVERITIES.map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}
                  </SelectContent>
                </Select>
                <Select value={draft.probability} onValueChange={(v) => setDraft(d => ({ ...d, probability: v as any }))}>
                  <SelectTrigger><SelectValue placeholder="Probability" /></SelectTrigger>
                  <SelectContent>
                    {PROBABILITIES.map(p => <SelectItem key={p} value={p}>{p}</SelectItem>)}
                  </SelectContent>
                </Select>
                <Input placeholder="Mitigation" value={draft.mitigation ?? ""} onChange={(e) => setDraft(d => ({ ...d, mitigation: e.target.value }))} />
              </div>
              <div className="flex justify-end gap-2">
                <Button variant="outline" onClick={() => setOpen(false)}>Cancel</Button>
                <Button onClick={onCreate} disabled={!draft.title || !draft.category}>Create</Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Table */}
      <Card>
        <CardContent>
          {isLoading ? (
            <div className="py-8 text-sm text-gray-500">Loading…</div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Title</TableHead>
                  <TableHead>Category</TableHead>
                  <TableHead>Severity</TableHead>
                  <TableHead>Probability</TableHead>
                  <TableHead>Mitigation</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {(data?.items ?? []).map((r) => (
                  <TableRow key={r.id}>
                    <TableCell className="font-medium">{r.title}</TableCell>
                    <TableCell className="capitalize">{r.category}</TableCell>
                    <TableCell className="capitalize">{r.severity}</TableCell>
                    <TableCell className="capitalize">{r.probability}</TableCell>
                    <TableCell className="truncate max-w-[220px]" title={r.mitigation ?? ""}>
                      {r.mitigation || "-"}
                    </TableCell>
                    <TableCell>
                      <div className="flex gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => updateMutation.mutate({
                            id: r.id,
                            body: { severity: elevate(r.severity) }
                          })}
                        >
                          Escalate
                        </Button>
                        <Button
                          variant="destructive"
                          size="sm"
                          onClick={() => deleteMutation.mutate(r.id)}
                        >
                          Delete
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

function elevate(s: Risk["severity"]): Risk["severity"] {
  const order = ["low", "medium", "high", "critical"] as const;
  const idx = order.indexOf(s);
  return order[Math.min(order.length - 1, idx + 1)];
}
```

This uses the same shadcn building blocks your project already includes.

---

## Notes and tiny checks

* Your **router and pages** are already mounted via `App.tsx` and Wouter; these files replace the `Tasks` and `Risks` page contents directly.
* The **UI kit** components referenced above exist in your repo (`card`, `button`, `input`, `select`, `table`, `dialog`).
* The server file earlier mounted `routes` and JSON middleware, so these endpoints will be active once pasted.

---

## Quick validation flow

1. **Restart server** and run the app.
2. **Tasks page**: create a task, filter by framework/priority/status, advance status, delete.
3. **Risks page**: create a risk, filter by category/severity/probability, escalate severity, delete.
4. **Dashboard**: your `/api/summary` will immediately start reflecting activity counts (uploads + chats) and recent audit events.

If you want, I can also update `/api/summary` to compute **real “gaps”** from `compliance_tasks` and `risks` (for example: gaps = open high-priority tasks + high/critical risks) so the dashboard’s gap panel is data-driven instead of placeholder.
