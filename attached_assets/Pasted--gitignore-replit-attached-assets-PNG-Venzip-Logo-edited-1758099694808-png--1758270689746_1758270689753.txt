├── .gitignore
├── .replit
├── attached_assets
    ├── PNG Venzip Logo _edited_1758099694808.png
    ├── PNG Venzip Logo _edited_1758100008050.png
    ├── Pasted Graphic 1_1758110290169.png
    ├── Pasted--Venzip-Landing-Page-Copy-Conversion-Ready-Hero-Above-the-Fold-Headline-Get-Audit-Ready-in-D-1758254793244_1758254793247.txt
    ├── Pasted--Venzip-Landing-Page-Copy-Conversion-Ready-Hero-Above-the-Fold-Headline-Get-Audit-Ready-in-D-1758254930631_1758254930632.txt
    ├── Pasted--Venzip-MVP-Landing-Page-Copy-Full-Flow-Hero-Above-the-Fold-Headline-Get-Audit-Ready-in-Days-1758255344366_1758255344367.txt
    ├── Pasted-Dark-mode-in-SaaS-has-different-stakes-than-in-consumer-apps-it-affects-readability-of-complex-da-1758257385623_1758257385624.txt
    ├── Pasted-Perfect-let-s-narrow-this-down-specifically-for-SaaS-apps-multi-screen-dashboard-style-often-da-1758257323078_1758257323079.txt
    ├── Pasted-import-useState-from-react-import-Button-from-components-ui-button-import-Card-Ca-1758108092171_1758108092172.txt
    ├── Pasted-import-useState-from-react-import-Button-from-components-ui-button-import-Card-Ca-1758257106695_1758257106696.txt
    ├── image_1758117270897.png
    ├── image_1758255881800.png
    ├── image_1758260313103.png
    └── venzip-logo.png
├── client
    ├── index.html
    └── src
    │   ├── App.tsx
    │   ├── assets
    │       └── venzip-logo.png
    │   ├── components
    │       ├── FrameworkProgressTable.tsx
    │       ├── LazyAIChat.tsx
    │       ├── ai-chat.tsx
    │       ├── app-sidebar.tsx
    │       ├── compliance
    │       │   ├── GapDetection.tsx
    │       │   └── ProgressTracking.tsx
    │       ├── dynamic-risk-dashboard.tsx
    │       ├── evidence-mapping-dashboard.tsx
    │       ├── file-upload.tsx
    │       ├── framework-card.tsx
    │       ├── navigation.tsx
    │       ├── notification-button.tsx
    │       ├── progress-ring.tsx
    │       ├── reports
    │       │   └── ReportGenerator.tsx
    │       ├── risk-heatmap.tsx
    │       ├── risk-notifications.tsx
    │       ├── tasks
    │       │   ├── DeadlineIntelligence.tsx
    │       │   ├── TaskCard.tsx
    │       │   ├── TaskDetails.tsx
    │       │   ├── TaskFilters.tsx
    │       │   ├── TaskForm.tsx
    │       │   ├── TaskList.tsx
    │       │   └── WeeklyRecommendations.tsx
    │       ├── tour
    │       │   ├── TourButton.tsx
    │       │   ├── TourConfig.ts
    │       │   ├── TourGuide.tsx
    │       │   ├── TourInitializer.tsx
    │       │   ├── TourProvider.tsx
    │       │   ├── TourStep.tsx
    │       │   └── tourSteps.ts
    │       └── ui
    │       │   ├── accordion.tsx
    │       │   ├── alert-dialog.tsx
    │       │   ├── alert.tsx
    │       │   ├── aspect-ratio.tsx
    │       │   ├── avatar.tsx
    │       │   ├── badge.tsx
    │       │   ├── breadcrumb.tsx
    │       │   ├── button.tsx
    │       │   ├── calendar.tsx
    │       │   ├── card.tsx
    │       │   ├── carousel.tsx
    │       │   ├── chart.tsx
    │       │   ├── checkbox.tsx
    │       │   ├── collapsible.tsx
    │       │   ├── command.tsx
    │       │   ├── context-menu.tsx
    │       │   ├── dialog.tsx
    │       │   ├── drawer.tsx
    │       │   ├── dropdown-menu.tsx
    │       │   ├── form.tsx
    │       │   ├── hover-card.tsx
    │       │   ├── input-otp.tsx
    │       │   ├── input.tsx
    │       │   ├── label.tsx
    │       │   ├── menubar.tsx
    │       │   ├── navigation-menu.tsx
    │       │   ├── pagination-controls.tsx
    │       │   ├── pagination.tsx
    │       │   ├── popover.tsx
    │       │   ├── progress.tsx
    │       │   ├── radio-group.tsx
    │       │   ├── resizable.tsx
    │       │   ├── scroll-area.tsx
    │       │   ├── select.tsx
    │       │   ├── separator.tsx
    │       │   ├── sheet.tsx
    │       │   ├── sidebar.tsx
    │       │   ├── skeleton.tsx
    │       │   ├── slider.tsx
    │       │   ├── switch.tsx
    │       │   ├── table.tsx
    │       │   ├── tabs.tsx
    │       │   ├── textarea.tsx
    │       │   ├── theme-toggle.tsx
    │       │   ├── toast.tsx
    │       │   ├── toaster.tsx
    │       │   ├── toggle-group.tsx
    │       │   ├── toggle.tsx
    │       │   └── tooltip.tsx
    │   ├── contexts
    │       └── ThemeContext.tsx
    │   ├── hooks
    │       ├── use-mobile.tsx
    │       ├── use-toast.ts
    │       ├── useAuth.ts
    │       ├── usePagination.ts
    │       ├── useSummary.ts
    │       ├── useTheme.ts
    │       └── useTour.ts
    │   ├── index.css
    │   ├── lib
    │       ├── authUtils.ts
    │       ├── queryClient.ts
    │       └── utils.ts
    │   ├── main.tsx
    │   └── pages
    │       ├── audit-calendar.tsx
    │       ├── company-profile.tsx
    │       ├── compliance-insights.tsx
    │       ├── dashboard.tsx
    │       ├── documents.tsx
    │       ├── evidence.tsx
    │       ├── home.tsx
    │       ├── landing.tsx
    │       ├── learning-hub.tsx
    │       ├── not-found.tsx
    │       ├── onboarding.tsx
    │       ├── risks.tsx
    │       ├── tasks.tsx
    │       ├── test-documents.tsx
    │       └── test-notifications.tsx
├── components.json
├── drizzle.config.ts
├── package-lock.json
├── package.json
├── postcss.config.js
├── replit.md
├── scripts
    ├── migrate.ts
    └── seed-learning-resources.js
├── server
    ├── anthropic.ts
    ├── background-scheduler.ts
    ├── db.ts
    ├── evidenceMapping.ts
    ├── index.ts
    ├── migrations
    │   ├── 003_add_task_fields.sql
    │   └── 004_add_onboarding_completed.sql
    ├── pagination.ts
    ├── replitAuth.ts
    ├── reportGenerator.ts
    ├── routes.ts
    ├── routes
    │   └── tasks.ts
    ├── runMigrations.ts
    ├── seedBasicRequirements.ts
    ├── seedComplianceData.ts
    ├── seedData.ts
    ├── storage.ts
    └── vite.ts
├── shared
    └── schema.ts
├── tailwind.config.ts
├── tsconfig.json
└── vite.config.ts


/.gitignore:
--------------------------------------------------------------------------------
1 | node_modules
2 | dist
3 | .DS_Store
4 | server/public
5 | vite.config.ts.*
6 | *.tar.gz


--------------------------------------------------------------------------------
/.replit:
--------------------------------------------------------------------------------
 1 | modules = ["nodejs-20", "web", "postgresql-16"]
 2 | run = "npm run dev"
 3 | hidden = [".config", ".git", "generated-icon.png", "node_modules", "dist"]
 4 | 
 5 | [nix]
 6 | channel = "stable-24_05"
 7 | 
 8 | [deployment]
 9 | deploymentTarget = "autoscale"
10 | build = ["npm", "run", "build"]
11 | run = ["npm", "run", "start"]
12 | 
13 | [[ports]]
14 | localPort = 5000
15 | externalPort = 80
16 | 
17 | [[ports]]
18 | localPort = 34229
19 | externalPort = 3002
20 | 
21 | [[ports]]
22 | localPort = 36229
23 | externalPort = 4200
24 | 
25 | [[ports]]
26 | localPort = 43347
27 | externalPort = 3000
28 | 
29 | [[ports]]
30 | localPort = 44843
31 | externalPort = 3001
32 | 
33 | [env]
34 | PORT = "5000"
35 | 
36 | [workflows]
37 | runButton = "Start Dev Server"
38 | 
39 | [[workflows.workflow]]
40 | name = "Project"
41 | mode = "parallel"
42 | author = "agent"
43 | 
44 | [[workflows.workflow.tasks]]
45 | task = "workflow.run"
46 | args = "Start application"
47 | 
48 | [[workflows.workflow]]
49 | name = "Start application"
50 | author = "agent"
51 | 
52 | [[workflows.workflow.tasks]]
53 | task = "shell.exec"
54 | args = "npm run dev"
55 | waitForPort = 5000
56 | 
57 | [[workflows.workflow]]
58 | name = "Start Dev Server"
59 | author = 23270528
60 | mode = "sequential"
61 | 
62 | [[workflows.workflow.tasks]]
63 | task = "shell.exec"
64 | args = "npm run dev"
65 | 
66 | [agent]
67 | integrations = ["javascript_object_storage:1.0.0", "javascript_anthropic:1.0.0", "javascript_log_in_with_replit:1.0.0"]
68 | 


--------------------------------------------------------------------------------
https://raw.githubusercontent.com/Nikoldigital777/VenzipAI/e33aa31d33af1dfc6e47b2858cbf9f1f1ce923f1/attached_assets/PNG Venzip Logo _edited_1758099694808.png


--------------------------------------------------------------------------------
https://raw.githubusercontent.com/Nikoldigital777/VenzipAI/e33aa31d33af1dfc6e47b2858cbf9f1f1ce923f1/attached_assets/PNG Venzip Logo _edited_1758100008050.png


--------------------------------------------------------------------------------
https://raw.githubusercontent.com/Nikoldigital777/VenzipAI/e33aa31d33af1dfc6e47b2858cbf9f1f1ce923f1/attached_assets/Pasted Graphic 1_1758110290169.png


--------------------------------------------------------------------------------
/attached_assets/Pasted--Venzip-Landing-Page-Copy-Conversion-Ready-Hero-Above-the-Fold-Headline-Get-Audit-Ready-in-D-1758254793244_1758254793247.txt:
--------------------------------------------------------------------------------
  1 | 🌐 Venzip Landing Page Copy (Conversion-Ready)
  2 | Hero (Above the Fold)
  3 | Headline:
  4 | “Get Audit-Ready in Days — Not Months.”
  5 | Subheadline:
  6 | Venzip makes compliance simple. Our AI-powered platform automates ISO 27001, SOC 2, HIPAA, and more — with dashboards, evidence mapping, and expert guidance built-in.
  7 | Primary CTA:
  8 | [Access My Free Demo]
  9 | Visual:
 10 | Show your real product dashboard — progress rings, evidence summary, and risk heatmap (replace stock images).
 11 | Trust Strip
 12 | Trusted by industry leaders worldwide:
 13 | (Deloitte, Canada Life, HSBC, TELUS, CWB logos, etc.)
 14 | Problem → Agitate
 15 | Tired of:
 16 | Juggling spreadsheets, emails, and last-minute audit prep?
 17 | Losing weeks collecting policies and logs manually?
 18 | Not knowing if your business is actually audit-ready?
 19 | There’s a smarter way. → Meet Venzip.
 20 | Core Benefits
 21 | Venzip automates the hardest parts of compliance:
 22 | Automated Evidence Collection
 23 | Connect your tech stack. Venzip gathers, organizes, and tags documents for audits automatically.
 24 | AI Risk Engine
 25 | Detect risks before auditors do. Continuous monitoring reduces blind spots.
 26 | Framework Mapper
 27 | Map policies and controls across multiple standards at once — ISO, SOC 2, HIPAA, GDPR. No duplicate work.
 28 | Real-Time Dashboards
 29 | Track progress, pending tasks, and evidence in one place. Always know your audit readiness score.
 30 | [See How It Works]
 31 | How It Works
 32 | Onboard → Add company details & select frameworks.
 33 | Map Controls → AI generates a tailored compliance task list.
 34 | Collect Evidence → Auto-sync or upload documentation.
 35 | Get Audit-Ready → Export an auditor-friendly package instantly.
 36 | Social Proof
 37 | “Our compliance process was scattered across spreadsheets and departments, making audits a nightmare. Venzip centralized everything and gave us real-time visibility into our risk posture.”
 38 | — Compliance Director, Global Tech Company
 39 | Why Venzip
 40 | AI-Powered Compliance → Automates detection, scoring, monitoring.
 41 | Seamless Integrations → Works with your cloud, collaboration, and reporting tools.
 42 | Expert Guidance → Built-in templates, instructions, and best practices.
 43 | Scalable for SMBs → From startup to enterprise readiness.
 44 | FAQs
 45 | Is my data secure?
 46 | Yes. Venzip uses enterprise-grade encryption and is hosted in ISO 27001-certified environments.
 47 | Which frameworks are supported?
 48 | ISO 27001, SOC 2, HIPAA, GDPR, with more being added.
 49 | How long does setup take?
 50 | Onboarding is complete in days, not months. Most teams are audit-ready within weeks.
 51 | Closing CTA
 52 | “Stop stressing about compliance. Start scaling with confidence.”
 53 | [Book My Demo Now]
 54 | 📌 Notes for Implementation
 55 | Unify CTA buttons → Stick to “Book Demo” / “Access My Free Demo” everywhere.
 56 | Replace stock photos with product UI → Show dashboards and screenshots to prove real value.
 57 | Keep copy scannable → Bullets, short paragraphs, bolding key phrases.
 58 | Place a form right after Hero (First Name, Last Name, Email, Company, Phone). Title it “See Venzip in Action”. Perfect ✅ — here’s a polished **demo request form microcopy** you can drop straight into your landing page:
 59 | 
 60 | ---
 61 | 
 62 | # 📝 Demo Request Form Copy
 63 | 
 64 | **Form Title (above form):**
 65 | **“See Venzip in Action”**
 66 | Experience how easy compliance can be with a live interactive demo.
 67 | 
 68 | ---
 69 | 
 70 | **Form Fields & Placeholders:**
 71 | 
 72 | * **First Name**\*
 73 |   Placeholder: *Enter your first name*
 74 | 
 75 | * **Last Name**\*
 76 |   Placeholder: *Enter your last name*
 77 | 
 78 | * **Email**\*
 79 |   Placeholder: *[yourname@company.com](mailto:yourname@company.com)*
 80 | 
 81 | * **Phone (optional)**
 82 |   Placeholder: *+1 (\_**) \_**-*****
 83 | 
 84 | * **Company Name**\*
 85 |   Placeholder: *Your company or organization*
 86 | 
 87 | * **Job Title** (optional, but useful for B2B)
 88 |   Placeholder: *Compliance Manager, CTO, Security Lead…*
 89 | 
 90 | ---
 91 | 
 92 | **CTA Button (big, primary):**
 93 | 👉 **“Access My Free Demo”**
 94 | 
 95 | ---
 96 | 
 97 | **Trust Reassurance (below button, small text):**
 98 | 🔒 *Your information is secure. We’ll never share your data.*
 99 | 
100 | ---
101 | 
102 | **Optional Social Proof Element (right under form):**
103 | 
104 | > “Trusted by Deloitte, HSBC, Canada Life, TELUS, and fast-growing startups.”
105 | 
106 | ---
107 | 
108 | # ✅ UX Best Practices to Boost Conversion
109 | 
110 | * Keep required fields minimal (First, Last, Email, Company).
111 | * Use “Access My Free Demo” instead of “Submit” — action-oriented copy converts better.
112 | * Place a small trust reassurance note (*no spam / data is secure*) right under the button.
113 | * On mobile, ensure the button is thumb-friendly (full width).
114 | 
115 | ---
116 | 
117 | ⚡ Do you also want me to **mock the full above-the-fold hero section copy + form layout together** (headline, subheadline, CTA, form with microcopy, trust badge) so you have one ready-to-use block?


--------------------------------------------------------------------------------
/attached_assets/Pasted--Venzip-Landing-Page-Copy-Conversion-Ready-Hero-Above-the-Fold-Headline-Get-Audit-Ready-in-D-1758254930631_1758254930632.txt:
--------------------------------------------------------------------------------
  1 | 🌐 Venzip Landing Page Copy (Conversion-Ready)
  2 | Hero (Above the Fold)
  3 | Headline:
  4 | “Get Audit-Ready in Days — Not Months.”
  5 | Subheadline:
  6 | Venzip makes compliance simple. Our AI-powered platform automates ISO 27001, SOC 2, HIPAA, and more — with dashboards, evidence mapping, and expert guidance built-in.
  7 | Primary CTA:
  8 | [Access My Free Demo]
  9 | Visual:
 10 | Show your real product dashboard — progress rings, evidence summary, and risk heatmap (replace stock images).
 11 | Trust Strip
 12 | Trusted by industry leaders worldwide:
 13 | (Deloitte, Canada Life, HSBC, TELUS, CWB logos, etc.)
 14 | Problem → Agitate
 15 | Tired of:
 16 | Juggling spreadsheets, emails, and last-minute audit prep?
 17 | Losing weeks collecting policies and logs manually?
 18 | Not knowing if your business is actually audit-ready?
 19 | There’s a smarter way. → Meet Venzip.
 20 | Core Benefits
 21 | Venzip automates the hardest parts of compliance:
 22 | Automated Evidence Collection
 23 | Connect your tech stack. Venzip gathers, organizes, and tags documents for audits automatically.
 24 | AI Risk Engine
 25 | Detect risks before auditors do. Continuous monitoring reduces blind spots.
 26 | Framework Mapper
 27 | Map policies and controls across multiple standards at once — ISO, SOC 2, HIPAA, GDPR. No duplicate work.
 28 | Real-Time Dashboards
 29 | Track progress, pending tasks, and evidence in one place. Always know your audit readiness score.
 30 | [See How It Works]
 31 | How It Works
 32 | Onboard → Add company details & select frameworks.
 33 | Map Controls → AI generates a tailored compliance task list.
 34 | Collect Evidence → Auto-sync or upload documentation.
 35 | Get Audit-Ready → Export an auditor-friendly package instantly.
 36 | Social Proof
 37 | “Our compliance process was scattered across spreadsheets and departments, making audits a nightmare. Venzip centralized everything and gave us real-time visibility into our risk posture.”
 38 | — Compliance Director, Global Tech Company
 39 | Why Venzip
 40 | AI-Powered Compliance → Automates detection, scoring, monitoring.
 41 | Seamless Integrations → Works with your cloud, collaboration, and reporting tools.
 42 | Expert Guidance → Built-in templates, instructions, and best practices.
 43 | Scalable for SMBs → From startup to enterprise readiness.
 44 | FAQs
 45 | Is my data secure?
 46 | Yes. Venzip uses enterprise-grade encryption and is hosted in ISO 27001-certified environments.
 47 | Which frameworks are supported?
 48 | ISO 27001, SOC 2, HIPAA, GDPR, with more being added.
 49 | How long does setup take?
 50 | Onboarding is complete in days, not months. Most teams are audit-ready within weeks.
 51 | Closing CTA
 52 | “Stop stressing about compliance. Start scaling with confidence.”
 53 | [Book My Demo Now]
 54 | 📌 Notes for Implementation
 55 | Unify CTA buttons → Stick to “Book Demo” / “Access My Free Demo” everywhere.
 56 | Replace stock photos with product UI → Show dashboards and screenshots to prove real value.
 57 | Keep copy scannable → Bullets, short paragraphs, bolding key phrases.
 58 | Place a form right after Hero (First Name, Last Name, Email, Company, Phone). Title it “See Venzip in Action”. Perfect ✅ — here’s a polished **demo request form microcopy** you can drop straight into your landing page:
 59 | 
 60 | ---
 61 | 
 62 | # 📝 Demo Request Form Copy
 63 | 
 64 | **Form Title (above form):**
 65 | **“See Venzip in Action”**
 66 | Experience how easy compliance can be with a live interactive demo.
 67 | 
 68 | ---
 69 | 
 70 | **Form Fields & Placeholders:**
 71 | 
 72 | * **First Name**\*
 73 |   Placeholder: *Enter your first name*
 74 | 
 75 | * **Last Name**\*
 76 |   Placeholder: *Enter your last name*
 77 | 
 78 | * **Email**\*
 79 |   Placeholder: *[yourname@company.com](mailto:yourname@company.com)*
 80 | 
 81 | * **Phone (optional)**
 82 |   Placeholder: *+1 (\_**) \_**-*****
 83 | 
 84 | * **Company Name**\*
 85 |   Placeholder: *Your company or organization*
 86 | 
 87 | * **Job Title** (optional, but useful for B2B)
 88 |   Placeholder: *Compliance Manager, CTO, Security Lead…*
 89 | 
 90 | ---
 91 | 
 92 | **CTA Button (big, primary):**
 93 | 👉 **“Access My Free Demo”**
 94 | 
 95 | ---
 96 | 
 97 | **Trust Reassurance (below button, small text):**
 98 | 🔒 *Your information is secure. We’ll never share your data.*
 99 | 
100 | ---
101 | 
102 | **Optional Social Proof Element (right under form):**
103 | 
104 | > “Trusted by Deloitte, HSBC, Canada Life, TELUS, and fast-growing startups.”
105 | 
106 | ---
107 | 
108 | # ✅ UX Best Practices to Boost Conversion
109 | 
110 | * Keep required fields minimal (First, Last, Email, Company).
111 | * Use “Access My Free Demo” instead of “Submit” — action-oriented copy converts better.
112 | * Place a small trust reassurance note (*no spam / data is secure*) right under the button.
113 | * On mobile, ensure the button is thumb-friendly (full width).
114 | 
115 | ---
116 | 
117 | ⚡ Do you also want me to **mock the full above-the-fold hero section copy + form layout together** (headline, subheadline, CTA, form with microcopy, trust badge) so you have one ready-to-use block?


--------------------------------------------------------------------------------
/attached_assets/Pasted--Venzip-MVP-Landing-Page-Copy-Full-Flow-Hero-Above-the-Fold-Headline-Get-Audit-Ready-in-Days-1758255344366_1758255344367.txt:
--------------------------------------------------------------------------------
 1 | 🌐 Venzip MVP Landing Page Copy (Full Flow)
 2 | Hero (Above the Fold)
 3 | Headline:
 4 | “Get Audit-Ready in Days — Not Months.”
 5 | Subheadline:
 6 | Venzip makes compliance simple. Our AI-powered platform automates ISO 27001, SOC 2, HIPAA, and more — with real-time dashboards, evidence mapping, and expert guidance built-in.
 7 | Primary CTA Button:
 8 | 👉 [Access My Free Demo]
 9 | Trust Strip (just under CTA):
10 | Trusted by Deloitte, HSBC, and Canada Life.
11 | Demo Request Form (Right-Aligned or Below on Mobile)
12 | Title:
13 | “See Venzip in Action”
14 | Experience how easy compliance can be with a live interactive demo.
15 | Fields:
16 | First Name* — Enter your first name
17 | Last Name* — Enter your last name
18 | Email* — yourname@company.com
19 | Phone (optional) — +1 (_) _-
20 | Company Name* — Your company or organization
21 | Job Title (optional) — Compliance Manager, CTO, Security Lead…
22 | CTA Button:
23 | 👉 “Access My Free Demo”
24 | Trust Reassurance (small text):
25 | 🔒 Your information is secure. We’ll never share your data.
26 | Problem → Solution Section
27 | Section Title:
28 | “Compliance Doesn’t Have to Be Complicated”
29 | Copy:
30 | Spreadsheets, endless emails, and last-minute scrambles don’t work anymore. Venzip gives you a smarter way to stay compliant — saving time, reducing risk, and eliminating the stress of audits.
31 | Mini CTA: 👉 [Book My Demo]
32 | How Venzip Works
33 | Section Title:
34 | “Compliance, Simplified in 4 Steps”
35 | Onboard Your Company
36 | Enter details and select frameworks (ISO 27001, SOC 2, HIPAA, GDPR). Venzip tailors your workspace instantly.
37 | Map Your Controls
38 | AI generates a comprehensive compliance task list — no duplicate work across frameworks.
39 | Collect Evidence Automatically
40 | Connect your systems to auto-gather policies, logs, and configs. Upload missing docs with step-by-step guidance.
41 | Get Audit-Ready
42 | Monitor progress in real time and export an auditor-ready report in one click.
43 | Mini CTA: 👉 [See It in Action]
44 | Why Venzip
45 | Section Title:
46 | “Why Growing Businesses Choose Venzip”
47 | 🔒 Always Audit-Ready — Evidence and controls organized in real time.
48 | ⚡ Save 70% of Audit Prep Time — AI automates evidence collection and risk detection.
49 | 📊 Total Visibility in One Dashboard — Clear, transparent, auditor-friendly.
50 | 🤝 Built-In Guidance — Templates, instructions, and best practices included.
51 | 🌱 Scales With Your Business — From startup readiness to enterprise compliance.
52 | Mini CTA: 👉 [Get Started Today]
53 | Testimonials & Social Proof
54 | Section Title:
55 | “Trusted by Businesses That Take Compliance Seriously”
56 | Logos: Deloitte | HSBC | Canada Life
57 | Testimonial 1:
58 | “Our compliance process was scattered across spreadsheets and departments, making audits a nightmare. Venzip centralized everything and gave us real-time visibility into our risk posture.”
59 | — Compliance Director, Global Tech Company
60 | Testimonial 2 (optional):
61 | “With Venzip, we cut our SOC 2 prep time in half and felt confident walking into the audit.”
62 | — CTO, FinTech Startup
63 | Mini CTA: 👉 [Join the Businesses Who Trust Venzip]
64 | Closing CTA (Final Section)
65 | Headline:
66 | “Stop Stressing About Compliance. Start Scaling with Confidence.”
67 | Subheadline:
68 | Venzip automates the hard work so you can focus on growing your business.
69 | CTA Button (bold, centered):
70 | 👉 [Book My Demo Now]
71 | 📌 Implementation Notes
72 | Keep CTA unified: “Book My Demo” or “Access My Free Demo” — don’t mix with “Learn More.”
73 | Hero visuals: Replace stock art with product screenshots (dashboard with progress rings, evidence summary, risk heatmap).
74 | Testimonials minimal but strong: Just 1–2 with logos for MVP credibility.
75 | Mobile-friendly form: Keep button full-width.
76 | Spacing: Use whitespace + bolding to keep copy scannable.
77 | ✅ This flow now has every conversion element:
78 | Clear headline promise.
79 | Immediate CTA + form above the fold.
80 | Problem → solution framing.
81 | Step-by-step “How it Works.”
82 | Benefits-first “Why Venzip.”
83 | Minimal but credible social proof.
84 | Strong closing CTA.


--------------------------------------------------------------------------------
/attached_assets/Pasted-Dark-mode-in-SaaS-has-different-stakes-than-in-consumer-apps-it-affects-readability-of-complex-da-1758257385623_1758257385624.txt:
--------------------------------------------------------------------------------
 1 | Dark mode in SaaS has different stakes than in consumer apps: it affects **readability of complex data**, **brand trust**, and **accessibility in work environments**.
 2 | 
 3 | Here are the **latest UI/UX tips for SaaS dark mode**:
 4 | 
 5 | ---
 6 | 
 7 | ## 1. Prioritize Data Legibility
 8 | 
 9 | SaaS dashboards usually involve tables, charts, and dense information.
10 | 
11 | * **Avoid pure black backgrounds** → use deep greys (`#121212`–`#1E1E1E`) to reduce glare.
12 | * **Use tiered text colors**:
13 | 
14 |   * Primary text: off-white (`#E0E0E0`)
15 |   * Secondary text: mid-grey (`#A0A0A0`)
16 |   * Disabled: darker grey (`#6C6C6C`)
17 | * **Charts & Data Viz**: use adjusted palettes (muted colors for bars/lines on dark background, avoid neon vibrancy unless deliberate for emphasis).
18 | 
19 | ---
20 | 
21 | ## 2. Maintain Visual Hierarchy
22 | 
23 | SaaS users depend on clear separation between sections (nav, content, modals).
24 | 
25 | * **Surface Elevation**: use slightly lighter panels (e.g. `#1C1C1E` for background, `#242424` for cards).
26 | * **Outlines instead of shadows**: light 1px borders or subtle inner glows often work better than dark shadows.
27 | * **Highlight Key States**: hover, selected row, active filters should pop via subtle background shifts (`rgba(255,255,255,0.05)`) instead of bright outlines.
28 | 
29 | ---
30 | 
31 | ## 3. Consistent Theming Across Modules
32 | 
33 | SaaS apps are modular (dashboards, settings, billing, analytics).
34 | 
35 | * Build a **design token system**:
36 | 
37 |   * `color.bg.primary.light / .dark`
38 |   * `color.text.primary.light / .dark`
39 |   * `color.surface.card.light / .dark`
40 | * Store in a theme file (JSON, CSS variables, or Tailwind config).
41 | * Helps scale across new modules without redoing dark mode logic.
42 | 
43 | ---
44 | 
45 | ## 4. Interaction & Feedback States
46 | 
47 | * **Success / Error Colors**: Test them specifically in dark mode. A bright green may vibrate; instead use slightly desaturated greens.
48 | * **Focus States**: SaaS users keyboard-navigate a lot. Ensure focus rings remain clear (e.g. `#3B82F6` blue focus outline against dark panels).
49 | * **Tooltips / Modals**: Use slightly lighter overlays for tooltips so they don’t blend into panels.
50 | 
51 | ---
52 | 
53 | ## 5. Branding & Trust
54 | 
55 | SaaS customers judge professionalism partly by consistency.
56 | 
57 | * **Logo Variants**: provide a light-mode and dark-mode version. Don’t let logos disappear.
58 | * **Charts + Brand Colors**: ensure your brand accent adapts across modes. For example, a bright blue may need slightly higher luminance in dark mode.
59 | * **Onboarding & Marketing Pages**: if your SaaS has marketing + app, both should respect dark/light toggle for consistency.
60 | 
61 | ---
62 | 
63 | ## 6. Technical Implementation
64 | 
65 | * **Use `prefers-color-scheme`** for auto-detect + manual override toggle in user profile.
66 | * **Persist preference** in DB or local storage → users expect their choice to carry across sessions/devices.
67 | * **CSS variables or Tailwind’s `dark:` classes** scale best for React/Next.js SaaS builds.
68 | * **Smooth transitions**: crossfade background + text colors on toggle for a premium feel.
69 | 
70 | ---
71 | 
72 | ## 7. Accessibility & Testing
73 | 
74 | * **Check contrast ratios**: minimum **4.5:1** for normal text, **3:1** for large text.
75 | * **Font weights**: avoid extra-thin fonts in dark mode (look washed out).
76 | * **Test with real SaaS workflows**: data-entry forms, multi-step modals, analytics dashboards — dark mode must still feel effortless.
77 | 
78 | ---
79 | 
80 | ✅ **Pro SaaS Tip**: Many companies (Notion, Linear, Figma) found that dark mode increases **session duration and satisfaction**. But they didn’t just invert colors — they redesigned surfaces, accents, and typography spacing specifically for dark mode. That’s the bar SaaS users now expect.
81 | 
82 | ---


--------------------------------------------------------------------------------
/attached_assets/Pasted-Perfect-let-s-narrow-this-down-specifically-for-SaaS-apps-multi-screen-dashboard-style-often-da-1758257323078_1758257323079.txt:
--------------------------------------------------------------------------------
 1 | Perfect — let’s narrow this down specifically for SaaS apps (multi-screen, dashboard-style, often data-heavy).
 2 | Dark mode in SaaS has different stakes than in consumer apps: it affects readability of complex data, brand trust, and accessibility in work environments.
 3 | Here are the latest UI/UX tips for SaaS dark mode:
 4 | 1. Prioritize Data Legibility
 5 | SaaS dashboards usually involve tables, charts, and dense information.
 6 | Avoid pure black backgrounds → use deep greys (#121212–#1E1E1E) to reduce glare.
 7 | Use tiered text colors:
 8 | Primary text: off-white (#E0E0E0)
 9 | Secondary text: mid-grey (#A0A0A0)
10 | Disabled: darker grey (#6C6C6C)
11 | Charts & Data Viz: use adjusted palettes (muted colors for bars/lines on dark background, avoid neon vibrancy unless deliberate for emphasis).
12 | 2. Maintain Visual Hierarchy
13 | SaaS users depend on clear separation between sections (nav, content, modals).
14 | Surface Elevation: use slightly lighter panels (e.g. #1C1C1E for background, #242424 for cards).
15 | Outlines instead of shadows: light 1px borders or subtle inner glows often work better than dark shadows.
16 | Highlight Key States: hover, selected row, active filters should pop via subtle background shifts (rgba(255,255,255,0.05)) instead of bright outlines.
17 | 3. Consistent Theming Across Modules
18 | SaaS apps are modular (dashboards, settings, billing, analytics).
19 | Build a design token system:
20 | color.bg.primary.light / .dark
21 | color.text.primary.light / .dark
22 | color.surface.card.light / .dark
23 | Store in a theme file (JSON, CSS variables, or Tailwind config).
24 | Helps scale across new modules without redoing dark mode logic.
25 | 4. Interaction & Feedback States
26 | Success / Error Colors: Test them specifically in dark mode. A bright green may vibrate; instead use slightly desaturated greens.
27 | Focus States: SaaS users keyboard-navigate a lot. Ensure focus rings remain clear (e.g. #3B82F6 blue focus outline against dark panels).
28 | Tooltips / Modals: Use slightly lighter overlays for tooltips so they don’t blend into panels.
29 | 5. Branding & Trust
30 | SaaS customers judge professionalism partly by consistency.
31 | Logo Variants: provide a light-mode and dark-mode version. Don’t let logos disappear.
32 | Charts + Brand Colors: ensure your brand accent adapts across modes. For example, a bright blue may need slightly higher luminance in dark mode.
33 | Onboarding & Marketing Pages: if your SaaS has marketing + app, both should respect dark/light toggle for consistency.
34 | 6. Technical Implementation
35 | Use prefers-color-scheme for auto-detect + manual override toggle in user profile.
36 | Persist preference in DB or local storage → users expect their choice to carry across sessions/devices.
37 | CSS variables or Tailwind’s dark: classes scale best for React/Next.js SaaS builds.
38 | Smooth transitions: crossfade background + text colors on toggle for a premium feel.
39 | 7. Accessibility & Testing
40 | Check contrast ratios: minimum 4.5:1 for normal text, 3:1 for large text.
41 | Font weights: avoid extra-thin fonts in dark mode (look washed out).
42 | Test with real SaaS workflows: data-entry forms, multi-step modals, analytics dashboards — dark mode must still feel effortless.
43 | ✅ Pro SaaS Tip: Many companies (Notion, Linear, Figma) found that dark mode increases session duration and satisfaction. But they didn’t just invert colors — they redesigned surfaces, accents, and typography spacing specifically for dark mode. That’s the bar SaaS users now expect.


--------------------------------------------------------------------------------
https://raw.githubusercontent.com/Nikoldigital777/VenzipAI/e33aa31d33af1dfc6e47b2858cbf9f1f1ce923f1/attached_assets/image_1758117270897.png


--------------------------------------------------------------------------------
https://raw.githubusercontent.com/Nikoldigital777/VenzipAI/e33aa31d33af1dfc6e47b2858cbf9f1f1ce923f1/attached_assets/image_1758255881800.png


--------------------------------------------------------------------------------
https://raw.githubusercontent.com/Nikoldigital777/VenzipAI/e33aa31d33af1dfc6e47b2858cbf9f1f1ce923f1/attached_assets/image_1758260313103.png


--------------------------------------------------------------------------------
https://raw.githubusercontent.com/Nikoldigital777/VenzipAI/e33aa31d33af1dfc6e47b2858cbf9f1f1ce923f1/attached_assets/venzip-logo.png


--------------------------------------------------------------------------------
/client/index.html:
--------------------------------------------------------------------------------
 1 | <!DOCTYPE html>
 2 | <html lang="en">
 3 |   <head>
 4 |     <meta charset="UTF-8" />
 5 |     <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
 6 |     <link rel="preconnect" href="https://fonts.googleapis.com">
 7 |     <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
 8 |     <link href="https://fonts.googleapis.com/css2?family=Architects+Daughter&family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&family=Fira+Code:wght@300..700&family=Geist+Mono:wght@100..900&family=Geist:wght@100..900&family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=IBM+Plex+Sans:ital,wght@0,100..700;1,100..700&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&family=Lora:ital,wght@0,400..700;1,400..700&family=Merriweather:ital,opsz,wght@0,18..144,300..900;1,18..144,300..900&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Outfit:wght@100..900&family=Oxanium:wght@200..800&family=Playfair+Display:ital,wght@0,400..900;1,400..900&family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto+Mono:ital,wght@0,100..700;1,100..700&family=Roboto:ital,wght@0,100..900;1,100..900&family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&family=Source+Serif+4:ital,opsz,wght@0,8..60,200..900;1,8..60,200..900&family=Space+Grotesk:wght@300..700&family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">
 9 |     <!-- Prevent theme flash by setting initial theme class before React mounts -->
10 |     <script>
11 |       (function() {
12 |         function getInitialTheme() {
13 |           const persistedTheme = localStorage.getItem('venzip-ui-theme');
14 |           const hasPersistedTheme = typeof persistedTheme === 'string';
15 |           
16 |           if (hasPersistedTheme) {
17 |             return persistedTheme;
18 |           }
19 |           
20 |           const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
21 |           return prefersDark ? 'dark' : 'light';
22 |         }
23 | 
24 |         const resolvedTheme = getInitialTheme();
25 |         const theme = resolvedTheme === 'system' 
26 |           ? (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')
27 |           : resolvedTheme;
28 |           
29 |         document.documentElement.classList.add(theme);
30 |       })();
31 |     </script>
32 |   </head>
33 |   <body>
34 |     <div id="root"></div>
35 |     <script type="module" src="/src/main.tsx"></script>
36 |     <!-- This is a replit script which adds a banner on the top of the page when opened in development mode outside the replit environment -->
37 |     <script type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js"></script>
38 |   </body>
39 | </html>


--------------------------------------------------------------------------------
1 | 
2 | [Binary file content - the uploaded logo image will be saved here]
3 | 


--------------------------------------------------------------------------------
/client/src/components/LazyAIChat.tsx:
--------------------------------------------------------------------------------
 1 | import { lazy, Suspense } from 'react';
 2 | 
 3 | // Lazy load the AIChat component to prevent performance issues during app initialization
 4 | const AIChat = lazy(() => import('./ai-chat'));
 5 | 
 6 | export default function LazyAIChat() {
 7 |   return (
 8 |     <Suspense fallback={null}>
 9 |       <AIChat />
10 |     </Suspense>
11 |   );
12 | }


--------------------------------------------------------------------------------
/client/src/components/framework-card.tsx:
--------------------------------------------------------------------------------
 1 | interface Framework {
 2 |   id: string;
 3 |   name: string;
 4 |   displayName: string;
 5 |   description: string;
 6 |   complexity: string;
 7 |   estimatedTimeMonths: number;
 8 |   totalControls: number;
 9 |   icon: string;
10 |   color: string;
11 | }
12 | 
13 | interface FrameworkCardProps {
14 |   framework: Framework;
15 |   selected: boolean;
16 |   onToggle: () => void;
17 | }
18 | 
19 | export default function FrameworkCard({ framework, selected, onToggle }: FrameworkCardProps) {
20 |   const getComplexityColor = (complexity: string) => {
21 |     switch (complexity) {
22 |       case 'high': return 'bg-danger-coral/20 text-danger-coral';
23 |       case 'medium': return 'bg-venzip-primary/20 text-venzip-primary-dark';
24 |       case 'low': return 'bg-success-green/20 text-success-green';
25 |       default: return 'bg-gray-100 text-gray-600';
26 |     }
27 |   };
28 | 
29 |   const getTimeEstimate = (months: number) => {
30 |     if (months < 6) return `${months}-${months + 3} months`;
31 |     return `${months}-${months + 6} months`;
32 |   };
33 | 
34 |   return (
35 |     <div
36 |       className={`framework-card glass-card p-6 rounded-xl border-2 transition-all duration-300 cursor-pointer hover-lift ${
37 |         selected 
38 |           ? 'selected border-venzip-primary shadow-lg bg-gradient-to-br from-venzip-primary/10 to-venzip-accent/5' 
39 |           : 'border-gray-200 hover:border-venzip-primary/30'
40 |       }`}
41 |       onClick={onToggle}
42 |       data-testid={`framework-card-${framework.name}`}
43 |     >
44 |       <div className="absolute top-0 right-0 w-24 h-24 bg-gradient-to-br from-venzip-primary to-venzip-primary-dark opacity-10 rounded-bl-full"></div>
45 |       
46 |       <div className="flex items-start justify-between mb-4">
47 |         <div className="flex items-center space-x-3">
48 |           <div className="w-12 h-12 bg-venzip-primary/10 rounded-lg flex items-center justify-center">
49 |             <i className={`${framework.icon} text-venzip-primary text-lg`}></i>
50 |           </div>
51 |           <div>
52 |             <h3 className="text-xl font-semibold text-gray-900">{framework.displayName}</h3>
53 |             <div className="flex items-center space-x-2 mt-1">
54 |               <span className={`px-2 py-1 text-xs font-medium rounded-full ${getComplexityColor(framework.complexity)}`}>
55 |                 {framework.complexity.charAt(0).toUpperCase() + framework.complexity.slice(1)}
56 |               </span>
57 |               <span className="text-xs text-gray-500">{getTimeEstimate(framework.estimatedTimeMonths)}</span>
58 |             </div>
59 |           </div>
60 |         </div>
61 |         <div 
62 |           className={`framework-checkbox w-6 h-6 rounded-full border-2 flex items-center justify-center transition-all duration-200 ${
63 |             selected 
64 |               ? 'bg-venzip-primary border-venzip-primary' 
65 |               : 'border-gray-300 hover:border-venzip-primary/50'
66 |           }`}
67 |           data-testid={`checkbox-${framework.name}`}
68 |         >
69 |           <i className={`fas fa-check text-white text-sm ${selected ? 'block' : 'hidden'}`}></i>
70 |         </div>
71 |       </div>
72 |       
73 |       <p className="text-gray-600 text-sm leading-relaxed mb-3">{framework.description}</p>
74 |       
75 |       <div className="text-xs text-gray-500">
76 |         {framework.totalControls} controls to implement
77 |       </div>
78 |     </div>
79 |   );
80 | }
81 | 


--------------------------------------------------------------------------------
/client/src/components/progress-ring.tsx:
--------------------------------------------------------------------------------
  1 | interface ProgressRingProps {
  2 |   percentage: number;
  3 |   size?: number;
  4 |   strokeWidth?: number;
  5 |   color?: string;
  6 |   backgroundColor?: string;
  7 |   showGlow?: boolean;
  8 |   label?: string;
  9 | }
 10 | 
 11 | export default function ProgressRing({ 
 12 |   percentage, 
 13 |   size = 120, 
 14 |   strokeWidth = 10,
 15 |   color = "#4ECDC4",
 16 |   backgroundColor = "rgba(255, 255, 255, 0.1)",
 17 |   showGlow = true,
 18 |   label
 19 | }: ProgressRingProps) {
 20 |   const radius = (size - strokeWidth) / 2;
 21 |   const circumference = 2 * Math.PI * radius;
 22 |   const strokeDashoffset = circumference - (percentage / 100) * circumference;
 23 |   
 24 |   // Dynamic color based on percentage
 25 |   const getProgressColor = (percent: number) => {
 26 |     if (percent >= 80) return "#00D9AA"; // Success green
 27 |     if (percent >= 60) return "#4ECDC4"; // Main teal
 28 |     if (percent >= 40) return "#44D9E8"; // Complementary cyan
 29 |     if (percent >= 20) return "#FF8C42"; // Warning orange
 30 |     return "#FF6B6B"; // Danger coral
 31 |   };
 32 |   
 33 |   const progressColor = getProgressColor(percentage);
 34 |   const glowColor = progressColor;
 35 | 
 36 |   return (
 37 |     <div className="relative inline-block group cursor-pointer" style={{ width: size, height: size }}>
 38 |       {/* Outer glow effect */}
 39 |       {showGlow && (
 40 |         <div 
 41 |           className="absolute inset-0 rounded-full opacity-20 group-hover:opacity-40 transition-opacity duration-500 animate-pulse"
 42 |           style={{
 43 |             background: `radial-gradient(circle, ${glowColor}30 0%, transparent 70%)`,
 44 |             filter: 'blur(8px)',
 45 |             transform: 'scale(1.2)'
 46 |           }}
 47 |         />
 48 |       )}
 49 |       
 50 |       {/* Inner glassmorphism background */}
 51 |       <div 
 52 |         className="absolute inset-2 rounded-full backdrop-blur-sm bg-white/10 border border-white/20 shadow-xl group-hover:shadow-2xl transition-all duration-500"
 53 |         style={{
 54 |           background: 'linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%)'
 55 |         }}
 56 |       />
 57 |       
 58 |       <svg 
 59 |         className="progress-ring transform -rotate-90 relative z-10 group-hover:scale-105 transition-transform duration-500" 
 60 |         width={size} 
 61 |         height={size}
 62 |         data-testid="progress-ring"
 63 |       >
 64 |         {/* Background circle with glassmorphism */}
 65 |         <circle
 66 |           cx={size / 2}
 67 |           cy={size / 2}
 68 |           r={radius}
 69 |           stroke={backgroundColor}
 70 |           strokeWidth={strokeWidth}
 71 |           fill="none"
 72 |           className="opacity-30"
 73 |         />
 74 |         
 75 |         {/* Progress circle with gradient and glow */}
 76 |         <defs>
 77 |           <linearGradient id={`gradient-${percentage}`} x1="0%" y1="0%" x2="100%" y2="100%">
 78 |             <stop offset="0%" stopColor={progressColor} stopOpacity="1" />
 79 |             <stop offset="50%" stopColor={color} stopOpacity="0.8" />
 80 |             <stop offset="100%" stopColor={progressColor} stopOpacity="1" />
 81 |           </linearGradient>
 82 |           <filter id={`glow-${percentage}`}>
 83 |             <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
 84 |             <feMerge> 
 85 |               <feMergeNode in="coloredBlur"/>
 86 |               <feMergeNode in="SourceGraphic"/> 
 87 |             </feMerge>
 88 |           </filter>
 89 |         </defs>
 90 |         
 91 |         <circle
 92 |           cx={size / 2}
 93 |           cy={size / 2}
 94 |           r={radius}
 95 |           stroke={`url(#gradient-${percentage})`}
 96 |           strokeWidth={strokeWidth}
 97 |           fill="none"
 98 |           strokeDasharray={circumference}
 99 |           strokeDashoffset={strokeDashoffset}
100 |           strokeLinecap="round"
101 |           className="transition-all duration-1000 ease-out"
102 |           filter={showGlow ? `url(#glow-${percentage})` : undefined}
103 |           style={{
104 |             strokeDasharray: circumference,
105 |             strokeDashoffset: strokeDashoffset,
106 |             transformOrigin: 'center'
107 |           }}
108 |         />
109 |         
110 |         {/* Inner highlight circle */}
111 |         <circle
112 |           cx={size / 2}
113 |           cy={size / 2}
114 |           r={radius - strokeWidth / 2}
115 |           stroke="rgba(255,255,255,0.2)"
116 |           strokeWidth="1"
117 |           fill="none"
118 |           className="opacity-0 group-hover:opacity-100 transition-opacity duration-500"
119 |         />
120 |       </svg>
121 |       
122 |       {/* Enhanced percentage text with glassmorphism background */}
123 |       <div className="absolute inset-0 flex flex-col items-center justify-center">
124 |         <div className="text-center">
125 |           <div 
126 |             className="text-2xl md:text-3xl font-bold mb-1 bg-gradient-to-br from-gray-900 to-gray-600 bg-clip-text text-transparent group-hover:from-gray-800 group-hover:to-gray-500 transition-all duration-500" 
127 |             data-testid="progress-percentage"
128 |             style={{
129 |               textShadow: '0 2px 4px rgba(0,0,0,0.1)'
130 |             }}
131 |           >
132 |             {Math.round(percentage)}%
133 |           </div>
134 |           {label && (
135 |             <div className="text-xs font-medium text-gray-600 group-hover:text-gray-500 transition-colors duration-300">
136 |               {label}
137 |             </div>
138 |           )}
139 |         </div>
140 |       </div>
141 |       
142 |       {/* Floating particles effect */}
143 |       {showGlow && (
144 |         <div className="absolute inset-0 pointer-events-none">
145 |           <div 
146 |             className="absolute w-1 h-1 bg-white rounded-full opacity-60 animate-ping"
147 |             style={{
148 |               top: '20%',
149 |               left: '70%',
150 |               animationDuration: '2s',
151 |               animationDelay: '0s'
152 |             }}
153 |           />
154 |           <div 
155 |             className="absolute w-1 h-1 bg-white rounded-full opacity-40 animate-ping"
156 |             style={{
157 |               top: '60%',
158 |               left: '25%',
159 |               animationDuration: '3s',
160 |               animationDelay: '1s'
161 |             }}
162 |           />
163 |           <div 
164 |             className="absolute w-1 h-1 bg-white rounded-full opacity-50 animate-ping"
165 |             style={{
166 |               top: '80%',
167 |               left: '60%',
168 |               animationDuration: '2.5s',
169 |               animationDelay: '0.5s'
170 |             }}
171 |           />
172 |         </div>
173 |       )}
174 |     </div>
175 |   );
176 | }
177 | 


--------------------------------------------------------------------------------
/client/src/components/tour/TourButton.tsx:
--------------------------------------------------------------------------------
 1 | import { HelpCircle } from 'lucide-react';
 2 | import { Button } from '@/components/ui/button';
 3 | import { useTour } from '@/hooks/useTour';
 4 | import { mainTourSteps } from './tourSteps';
 5 | 
 6 | export function TourButton() {
 7 |   const { startTour, state } = useTour();
 8 | 
 9 |   const handleStartTour = () => {
10 |     startTour('main-platform-tour', mainTourSteps);
11 |   };
12 | 
13 |   return (
14 |     <Button
15 |       variant="outline"
16 |       size="sm"
17 |       onClick={handleStartTour}
18 |       disabled={state.isActive}
19 |       className="flex items-center gap-2 text-gray-600 hover:text-gray-800 border-gray-300 hover:border-gray-400"
20 |       data-testid="start-tour-button"
21 |     >
22 |       <HelpCircle className="h-4 w-4" />
23 |       Take Tour
24 |     </Button>
25 |   );
26 | }


--------------------------------------------------------------------------------
/client/src/components/tour/TourGuide.tsx:
--------------------------------------------------------------------------------
 1 | import { useTour } from '@/hooks/useTour';
 2 | import { TourStep } from './TourStep';
 3 | import { memo } from 'react';
 4 | 
 5 | function TourGuideComponent() {
 6 |   const { state, getCurrentStep } = useTour();
 7 |   
 8 |   if (!state.isActive) {
 9 |     return null;
10 |   }
11 | 
12 |   const currentStep = getCurrentStep();
13 |   if (!currentStep) {
14 |     return null;
15 |   }
16 | 
17 |   return (
18 |     <TourStep
19 |       target={currentStep.target}
20 |       title={currentStep.title}
21 |       content={currentStep.content}
22 |       placement={currentStep.placement}
23 |       showSkip={currentStep.showSkip}
24 |       offset={currentStep.offset}
25 |       navigateTo={currentStep.navigateTo}
26 |       fallbackTarget={currentStep.fallbackTarget}
27 |       onBeforeStep={currentStep.onBeforeStep}
28 |       onAfterStep={currentStep.onAfterStep}
29 |     />
30 |   );
31 | }
32 | 
33 | // Memoize the component to prevent unnecessary re-renders
34 | export const TourGuide = memo(TourGuideComponent);


--------------------------------------------------------------------------------
/client/src/components/tour/TourInitializer.tsx:
--------------------------------------------------------------------------------
 1 | 
 2 | import { useEffect } from 'react';
 3 | import { useLocation } from 'wouter';
 4 | import { useTour } from '@/hooks/useTour';
 5 | import { mainTourSteps } from './tourSteps';
 6 | import { useAuth } from '@/hooks/useAuth';
 7 | 
 8 | export function TourInitializer() {
 9 |   const [location] = useLocation();
10 |   const { state, startTour, isTourCompleted } = useTour();
11 |   const { user } = useAuth();
12 | 
13 |   useEffect(() => {
14 |     // Only run for authenticated users on dashboard
15 |     if (!user || location !== '/dashboard') return;
16 |     
17 |     // Don't start if tour is already active or user has disabled tutorials
18 |     if (state.isActive || state.userPreferences.skipTutorials) return;
19 |     
20 |     // Don't start if user has already seen the welcome tour or completed the main tour
21 |     if (state.userPreferences.hasSeenWelcome || isTourCompleted('main-platform-tour')) return;
22 | 
23 |     // Don't start if autoStart is disabled
24 |     if (!state.userPreferences.autoStart) return;
25 | 
26 |     console.log('🎯 Tour initializer conditions met, starting tour in 2 seconds');
27 |     
28 |     // Start tour automatically for new users after a short delay to ensure page is loaded
29 |     const timer = setTimeout(() => {
30 |       // Double-check conditions before starting (state might have changed)
31 |       if (
32 |         state.userPreferences.autoStart && 
33 |         !state.userPreferences.hasSeenWelcome && 
34 |         !state.isActive &&
35 |         !isTourCompleted('main-platform-tour')
36 |       ) {
37 |         console.log('🎯 Starting automatic tour for new user');
38 |         startTour('main-platform-tour', mainTourSteps);
39 |       } else {
40 |         console.log('🎯 Tour start conditions no longer met, skipping');
41 |       }
42 |     }, 2000); // 2 second delay to ensure page elements are rendered
43 | 
44 |     return () => clearTimeout(timer);
45 |   }, [user, location, state.isActive, state.userPreferences.autoStart, state.userPreferences.hasSeenWelcome, state.userPreferences.skipTutorials, startTour, isTourCompleted]);
46 | 
47 |   // This component doesn't render anything
48 |   return null;
49 | }
50 | 


--------------------------------------------------------------------------------
/client/src/components/ui/accordion.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import * as AccordionPrimitive from "@radix-ui/react-accordion"
 3 | import { ChevronDown } from "lucide-react"
 4 | 
 5 | import { cn } from "@/lib/utils"
 6 | 
 7 | const Accordion = AccordionPrimitive.Root
 8 | 
 9 | const AccordionItem = React.forwardRef<
10 |   React.ElementRef<typeof AccordionPrimitive.Item>,
11 |   React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
12 | >(({ className, ...props }, ref) => (
13 |   <AccordionPrimitive.Item
14 |     ref={ref}
15 |     className={cn("border-b", className)}
16 |     {...props}
17 |   />
18 | ))
19 | AccordionItem.displayName = "AccordionItem"
20 | 
21 | const AccordionTrigger = React.forwardRef<
22 |   React.ElementRef<typeof AccordionPrimitive.Trigger>,
23 |   React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
24 | >(({ className, children, ...props }, ref) => (
25 |   <AccordionPrimitive.Header className="flex">
26 |     <AccordionPrimitive.Trigger
27 |       ref={ref}
28 |       className={cn(
29 |         "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
30 |         className
31 |       )}
32 |       {...props}
33 |     >
34 |       {children}
35 |       <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
36 |     </AccordionPrimitive.Trigger>
37 |   </AccordionPrimitive.Header>
38 | ))
39 | AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName
40 | 
41 | const AccordionContent = React.forwardRef<
42 |   React.ElementRef<typeof AccordionPrimitive.Content>,
43 |   React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
44 | >(({ className, children, ...props }, ref) => (
45 |   <AccordionPrimitive.Content
46 |     ref={ref}
47 |     className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
48 |     {...props}
49 |   >
50 |     <div className={cn("pb-4 pt-0", className)}>{children}</div>
51 |   </AccordionPrimitive.Content>
52 | ))
53 | 
54 | AccordionContent.displayName = AccordionPrimitive.Content.displayName
55 | 
56 | export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
57 | 


--------------------------------------------------------------------------------
/client/src/components/ui/alert-dialog.tsx:
--------------------------------------------------------------------------------
  1 | import * as React from "react"
  2 | import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
  3 | 
  4 | import { cn } from "@/lib/utils"
  5 | import { buttonVariants } from "@/components/ui/button"
  6 | 
  7 | const AlertDialog = AlertDialogPrimitive.Root
  8 | 
  9 | const AlertDialogTrigger = AlertDialogPrimitive.Trigger
 10 | 
 11 | const AlertDialogPortal = AlertDialogPrimitive.Portal
 12 | 
 13 | const AlertDialogOverlay = React.forwardRef<
 14 |   React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
 15 |   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
 16 | >(({ className, ...props }, ref) => (
 17 |   <AlertDialogPrimitive.Overlay
 18 |     className={cn(
 19 |       "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
 20 |       // Allow override of z-index when needed (e.g., in tour context)
 21 |       className
 22 |     )}
 23 |     {...props}
 24 |     ref={ref}
 25 |   />
 26 | ))
 27 | AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName
 28 | 
 29 | const AlertDialogContent = React.forwardRef<
 30 |   React.ElementRef<typeof AlertDialogPrimitive.Content>,
 31 |   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
 32 | >(({ className, ...props }, ref) => (
 33 |   <AlertDialogPortal>
 34 |     <AlertDialogOverlay />
 35 |     <AlertDialogPrimitive.Content
 36 |       ref={ref}
 37 |       className={cn(
 38 |         "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
 39 |         className
 40 |       )}
 41 |       {...props}
 42 |     />
 43 |   </AlertDialogPortal>
 44 | ))
 45 | AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName
 46 | 
 47 | const AlertDialogHeader = ({
 48 |   className,
 49 |   ...props
 50 | }: React.HTMLAttributes<HTMLDivElement>) => (
 51 |   <div
 52 |     className={cn(
 53 |       "flex flex-col space-y-2 text-center sm:text-left",
 54 |       className
 55 |     )}
 56 |     {...props}
 57 |   />
 58 | )
 59 | AlertDialogHeader.displayName = "AlertDialogHeader"
 60 | 
 61 | const AlertDialogFooter = ({
 62 |   className,
 63 |   ...props
 64 | }: React.HTMLAttributes<HTMLDivElement>) => (
 65 |   <div
 66 |     className={cn(
 67 |       "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
 68 |       className
 69 |     )}
 70 |     {...props}
 71 |   />
 72 | )
 73 | AlertDialogFooter.displayName = "AlertDialogFooter"
 74 | 
 75 | const AlertDialogTitle = React.forwardRef<
 76 |   React.ElementRef<typeof AlertDialogPrimitive.Title>,
 77 |   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
 78 | >(({ className, ...props }, ref) => (
 79 |   <AlertDialogPrimitive.Title
 80 |     ref={ref}
 81 |     className={cn("text-lg font-semibold", className)}
 82 |     {...props}
 83 |   />
 84 | ))
 85 | AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName
 86 | 
 87 | const AlertDialogDescription = React.forwardRef<
 88 |   React.ElementRef<typeof AlertDialogPrimitive.Description>,
 89 |   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
 90 | >(({ className, ...props }, ref) => (
 91 |   <AlertDialogPrimitive.Description
 92 |     ref={ref}
 93 |     className={cn("text-sm text-muted-foreground", className)}
 94 |     {...props}
 95 |   />
 96 | ))
 97 | AlertDialogDescription.displayName =
 98 |   AlertDialogPrimitive.Description.displayName
 99 | 
100 | const AlertDialogAction = React.forwardRef<
101 |   React.ElementRef<typeof AlertDialogPrimitive.Action>,
102 |   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
103 | >(({ className, ...props }, ref) => (
104 |   <AlertDialogPrimitive.Action
105 |     ref={ref}
106 |     className={cn(buttonVariants(), className)}
107 |     {...props}
108 |   />
109 | ))
110 | AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName
111 | 
112 | const AlertDialogCancel = React.forwardRef<
113 |   React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
114 |   React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
115 | >(({ className, ...props }, ref) => (
116 |   <AlertDialogPrimitive.Cancel
117 |     ref={ref}
118 |     className={cn(
119 |       buttonVariants({ variant: "outline" }),
120 |       "mt-2 sm:mt-0",
121 |       className
122 |     )}
123 |     {...props}
124 |   />
125 | ))
126 | AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName
127 | 
128 | export {
129 |   AlertDialog,
130 |   AlertDialogPortal,
131 |   AlertDialogOverlay,
132 |   AlertDialogTrigger,
133 |   AlertDialogContent,
134 |   AlertDialogHeader,
135 |   AlertDialogFooter,
136 |   AlertDialogTitle,
137 |   AlertDialogDescription,
138 |   AlertDialogAction,
139 |   AlertDialogCancel,
140 | }
141 | 


--------------------------------------------------------------------------------
/client/src/components/ui/alert.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import { cva, type VariantProps } from "class-variance-authority"
 3 | 
 4 | import { cn } from "@/lib/utils"
 5 | 
 6 | const alertVariants = cva(
 7 |   "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
 8 |   {
 9 |     variants: {
10 |       variant: {
11 |         default: "bg-background text-foreground",
12 |         destructive:
13 |           "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
14 |       },
15 |     },
16 |     defaultVariants: {
17 |       variant: "default",
18 |     },
19 |   }
20 | )
21 | 
22 | const Alert = React.forwardRef<
23 |   HTMLDivElement,
24 |   React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
25 | >(({ className, variant, ...props }, ref) => (
26 |   <div
27 |     ref={ref}
28 |     role="alert"
29 |     className={cn(alertVariants({ variant }), className)}
30 |     {...props}
31 |   />
32 | ))
33 | Alert.displayName = "Alert"
34 | 
35 | const AlertTitle = React.forwardRef<
36 |   HTMLParagraphElement,
37 |   React.HTMLAttributes<HTMLHeadingElement>
38 | >(({ className, ...props }, ref) => (
39 |   <h5
40 |     ref={ref}
41 |     className={cn("mb-1 font-medium leading-none tracking-tight", className)}
42 |     {...props}
43 |   />
44 | ))
45 | AlertTitle.displayName = "AlertTitle"
46 | 
47 | const AlertDescription = React.forwardRef<
48 |   HTMLParagraphElement,
49 |   React.HTMLAttributes<HTMLParagraphElement>
50 | >(({ className, ...props }, ref) => (
51 |   <div
52 |     ref={ref}
53 |     className={cn("text-sm [&_p]:leading-relaxed", className)}
54 |     {...props}
55 |   />
56 | ))
57 | AlertDescription.displayName = "AlertDescription"
58 | 
59 | export { Alert, AlertTitle, AlertDescription }
60 | 


--------------------------------------------------------------------------------
/client/src/components/ui/aspect-ratio.tsx:
--------------------------------------------------------------------------------
1 | import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"
2 | 
3 | const AspectRatio = AspectRatioPrimitive.Root
4 | 
5 | export { AspectRatio }
6 | 


--------------------------------------------------------------------------------
/client/src/components/ui/avatar.tsx:
--------------------------------------------------------------------------------
 1 | "use client"
 2 | 
 3 | import * as React from "react"
 4 | import * as AvatarPrimitive from "@radix-ui/react-avatar"
 5 | 
 6 | import { cn } from "@/lib/utils"
 7 | 
 8 | const Avatar = React.forwardRef<
 9 |   React.ElementRef<typeof AvatarPrimitive.Root>,
10 |   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
11 | >(({ className, ...props }, ref) => (
12 |   <AvatarPrimitive.Root
13 |     ref={ref}
14 |     className={cn(
15 |       "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
16 |       className
17 |     )}
18 |     {...props}
19 |   />
20 | ))
21 | Avatar.displayName = AvatarPrimitive.Root.displayName
22 | 
23 | const AvatarImage = React.forwardRef<
24 |   React.ElementRef<typeof AvatarPrimitive.Image>,
25 |   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
26 | >(({ className, ...props }, ref) => (
27 |   <AvatarPrimitive.Image
28 |     ref={ref}
29 |     className={cn("aspect-square h-full w-full", className)}
30 |     {...props}
31 |   />
32 | ))
33 | AvatarImage.displayName = AvatarPrimitive.Image.displayName
34 | 
35 | const AvatarFallback = React.forwardRef<
36 |   React.ElementRef<typeof AvatarPrimitive.Fallback>,
37 |   React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
38 | >(({ className, ...props }, ref) => (
39 |   <AvatarPrimitive.Fallback
40 |     ref={ref}
41 |     className={cn(
42 |       "flex h-full w-full items-center justify-center rounded-full bg-muted",
43 |       className
44 |     )}
45 |     {...props}
46 |   />
47 | ))
48 | AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName
49 | 
50 | export { Avatar, AvatarImage, AvatarFallback }
51 | 


--------------------------------------------------------------------------------
/client/src/components/ui/badge.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import { cva, type VariantProps } from "class-variance-authority"
 3 | 
 4 | import { cn } from "@/lib/utils"
 5 | 
 6 | const badgeVariants = cva(
 7 |   "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
 8 |   {
 9 |     variants: {
10 |       variant: {
11 |         default:
12 |           "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
13 |         secondary:
14 |           "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
15 |         destructive:
16 |           "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
17 |         outline: "text-foreground",
18 |       },
19 |     },
20 |     defaultVariants: {
21 |       variant: "default",
22 |     },
23 |   }
24 | )
25 | 
26 | export interface BadgeProps
27 |   extends React.HTMLAttributes<HTMLDivElement>,
28 |     VariantProps<typeof badgeVariants> {}
29 | 
30 | function Badge({ className, variant, ...props }: BadgeProps) {
31 |   return (
32 |     <div className={cn(badgeVariants({ variant }), className)} {...props} />
33 |   )
34 | }
35 | 
36 | export { Badge, badgeVariants }
37 | 


--------------------------------------------------------------------------------
/client/src/components/ui/breadcrumb.tsx:
--------------------------------------------------------------------------------
  1 | import * as React from "react"
  2 | import { Slot } from "@radix-ui/react-slot"
  3 | import { ChevronRight, MoreHorizontal } from "lucide-react"
  4 | 
  5 | import { cn } from "@/lib/utils"
  6 | 
  7 | const Breadcrumb = React.forwardRef<
  8 |   HTMLElement,
  9 |   React.ComponentPropsWithoutRef<"nav"> & {
 10 |     separator?: React.ReactNode
 11 |   }
 12 | >(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
 13 | Breadcrumb.displayName = "Breadcrumb"
 14 | 
 15 | const BreadcrumbList = React.forwardRef<
 16 |   HTMLOListElement,
 17 |   React.ComponentPropsWithoutRef<"ol">
 18 | >(({ className, ...props }, ref) => (
 19 |   <ol
 20 |     ref={ref}
 21 |     className={cn(
 22 |       "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
 23 |       className
 24 |     )}
 25 |     {...props}
 26 |   />
 27 | ))
 28 | BreadcrumbList.displayName = "BreadcrumbList"
 29 | 
 30 | const BreadcrumbItem = React.forwardRef<
 31 |   HTMLLIElement,
 32 |   React.ComponentPropsWithoutRef<"li">
 33 | >(({ className, ...props }, ref) => (
 34 |   <li
 35 |     ref={ref}
 36 |     className={cn("inline-flex items-center gap-1.5", className)}
 37 |     {...props}
 38 |   />
 39 | ))
 40 | BreadcrumbItem.displayName = "BreadcrumbItem"
 41 | 
 42 | const BreadcrumbLink = React.forwardRef<
 43 |   HTMLAnchorElement,
 44 |   React.ComponentPropsWithoutRef<"a"> & {
 45 |     asChild?: boolean
 46 |   }
 47 | >(({ asChild, className, ...props }, ref) => {
 48 |   const Comp = asChild ? Slot : "a"
 49 | 
 50 |   return (
 51 |     <Comp
 52 |       ref={ref}
 53 |       className={cn("transition-colors hover:text-foreground", className)}
 54 |       {...props}
 55 |     />
 56 |   )
 57 | })
 58 | BreadcrumbLink.displayName = "BreadcrumbLink"
 59 | 
 60 | const BreadcrumbPage = React.forwardRef<
 61 |   HTMLSpanElement,
 62 |   React.ComponentPropsWithoutRef<"span">
 63 | >(({ className, ...props }, ref) => (
 64 |   <span
 65 |     ref={ref}
 66 |     role="link"
 67 |     aria-disabled="true"
 68 |     aria-current="page"
 69 |     className={cn("font-normal text-foreground", className)}
 70 |     {...props}
 71 |   />
 72 | ))
 73 | BreadcrumbPage.displayName = "BreadcrumbPage"
 74 | 
 75 | const BreadcrumbSeparator = ({
 76 |   children,
 77 |   className,
 78 |   ...props
 79 | }: React.ComponentProps<"li">) => (
 80 |   <li
 81 |     role="presentation"
 82 |     aria-hidden="true"
 83 |     className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
 84 |     {...props}
 85 |   >
 86 |     {children ?? <ChevronRight />}
 87 |   </li>
 88 | )
 89 | BreadcrumbSeparator.displayName = "BreadcrumbSeparator"
 90 | 
 91 | const BreadcrumbEllipsis = ({
 92 |   className,
 93 |   ...props
 94 | }: React.ComponentProps<"span">) => (
 95 |   <span
 96 |     role="presentation"
 97 |     aria-hidden="true"
 98 |     className={cn("flex h-9 w-9 items-center justify-center", className)}
 99 |     {...props}
100 |   >
101 |     <MoreHorizontal className="h-4 w-4" />
102 |     <span className="sr-only">More</span>
103 |   </span>
104 | )
105 | BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"
106 | 
107 | export {
108 |   Breadcrumb,
109 |   BreadcrumbList,
110 |   BreadcrumbItem,
111 |   BreadcrumbLink,
112 |   BreadcrumbPage,
113 |   BreadcrumbSeparator,
114 |   BreadcrumbEllipsis,
115 | }
116 | 


--------------------------------------------------------------------------------
/client/src/components/ui/button.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import { Slot } from "@radix-ui/react-slot"
 3 | import { cva, type VariantProps } from "class-variance-authority"
 4 | 
 5 | import { cn } from "@/lib/utils"
 6 | 
 7 | const buttonVariants = cva(
 8 |   "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
 9 |   {
10 |     variants: {
11 |       variant: {
12 |         default: "bg-primary text-primary-foreground hover:bg-primary/90",
13 |         destructive:
14 |           "bg-destructive text-destructive-foreground hover:bg-destructive/90",
15 |         outline:
16 |           "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
17 |         secondary:
18 |           "bg-secondary text-secondary-foreground hover:bg-secondary/80",
19 |         ghost: "hover:bg-accent hover:text-accent-foreground",
20 |         link: "text-primary underline-offset-4 hover:underline",
21 |       },
22 |       size: {
23 |         default: "h-10 px-4 py-2",
24 |         sm: "h-9 rounded-md px-3",
25 |         lg: "h-11 rounded-md px-8",
26 |         icon: "h-10 w-10",
27 |       },
28 |     },
29 |     defaultVariants: {
30 |       variant: "default",
31 |       size: "default",
32 |     },
33 |   }
34 | )
35 | 
36 | export interface ButtonProps
37 |   extends React.ButtonHTMLAttributes<HTMLButtonElement>,
38 |     VariantProps<typeof buttonVariants> {
39 |   asChild?: boolean
40 | }
41 | 
42 | const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
43 |   ({ className, variant, size, asChild = false, ...props }, ref) => {
44 |     const Comp = asChild ? Slot : "button"
45 |     return (
46 |       <Comp
47 |         className={cn(buttonVariants({ variant, size, className }))}
48 |         ref={ref}
49 |         {...props}
50 |       />
51 |     )
52 |   }
53 | )
54 | Button.displayName = "Button"
55 | 
56 | export { Button, buttonVariants }
57 | 


--------------------------------------------------------------------------------
/client/src/components/ui/calendar.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import { ChevronLeft, ChevronRight } from "lucide-react"
 3 | import { DayPicker } from "react-day-picker"
 4 | 
 5 | import { cn } from "@/lib/utils"
 6 | import { buttonVariants } from "@/components/ui/button"
 7 | 
 8 | export type CalendarProps = React.ComponentProps<typeof DayPicker>
 9 | 
10 | function Calendar({
11 |   className,
12 |   classNames,
13 |   showOutsideDays = true,
14 |   ...props
15 | }: CalendarProps) {
16 |   return (
17 |     <DayPicker
18 |       showOutsideDays={showOutsideDays}
19 |       className={cn("p-3", className)}
20 |       classNames={{
21 |         months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
22 |         month: "space-y-4",
23 |         caption: "flex justify-center pt-1 relative items-center",
24 |         caption_label: "text-sm font-medium",
25 |         nav: "space-x-1 flex items-center",
26 |         nav_button: cn(
27 |           buttonVariants({ variant: "outline" }),
28 |           "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
29 |         ),
30 |         nav_button_previous: "absolute left-1",
31 |         nav_button_next: "absolute right-1",
32 |         table: "w-full border-collapse space-y-1",
33 |         head_row: "flex",
34 |         head_cell:
35 |           "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
36 |         row: "flex w-full mt-2",
37 |         cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
38 |         day: cn(
39 |           buttonVariants({ variant: "ghost" }),
40 |           "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
41 |         ),
42 |         day_range_end: "day-range-end",
43 |         day_selected:
44 |           "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
45 |         day_today: "bg-accent text-accent-foreground",
46 |         day_outside:
47 |           "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
48 |         day_disabled: "text-muted-foreground opacity-50",
49 |         day_range_middle:
50 |           "aria-selected:bg-accent aria-selected:text-accent-foreground",
51 |         day_hidden: "invisible",
52 |         ...classNames,
53 |       }}
54 |       components={{
55 |         IconLeft: ({ className, ...props }) => (
56 |           <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
57 |         ),
58 |         IconRight: ({ className, ...props }) => (
59 |           <ChevronRight className={cn("h-4 w-4", className)} {...props} />
60 |         ),
61 |       }}
62 |       {...props}
63 |     />
64 |   )
65 | }
66 | Calendar.displayName = "Calendar"
67 | 
68 | export { Calendar }
69 | 


--------------------------------------------------------------------------------
/client/src/components/ui/card.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | 
 3 | import { cn } from "@/lib/utils"
 4 | 
 5 | const Card = React.forwardRef<
 6 |   HTMLDivElement,
 7 |   React.HTMLAttributes<HTMLDivElement>
 8 | >(({ className, ...props }, ref) => (
 9 |   <div
10 |     ref={ref}
11 |     className={cn(
12 |       "rounded-lg border bg-card text-card-foreground shadow-sm",
13 |       className
14 |     )}
15 |     {...props}
16 |   />
17 | ))
18 | Card.displayName = "Card"
19 | 
20 | const CardHeader = React.forwardRef<
21 |   HTMLDivElement,
22 |   React.HTMLAttributes<HTMLDivElement>
23 | >(({ className, ...props }, ref) => (
24 |   <div
25 |     ref={ref}
26 |     className={cn("flex flex-col space-y-1.5 p-6", className)}
27 |     {...props}
28 |   />
29 | ))
30 | CardHeader.displayName = "CardHeader"
31 | 
32 | const CardTitle = React.forwardRef<
33 |   HTMLDivElement,
34 |   React.HTMLAttributes<HTMLDivElement>
35 | >(({ className, ...props }, ref) => (
36 |   <div
37 |     ref={ref}
38 |     className={cn(
39 |       "text-2xl font-semibold leading-none tracking-tight",
40 |       className
41 |     )}
42 |     {...props}
43 |   />
44 | ))
45 | CardTitle.displayName = "CardTitle"
46 | 
47 | const CardDescription = React.forwardRef<
48 |   HTMLDivElement,
49 |   React.HTMLAttributes<HTMLDivElement>
50 | >(({ className, ...props }, ref) => (
51 |   <div
52 |     ref={ref}
53 |     className={cn("text-sm text-muted-foreground", className)}
54 |     {...props}
55 |   />
56 | ))
57 | CardDescription.displayName = "CardDescription"
58 | 
59 | const CardContent = React.forwardRef<
60 |   HTMLDivElement,
61 |   React.HTMLAttributes<HTMLDivElement>
62 | >(({ className, ...props }, ref) => (
63 |   <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
64 | ))
65 | CardContent.displayName = "CardContent"
66 | 
67 | const CardFooter = React.forwardRef<
68 |   HTMLDivElement,
69 |   React.HTMLAttributes<HTMLDivElement>
70 | >(({ className, ...props }, ref) => (
71 |   <div
72 |     ref={ref}
73 |     className={cn("flex items-center p-6 pt-0", className)}
74 |     {...props}
75 |   />
76 | ))
77 | CardFooter.displayName = "CardFooter"
78 | 
79 | export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
80 | 


--------------------------------------------------------------------------------
/client/src/components/ui/checkbox.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
 3 | import { Check } from "lucide-react"
 4 | 
 5 | import { cn } from "@/lib/utils"
 6 | 
 7 | const Checkbox = React.forwardRef<
 8 |   React.ElementRef<typeof CheckboxPrimitive.Root>,
 9 |   React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
10 | >(({ className, ...props }, ref) => (
11 |   <CheckboxPrimitive.Root
12 |     ref={ref}
13 |     className={cn(
14 |       "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
15 |       className
16 |     )}
17 |     {...props}
18 |   >
19 |     <CheckboxPrimitive.Indicator
20 |       className={cn("flex items-center justify-center text-current")}
21 |     >
22 |       <Check className="h-4 w-4" />
23 |     </CheckboxPrimitive.Indicator>
24 |   </CheckboxPrimitive.Root>
25 | ))
26 | Checkbox.displayName = CheckboxPrimitive.Root.displayName
27 | 
28 | export { Checkbox }
29 | 


--------------------------------------------------------------------------------
/client/src/components/ui/collapsible.tsx:
--------------------------------------------------------------------------------
 1 | "use client"
 2 | 
 3 | import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"
 4 | 
 5 | const Collapsible = CollapsiblePrimitive.Root
 6 | 
 7 | const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger
 8 | 
 9 | const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent
10 | 
11 | export { Collapsible, CollapsibleTrigger, CollapsibleContent }
12 | 


--------------------------------------------------------------------------------
/client/src/components/ui/command.tsx:
--------------------------------------------------------------------------------
  1 | import * as React from "react"
  2 | import { type DialogProps } from "@radix-ui/react-dialog"
  3 | import { Command as CommandPrimitive } from "cmdk"
  4 | import { Search } from "lucide-react"
  5 | 
  6 | import { cn } from "@/lib/utils"
  7 | import { Dialog, DialogContent } from "@/components/ui/dialog"
  8 | 
  9 | const Command = React.forwardRef<
 10 |   React.ElementRef<typeof CommandPrimitive>,
 11 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive>
 12 | >(({ className, ...props }, ref) => (
 13 |   <CommandPrimitive
 14 |     ref={ref}
 15 |     className={cn(
 16 |       "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
 17 |       className
 18 |     )}
 19 |     {...props}
 20 |   />
 21 | ))
 22 | Command.displayName = CommandPrimitive.displayName
 23 | 
 24 | const CommandDialog = ({ children, ...props }: DialogProps) => {
 25 |   return (
 26 |     <Dialog {...props}>
 27 |       <DialogContent className="overflow-hidden p-0 shadow-lg">
 28 |         <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
 29 |           {children}
 30 |         </Command>
 31 |       </DialogContent>
 32 |     </Dialog>
 33 |   )
 34 | }
 35 | 
 36 | const CommandInput = React.forwardRef<
 37 |   React.ElementRef<typeof CommandPrimitive.Input>,
 38 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
 39 | >(({ className, ...props }, ref) => (
 40 |   <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
 41 |     <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
 42 |     <CommandPrimitive.Input
 43 |       ref={ref}
 44 |       className={cn(
 45 |         "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
 46 |         className
 47 |       )}
 48 |       {...props}
 49 |     />
 50 |   </div>
 51 | ))
 52 | 
 53 | CommandInput.displayName = CommandPrimitive.Input.displayName
 54 | 
 55 | const CommandList = React.forwardRef<
 56 |   React.ElementRef<typeof CommandPrimitive.List>,
 57 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
 58 | >(({ className, ...props }, ref) => (
 59 |   <CommandPrimitive.List
 60 |     ref={ref}
 61 |     className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
 62 |     {...props}
 63 |   />
 64 | ))
 65 | 
 66 | CommandList.displayName = CommandPrimitive.List.displayName
 67 | 
 68 | const CommandEmpty = React.forwardRef<
 69 |   React.ElementRef<typeof CommandPrimitive.Empty>,
 70 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
 71 | >((props, ref) => (
 72 |   <CommandPrimitive.Empty
 73 |     ref={ref}
 74 |     className="py-6 text-center text-sm"
 75 |     {...props}
 76 |   />
 77 | ))
 78 | 
 79 | CommandEmpty.displayName = CommandPrimitive.Empty.displayName
 80 | 
 81 | const CommandGroup = React.forwardRef<
 82 |   React.ElementRef<typeof CommandPrimitive.Group>,
 83 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
 84 | >(({ className, ...props }, ref) => (
 85 |   <CommandPrimitive.Group
 86 |     ref={ref}
 87 |     className={cn(
 88 |       "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
 89 |       className
 90 |     )}
 91 |     {...props}
 92 |   />
 93 | ))
 94 | 
 95 | CommandGroup.displayName = CommandPrimitive.Group.displayName
 96 | 
 97 | const CommandSeparator = React.forwardRef<
 98 |   React.ElementRef<typeof CommandPrimitive.Separator>,
 99 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
100 | >(({ className, ...props }, ref) => (
101 |   <CommandPrimitive.Separator
102 |     ref={ref}
103 |     className={cn("-mx-1 h-px bg-border", className)}
104 |     {...props}
105 |   />
106 | ))
107 | CommandSeparator.displayName = CommandPrimitive.Separator.displayName
108 | 
109 | const CommandItem = React.forwardRef<
110 |   React.ElementRef<typeof CommandPrimitive.Item>,
111 |   React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
112 | >(({ className, ...props }, ref) => (
113 |   <CommandPrimitive.Item
114 |     ref={ref}
115 |     className={cn(
116 |       "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
117 |       className
118 |     )}
119 |     {...props}
120 |   />
121 | ))
122 | 
123 | CommandItem.displayName = CommandPrimitive.Item.displayName
124 | 
125 | const CommandShortcut = ({
126 |   className,
127 |   ...props
128 | }: React.HTMLAttributes<HTMLSpanElement>) => {
129 |   return (
130 |     <span
131 |       className={cn(
132 |         "ml-auto text-xs tracking-widest text-muted-foreground",
133 |         className
134 |       )}
135 |       {...props}
136 |     />
137 |   )
138 | }
139 | CommandShortcut.displayName = "CommandShortcut"
140 | 
141 | export {
142 |   Command,
143 |   CommandDialog,
144 |   CommandInput,
145 |   CommandList,
146 |   CommandEmpty,
147 |   CommandGroup,
148 |   CommandItem,
149 |   CommandShortcut,
150 |   CommandSeparator,
151 | }
152 | 


--------------------------------------------------------------------------------
/client/src/components/ui/dialog.tsx:
--------------------------------------------------------------------------------
  1 | "use client"
  2 | 
  3 | import * as React from "react"
  4 | import * as DialogPrimitive from "@radix-ui/react-dialog"
  5 | import { X } from "lucide-react"
  6 | 
  7 | import { cn } from "@/lib/utils"
  8 | 
  9 | const Dialog = DialogPrimitive.Root
 10 | 
 11 | const DialogTrigger = DialogPrimitive.Trigger
 12 | 
 13 | const DialogPortal = DialogPrimitive.Portal
 14 | 
 15 | const DialogClose = DialogPrimitive.Close
 16 | 
 17 | const DialogOverlay = React.forwardRef<
 18 |   React.ElementRef<typeof DialogPrimitive.Overlay>,
 19 |   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
 20 | >(({ className, ...props }, ref) => (
 21 |   <DialogPrimitive.Overlay
 22 |     ref={ref}
 23 |     className={cn(
 24 |       "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
 25 |       className
 26 |     )}
 27 |     {...props}
 28 |   />
 29 | ))
 30 | DialogOverlay.displayName = DialogPrimitive.Overlay.displayName
 31 | 
 32 | const DialogContent = React.forwardRef<
 33 |   React.ElementRef<typeof DialogPrimitive.Content>,
 34 |   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
 35 | >(({ className, children, ...props }, ref) => (
 36 |   <DialogPortal>
 37 |     <DialogOverlay />
 38 |     <DialogPrimitive.Content
 39 |       ref={ref}
 40 |       className={cn(
 41 |         "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
 42 |         className
 43 |       )}
 44 |       {...props}
 45 |     >
 46 |       {children}
 47 |       <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
 48 |         <X className="h-4 w-4" />
 49 |         <span className="sr-only">Close</span>
 50 |       </DialogPrimitive.Close>
 51 |     </DialogPrimitive.Content>
 52 |   </DialogPortal>
 53 | ))
 54 | DialogContent.displayName = DialogPrimitive.Content.displayName
 55 | 
 56 | const DialogHeader = ({
 57 |   className,
 58 |   ...props
 59 | }: React.HTMLAttributes<HTMLDivElement>) => (
 60 |   <div
 61 |     className={cn(
 62 |       "flex flex-col space-y-1.5 text-center sm:text-left",
 63 |       className
 64 |     )}
 65 |     {...props}
 66 |   />
 67 | )
 68 | DialogHeader.displayName = "DialogHeader"
 69 | 
 70 | const DialogFooter = ({
 71 |   className,
 72 |   ...props
 73 | }: React.HTMLAttributes<HTMLDivElement>) => (
 74 |   <div
 75 |     className={cn(
 76 |       "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
 77 |       className
 78 |     )}
 79 |     {...props}
 80 |   />
 81 | )
 82 | DialogFooter.displayName = "DialogFooter"
 83 | 
 84 | const DialogTitle = React.forwardRef<
 85 |   React.ElementRef<typeof DialogPrimitive.Title>,
 86 |   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
 87 | >(({ className, ...props }, ref) => (
 88 |   <DialogPrimitive.Title
 89 |     ref={ref}
 90 |     className={cn(
 91 |       "text-lg font-semibold leading-none tracking-tight",
 92 |       className
 93 |     )}
 94 |     {...props}
 95 |   />
 96 | ))
 97 | DialogTitle.displayName = DialogPrimitive.Title.displayName
 98 | 
 99 | const DialogDescription = React.forwardRef<
100 |   React.ElementRef<typeof DialogPrimitive.Description>,
101 |   React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
102 | >(({ className, ...props }, ref) => (
103 |   <DialogPrimitive.Description
104 |     ref={ref}
105 |     className={cn("text-sm text-muted-foreground", className)}
106 |     {...props}
107 |   />
108 | ))
109 | DialogDescription.displayName = DialogPrimitive.Description.displayName
110 | 
111 | export {
112 |   Dialog,
113 |   DialogPortal,
114 |   DialogOverlay,
115 |   DialogClose,
116 |   DialogTrigger,
117 |   DialogContent,
118 |   DialogHeader,
119 |   DialogFooter,
120 |   DialogTitle,
121 |   DialogDescription,
122 | }
123 | 


--------------------------------------------------------------------------------
/client/src/components/ui/drawer.tsx:
--------------------------------------------------------------------------------
  1 | "use client"
  2 | 
  3 | import * as React from "react"
  4 | import { Drawer as DrawerPrimitive } from "vaul"
  5 | 
  6 | import { cn } from "@/lib/utils"
  7 | 
  8 | const Drawer = ({
  9 |   shouldScaleBackground = true,
 10 |   ...props
 11 | }: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
 12 |   <DrawerPrimitive.Root
 13 |     shouldScaleBackground={shouldScaleBackground}
 14 |     {...props}
 15 |   />
 16 | )
 17 | Drawer.displayName = "Drawer"
 18 | 
 19 | const DrawerTrigger = DrawerPrimitive.Trigger
 20 | 
 21 | const DrawerPortal = DrawerPrimitive.Portal
 22 | 
 23 | const DrawerClose = DrawerPrimitive.Close
 24 | 
 25 | const DrawerOverlay = React.forwardRef<
 26 |   React.ElementRef<typeof DrawerPrimitive.Overlay>,
 27 |   React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
 28 | >(({ className, ...props }, ref) => (
 29 |   <DrawerPrimitive.Overlay
 30 |     ref={ref}
 31 |     className={cn("fixed inset-0 z-50 bg-black/80", className)}
 32 |     {...props}
 33 |   />
 34 | ))
 35 | DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName
 36 | 
 37 | const DrawerContent = React.forwardRef<
 38 |   React.ElementRef<typeof DrawerPrimitive.Content>,
 39 |   React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
 40 | >(({ className, children, ...props }, ref) => (
 41 |   <DrawerPortal>
 42 |     <DrawerOverlay />
 43 |     <DrawerPrimitive.Content
 44 |       ref={ref}
 45 |       className={cn(
 46 |         "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
 47 |         className
 48 |       )}
 49 |       {...props}
 50 |     >
 51 |       <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
 52 |       {children}
 53 |     </DrawerPrimitive.Content>
 54 |   </DrawerPortal>
 55 | ))
 56 | DrawerContent.displayName = "DrawerContent"
 57 | 
 58 | const DrawerHeader = ({
 59 |   className,
 60 |   ...props
 61 | }: React.HTMLAttributes<HTMLDivElement>) => (
 62 |   <div
 63 |     className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
 64 |     {...props}
 65 |   />
 66 | )
 67 | DrawerHeader.displayName = "DrawerHeader"
 68 | 
 69 | const DrawerFooter = ({
 70 |   className,
 71 |   ...props
 72 | }: React.HTMLAttributes<HTMLDivElement>) => (
 73 |   <div
 74 |     className={cn("mt-auto flex flex-col gap-2 p-4", className)}
 75 |     {...props}
 76 |   />
 77 | )
 78 | DrawerFooter.displayName = "DrawerFooter"
 79 | 
 80 | const DrawerTitle = React.forwardRef<
 81 |   React.ElementRef<typeof DrawerPrimitive.Title>,
 82 |   React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
 83 | >(({ className, ...props }, ref) => (
 84 |   <DrawerPrimitive.Title
 85 |     ref={ref}
 86 |     className={cn(
 87 |       "text-lg font-semibold leading-none tracking-tight",
 88 |       className
 89 |     )}
 90 |     {...props}
 91 |   />
 92 | ))
 93 | DrawerTitle.displayName = DrawerPrimitive.Title.displayName
 94 | 
 95 | const DrawerDescription = React.forwardRef<
 96 |   React.ElementRef<typeof DrawerPrimitive.Description>,
 97 |   React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
 98 | >(({ className, ...props }, ref) => (
 99 |   <DrawerPrimitive.Description
100 |     ref={ref}
101 |     className={cn("text-sm text-muted-foreground", className)}
102 |     {...props}
103 |   />
104 | ))
105 | DrawerDescription.displayName = DrawerPrimitive.Description.displayName
106 | 
107 | export {
108 |   Drawer,
109 |   DrawerPortal,
110 |   DrawerOverlay,
111 |   DrawerTrigger,
112 |   DrawerClose,
113 |   DrawerContent,
114 |   DrawerHeader,
115 |   DrawerFooter,
116 |   DrawerTitle,
117 |   DrawerDescription,
118 | }
119 | 


--------------------------------------------------------------------------------
/client/src/components/ui/form.tsx:
--------------------------------------------------------------------------------
  1 | "use client"
  2 | 
  3 | import * as React from "react"
  4 | import * as LabelPrimitive from "@radix-ui/react-label"
  5 | import { Slot } from "@radix-ui/react-slot"
  6 | import {
  7 |   Controller,
  8 |   FormProvider,
  9 |   useFormContext,
 10 |   type ControllerProps,
 11 |   type FieldPath,
 12 |   type FieldValues,
 13 | } from "react-hook-form"
 14 | 
 15 | import { cn } from "@/lib/utils"
 16 | import { Label } from "@/components/ui/label"
 17 | 
 18 | const Form = FormProvider
 19 | 
 20 | type FormFieldContextValue<
 21 |   TFieldValues extends FieldValues = FieldValues,
 22 |   TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
 23 | > = {
 24 |   name: TName
 25 | }
 26 | 
 27 | const FormFieldContext = React.createContext<FormFieldContextValue>(
 28 |   {} as FormFieldContextValue
 29 | )
 30 | 
 31 | const FormField = <
 32 |   TFieldValues extends FieldValues = FieldValues,
 33 |   TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
 34 | >({
 35 |   ...props
 36 | }: ControllerProps<TFieldValues, TName>) => {
 37 |   return (
 38 |     <FormFieldContext.Provider value={{ name: props.name }}>
 39 |       <Controller {...props} />
 40 |     </FormFieldContext.Provider>
 41 |   )
 42 | }
 43 | 
 44 | const useFormField = () => {
 45 |   const fieldContext = React.useContext(FormFieldContext)
 46 |   const itemContext = React.useContext(FormItemContext)
 47 |   const { getFieldState, formState } = useFormContext()
 48 | 
 49 |   const fieldState = getFieldState(fieldContext.name, formState)
 50 | 
 51 |   if (!fieldContext) {
 52 |     throw new Error("useFormField should be used within <FormField>")
 53 |   }
 54 | 
 55 |   const { id } = itemContext
 56 | 
 57 |   return {
 58 |     id,
 59 |     name: fieldContext.name,
 60 |     formItemId: `${id}-form-item`,
 61 |     formDescriptionId: `${id}-form-item-description`,
 62 |     formMessageId: `${id}-form-item-message`,
 63 |     ...fieldState,
 64 |   }
 65 | }
 66 | 
 67 | type FormItemContextValue = {
 68 |   id: string
 69 | }
 70 | 
 71 | const FormItemContext = React.createContext<FormItemContextValue>(
 72 |   {} as FormItemContextValue
 73 | )
 74 | 
 75 | const FormItem = React.forwardRef<
 76 |   HTMLDivElement,
 77 |   React.HTMLAttributes<HTMLDivElement>
 78 | >(({ className, ...props }, ref) => {
 79 |   const id = React.useId()
 80 | 
 81 |   return (
 82 |     <FormItemContext.Provider value={{ id }}>
 83 |       <div ref={ref} className={cn("space-y-2", className)} {...props} />
 84 |     </FormItemContext.Provider>
 85 |   )
 86 | })
 87 | FormItem.displayName = "FormItem"
 88 | 
 89 | const FormLabel = React.forwardRef<
 90 |   React.ElementRef<typeof LabelPrimitive.Root>,
 91 |   React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
 92 | >(({ className, ...props }, ref) => {
 93 |   const { error, formItemId } = useFormField()
 94 | 
 95 |   return (
 96 |     <Label
 97 |       ref={ref}
 98 |       className={cn(error && "text-destructive", className)}
 99 |       htmlFor={formItemId}
100 |       {...props}
101 |     />
102 |   )
103 | })
104 | FormLabel.displayName = "FormLabel"
105 | 
106 | const FormControl = React.forwardRef<
107 |   React.ElementRef<typeof Slot>,
108 |   React.ComponentPropsWithoutRef<typeof Slot>
109 | >(({ ...props }, ref) => {
110 |   const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
111 | 
112 |   return (
113 |     <Slot
114 |       ref={ref}
115 |       id={formItemId}
116 |       aria-describedby={
117 |         !error
118 |           ? `${formDescriptionId}`
119 |           : `${formDescriptionId} ${formMessageId}`
120 |       }
121 |       aria-invalid={!!error}
122 |       {...props}
123 |     />
124 |   )
125 | })
126 | FormControl.displayName = "FormControl"
127 | 
128 | const FormDescription = React.forwardRef<
129 |   HTMLParagraphElement,
130 |   React.HTMLAttributes<HTMLParagraphElement>
131 | >(({ className, ...props }, ref) => {
132 |   const { formDescriptionId } = useFormField()
133 | 
134 |   return (
135 |     <p
136 |       ref={ref}
137 |       id={formDescriptionId}
138 |       className={cn("text-sm text-muted-foreground", className)}
139 |       {...props}
140 |     />
141 |   )
142 | })
143 | FormDescription.displayName = "FormDescription"
144 | 
145 | const FormMessage = React.forwardRef<
146 |   HTMLParagraphElement,
147 |   React.HTMLAttributes<HTMLParagraphElement>
148 | >(({ className, children, ...props }, ref) => {
149 |   const { error, formMessageId } = useFormField()
150 |   const body = error ? String(error?.message ?? "") : children
151 | 
152 |   if (!body) {
153 |     return null
154 |   }
155 | 
156 |   return (
157 |     <p
158 |       ref={ref}
159 |       id={formMessageId}
160 |       className={cn("text-sm font-medium text-destructive", className)}
161 |       {...props}
162 |     >
163 |       {body}
164 |     </p>
165 |   )
166 | })
167 | FormMessage.displayName = "FormMessage"
168 | 
169 | export {
170 |   useFormField,
171 |   Form,
172 |   FormItem,
173 |   FormLabel,
174 |   FormControl,
175 |   FormDescription,
176 |   FormMessage,
177 |   FormField,
178 | }
179 | 


--------------------------------------------------------------------------------
/client/src/components/ui/hover-card.tsx:
--------------------------------------------------------------------------------
 1 | "use client"
 2 | 
 3 | import * as React from "react"
 4 | import * as HoverCardPrimitive from "@radix-ui/react-hover-card"
 5 | 
 6 | import { cn } from "@/lib/utils"
 7 | 
 8 | const HoverCard = HoverCardPrimitive.Root
 9 | 
10 | const HoverCardTrigger = HoverCardPrimitive.Trigger
11 | 
12 | const HoverCardContent = React.forwardRef<
13 |   React.ElementRef<typeof HoverCardPrimitive.Content>,
14 |   React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
15 | >(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
16 |   <HoverCardPrimitive.Content
17 |     ref={ref}
18 |     align={align}
19 |     sideOffset={sideOffset}
20 |     className={cn(
21 |       "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]",
22 |       className
23 |     )}
24 |     {...props}
25 |   />
26 | ))
27 | HoverCardContent.displayName = HoverCardPrimitive.Content.displayName
28 | 
29 | export { HoverCard, HoverCardTrigger, HoverCardContent }
30 | 


--------------------------------------------------------------------------------
/client/src/components/ui/input-otp.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import { OTPInput, OTPInputContext } from "input-otp"
 3 | import { Dot } from "lucide-react"
 4 | 
 5 | import { cn } from "@/lib/utils"
 6 | 
 7 | const InputOTP = React.forwardRef<
 8 |   React.ElementRef<typeof OTPInput>,
 9 |   React.ComponentPropsWithoutRef<typeof OTPInput>
10 | >(({ className, containerClassName, ...props }, ref) => (
11 |   <OTPInput
12 |     ref={ref}
13 |     containerClassName={cn(
14 |       "flex items-center gap-2 has-[:disabled]:opacity-50",
15 |       containerClassName
16 |     )}
17 |     className={cn("disabled:cursor-not-allowed", className)}
18 |     {...props}
19 |   />
20 | ))
21 | InputOTP.displayName = "InputOTP"
22 | 
23 | const InputOTPGroup = React.forwardRef<
24 |   React.ElementRef<"div">,
25 |   React.ComponentPropsWithoutRef<"div">
26 | >(({ className, ...props }, ref) => (
27 |   <div ref={ref} className={cn("flex items-center", className)} {...props} />
28 | ))
29 | InputOTPGroup.displayName = "InputOTPGroup"
30 | 
31 | const InputOTPSlot = React.forwardRef<
32 |   React.ElementRef<"div">,
33 |   React.ComponentPropsWithoutRef<"div"> & { index: number }
34 | >(({ index, className, ...props }, ref) => {
35 |   const inputOTPContext = React.useContext(OTPInputContext)
36 |   const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]
37 | 
38 |   return (
39 |     <div
40 |       ref={ref}
41 |       className={cn(
42 |         "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
43 |         isActive && "z-10 ring-2 ring-ring ring-offset-background",
44 |         className
45 |       )}
46 |       {...props}
47 |     >
48 |       {char}
49 |       {hasFakeCaret && (
50 |         <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
51 |           <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
52 |         </div>
53 |       )}
54 |     </div>
55 |   )
56 | })
57 | InputOTPSlot.displayName = "InputOTPSlot"
58 | 
59 | const InputOTPSeparator = React.forwardRef<
60 |   React.ElementRef<"div">,
61 |   React.ComponentPropsWithoutRef<"div">
62 | >(({ ...props }, ref) => (
63 |   <div ref={ref} role="separator" {...props}>
64 |     <Dot />
65 |   </div>
66 | ))
67 | InputOTPSeparator.displayName = "InputOTPSeparator"
68 | 
69 | export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
70 | 


--------------------------------------------------------------------------------
/client/src/components/ui/input.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | 
 3 | import { cn } from "@/lib/utils"
 4 | 
 5 | const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
 6 |   ({ className, type, ...props }, ref) => {
 7 |     return (
 8 |       <input
 9 |         type={type}
10 |         className={cn(
11 |           "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
12 |           className
13 |         )}
14 |         ref={ref}
15 |         {...props}
16 |       />
17 |     )
18 |   }
19 | )
20 | Input.displayName = "Input"
21 | 
22 | export { Input }
23 | 


--------------------------------------------------------------------------------
/client/src/components/ui/label.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import * as LabelPrimitive from "@radix-ui/react-label"
 3 | import { cva, type VariantProps } from "class-variance-authority"
 4 | 
 5 | import { cn } from "@/lib/utils"
 6 | 
 7 | const labelVariants = cva(
 8 |   "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
 9 | )
10 | 
11 | const Label = React.forwardRef<
12 |   React.ElementRef<typeof LabelPrimitive.Root>,
13 |   React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
14 |     VariantProps<typeof labelVariants>
15 | >(({ className, ...props }, ref) => (
16 |   <LabelPrimitive.Root
17 |     ref={ref}
18 |     className={cn(labelVariants(), className)}
19 |     {...props}
20 |   />
21 | ))
22 | Label.displayName = LabelPrimitive.Root.displayName
23 | 
24 | export { Label }
25 | 


--------------------------------------------------------------------------------
/client/src/components/ui/navigation-menu.tsx:
--------------------------------------------------------------------------------
  1 | import * as React from "react"
  2 | import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
  3 | import { cva } from "class-variance-authority"
  4 | import { ChevronDown } from "lucide-react"
  5 | 
  6 | import { cn } from "@/lib/utils"
  7 | 
  8 | const NavigationMenu = React.forwardRef<
  9 |   React.ElementRef<typeof NavigationMenuPrimitive.Root>,
 10 |   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
 11 | >(({ className, children, ...props }, ref) => (
 12 |   <NavigationMenuPrimitive.Root
 13 |     ref={ref}
 14 |     className={cn(
 15 |       "relative z-10 flex max-w-max flex-1 items-center justify-center",
 16 |       className
 17 |     )}
 18 |     {...props}
 19 |   >
 20 |     {children}
 21 |     <NavigationMenuViewport />
 22 |   </NavigationMenuPrimitive.Root>
 23 | ))
 24 | NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName
 25 | 
 26 | const NavigationMenuList = React.forwardRef<
 27 |   React.ElementRef<typeof NavigationMenuPrimitive.List>,
 28 |   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
 29 | >(({ className, ...props }, ref) => (
 30 |   <NavigationMenuPrimitive.List
 31 |     ref={ref}
 32 |     className={cn(
 33 |       "group flex flex-1 list-none items-center justify-center space-x-1",
 34 |       className
 35 |     )}
 36 |     {...props}
 37 |   />
 38 | ))
 39 | NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName
 40 | 
 41 | const NavigationMenuItem = NavigationMenuPrimitive.Item
 42 | 
 43 | const navigationMenuTriggerStyle = cva(
 44 |   "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent"
 45 | )
 46 | 
 47 | const NavigationMenuTrigger = React.forwardRef<
 48 |   React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
 49 |   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
 50 | >(({ className, children, ...props }, ref) => (
 51 |   <NavigationMenuPrimitive.Trigger
 52 |     ref={ref}
 53 |     className={cn(navigationMenuTriggerStyle(), "group", className)}
 54 |     {...props}
 55 |   >
 56 |     {children}{" "}
 57 |     <ChevronDown
 58 |       className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
 59 |       aria-hidden="true"
 60 |     />
 61 |   </NavigationMenuPrimitive.Trigger>
 62 | ))
 63 | NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName
 64 | 
 65 | const NavigationMenuContent = React.forwardRef<
 66 |   React.ElementRef<typeof NavigationMenuPrimitive.Content>,
 67 |   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
 68 | >(({ className, ...props }, ref) => (
 69 |   <NavigationMenuPrimitive.Content
 70 |     ref={ref}
 71 |     className={cn(
 72 |       "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
 73 |       className
 74 |     )}
 75 |     {...props}
 76 |   />
 77 | ))
 78 | NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName
 79 | 
 80 | const NavigationMenuLink = NavigationMenuPrimitive.Link
 81 | 
 82 | const NavigationMenuViewport = React.forwardRef<
 83 |   React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
 84 |   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
 85 | >(({ className, ...props }, ref) => (
 86 |   <div className={cn("absolute left-0 top-full flex justify-center")}>
 87 |     <NavigationMenuPrimitive.Viewport
 88 |       className={cn(
 89 |         "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
 90 |         className
 91 |       )}
 92 |       ref={ref}
 93 |       {...props}
 94 |     />
 95 |   </div>
 96 | ))
 97 | NavigationMenuViewport.displayName =
 98 |   NavigationMenuPrimitive.Viewport.displayName
 99 | 
100 | const NavigationMenuIndicator = React.forwardRef<
101 |   React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
102 |   React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
103 | >(({ className, ...props }, ref) => (
104 |   <NavigationMenuPrimitive.Indicator
105 |     ref={ref}
106 |     className={cn(
107 |       "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
108 |       className
109 |     )}
110 |     {...props}
111 |   >
112 |     <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
113 |   </NavigationMenuPrimitive.Indicator>
114 | ))
115 | NavigationMenuIndicator.displayName =
116 |   NavigationMenuPrimitive.Indicator.displayName
117 | 
118 | export {
119 |   navigationMenuTriggerStyle,
120 |   NavigationMenu,
121 |   NavigationMenuList,
122 |   NavigationMenuItem,
123 |   NavigationMenuContent,
124 |   NavigationMenuTrigger,
125 |   NavigationMenuLink,
126 |   NavigationMenuIndicator,
127 |   NavigationMenuViewport,
128 | }
129 | 


--------------------------------------------------------------------------------
/client/src/components/ui/pagination.tsx:
--------------------------------------------------------------------------------
  1 | import * as React from "react"
  2 | import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"
  3 | 
  4 | import { cn } from "@/lib/utils"
  5 | import { ButtonProps, buttonVariants } from "@/components/ui/button"
  6 | 
  7 | const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  8 |   <nav
  9 |     role="navigation"
 10 |     aria-label="pagination"
 11 |     className={cn("mx-auto flex w-full justify-center", className)}
 12 |     {...props}
 13 |   />
 14 | )
 15 | Pagination.displayName = "Pagination"
 16 | 
 17 | const PaginationContent = React.forwardRef<
 18 |   HTMLUListElement,
 19 |   React.ComponentProps<"ul">
 20 | >(({ className, ...props }, ref) => (
 21 |   <ul
 22 |     ref={ref}
 23 |     className={cn("flex flex-row items-center gap-1", className)}
 24 |     {...props}
 25 |   />
 26 | ))
 27 | PaginationContent.displayName = "PaginationContent"
 28 | 
 29 | const PaginationItem = React.forwardRef<
 30 |   HTMLLIElement,
 31 |   React.ComponentProps<"li">
 32 | >(({ className, ...props }, ref) => (
 33 |   <li ref={ref} className={cn("", className)} {...props} />
 34 | ))
 35 | PaginationItem.displayName = "PaginationItem"
 36 | 
 37 | type PaginationLinkProps = {
 38 |   isActive?: boolean
 39 | } & Pick<ButtonProps, "size"> &
 40 |   React.ComponentProps<"a">
 41 | 
 42 | const PaginationLink = ({
 43 |   className,
 44 |   isActive,
 45 |   size = "icon",
 46 |   ...props
 47 | }: PaginationLinkProps) => (
 48 |   <a
 49 |     aria-current={isActive ? "page" : undefined}
 50 |     className={cn(
 51 |       buttonVariants({
 52 |         variant: isActive ? "outline" : "ghost",
 53 |         size,
 54 |       }),
 55 |       className
 56 |     )}
 57 |     {...props}
 58 |   />
 59 | )
 60 | PaginationLink.displayName = "PaginationLink"
 61 | 
 62 | const PaginationPrevious = ({
 63 |   className,
 64 |   ...props
 65 | }: React.ComponentProps<typeof PaginationLink>) => (
 66 |   <PaginationLink
 67 |     aria-label="Go to previous page"
 68 |     size="default"
 69 |     className={cn("gap-1 pl-2.5", className)}
 70 |     {...props}
 71 |   >
 72 |     <ChevronLeft className="h-4 w-4" />
 73 |     <span>Previous</span>
 74 |   </PaginationLink>
 75 | )
 76 | PaginationPrevious.displayName = "PaginationPrevious"
 77 | 
 78 | const PaginationNext = ({
 79 |   className,
 80 |   ...props
 81 | }: React.ComponentProps<typeof PaginationLink>) => (
 82 |   <PaginationLink
 83 |     aria-label="Go to next page"
 84 |     size="default"
 85 |     className={cn("gap-1 pr-2.5", className)}
 86 |     {...props}
 87 |   >
 88 |     <span>Next</span>
 89 |     <ChevronRight className="h-4 w-4" />
 90 |   </PaginationLink>
 91 | )
 92 | PaginationNext.displayName = "PaginationNext"
 93 | 
 94 | const PaginationEllipsis = ({
 95 |   className,
 96 |   ...props
 97 | }: React.ComponentProps<"span">) => (
 98 |   <span
 99 |     aria-hidden
100 |     className={cn("flex h-9 w-9 items-center justify-center", className)}
101 |     {...props}
102 |   >
103 |     <MoreHorizontal className="h-4 w-4" />
104 |     <span className="sr-only">More pages</span>
105 |   </span>
106 | )
107 | PaginationEllipsis.displayName = "PaginationEllipsis"
108 | 
109 | export {
110 |   Pagination,
111 |   PaginationContent,
112 |   PaginationEllipsis,
113 |   PaginationItem,
114 |   PaginationLink,
115 |   PaginationNext,
116 |   PaginationPrevious,
117 | }
118 | 


--------------------------------------------------------------------------------
/client/src/components/ui/popover.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import * as PopoverPrimitive from "@radix-ui/react-popover"
 3 | 
 4 | import { cn } from "@/lib/utils"
 5 | 
 6 | const Popover = PopoverPrimitive.Root
 7 | 
 8 | const PopoverTrigger = PopoverPrimitive.Trigger
 9 | 
10 | const PopoverContent = React.forwardRef<
11 |   React.ElementRef<typeof PopoverPrimitive.Content>,
12 |   React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
13 | >(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
14 |   <PopoverPrimitive.Portal>
15 |     <PopoverPrimitive.Content
16 |       ref={ref}
17 |       align={align}
18 |       sideOffset={sideOffset}
19 |       className={cn(
20 |         "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
21 |         className
22 |       )}
23 |       {...props}
24 |     />
25 |   </PopoverPrimitive.Portal>
26 | ))
27 | PopoverContent.displayName = PopoverPrimitive.Content.displayName
28 | 
29 | export { Popover, PopoverTrigger, PopoverContent }
30 | 


--------------------------------------------------------------------------------
/client/src/components/ui/progress.tsx:
--------------------------------------------------------------------------------
 1 | "use client"
 2 | 
 3 | import * as React from "react"
 4 | import * as ProgressPrimitive from "@radix-ui/react-progress"
 5 | 
 6 | import { cn } from "@/lib/utils"
 7 | 
 8 | const Progress = React.forwardRef<
 9 |   React.ElementRef<typeof ProgressPrimitive.Root>,
10 |   React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
11 | >(({ className, value, ...props }, ref) => (
12 |   <ProgressPrimitive.Root
13 |     ref={ref}
14 |     className={cn(
15 |       "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
16 |       className
17 |     )}
18 |     {...props}
19 |   >
20 |     <ProgressPrimitive.Indicator
21 |       className="h-full w-full flex-1 bg-primary transition-all"
22 |       style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
23 |     />
24 |   </ProgressPrimitive.Root>
25 | ))
26 | Progress.displayName = ProgressPrimitive.Root.displayName
27 | 
28 | export { Progress }
29 | 


--------------------------------------------------------------------------------
/client/src/components/ui/radio-group.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
 3 | import { Circle } from "lucide-react"
 4 | 
 5 | import { cn } from "@/lib/utils"
 6 | 
 7 | const RadioGroup = React.forwardRef<
 8 |   React.ElementRef<typeof RadioGroupPrimitive.Root>,
 9 |   React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
10 | >(({ className, ...props }, ref) => {
11 |   return (
12 |     <RadioGroupPrimitive.Root
13 |       className={cn("grid gap-2", className)}
14 |       {...props}
15 |       ref={ref}
16 |     />
17 |   )
18 | })
19 | RadioGroup.displayName = RadioGroupPrimitive.Root.displayName
20 | 
21 | const RadioGroupItem = React.forwardRef<
22 |   React.ElementRef<typeof RadioGroupPrimitive.Item>,
23 |   React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
24 | >(({ className, ...props }, ref) => {
25 |   return (
26 |     <RadioGroupPrimitive.Item
27 |       ref={ref}
28 |       className={cn(
29 |         "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
30 |         className
31 |       )}
32 |       {...props}
33 |     >
34 |       <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
35 |         <Circle className="h-2.5 w-2.5 fill-current text-current" />
36 |       </RadioGroupPrimitive.Indicator>
37 |     </RadioGroupPrimitive.Item>
38 |   )
39 | })
40 | RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName
41 | 
42 | export { RadioGroup, RadioGroupItem }
43 | 


--------------------------------------------------------------------------------
/client/src/components/ui/resizable.tsx:
--------------------------------------------------------------------------------
 1 | "use client"
 2 | 
 3 | import { GripVertical } from "lucide-react"
 4 | import * as ResizablePrimitive from "react-resizable-panels"
 5 | 
 6 | import { cn } from "@/lib/utils"
 7 | 
 8 | const ResizablePanelGroup = ({
 9 |   className,
10 |   ...props
11 | }: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
12 |   <ResizablePrimitive.PanelGroup
13 |     className={cn(
14 |       "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
15 |       className
16 |     )}
17 |     {...props}
18 |   />
19 | )
20 | 
21 | const ResizablePanel = ResizablePrimitive.Panel
22 | 
23 | const ResizableHandle = ({
24 |   withHandle,
25 |   className,
26 |   ...props
27 | }: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
28 |   withHandle?: boolean
29 | }) => (
30 |   <ResizablePrimitive.PanelResizeHandle
31 |     className={cn(
32 |       "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
33 |       className
34 |     )}
35 |     {...props}
36 |   >
37 |     {withHandle && (
38 |       <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
39 |         <GripVertical className="h-2.5 w-2.5" />
40 |       </div>
41 |     )}
42 |   </ResizablePrimitive.PanelResizeHandle>
43 | )
44 | 
45 | export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
46 | 


--------------------------------------------------------------------------------
/client/src/components/ui/scroll-area.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
 3 | 
 4 | import { cn } from "@/lib/utils"
 5 | 
 6 | const ScrollArea = React.forwardRef<
 7 |   React.ElementRef<typeof ScrollAreaPrimitive.Root>,
 8 |   React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
 9 | >(({ className, children, ...props }, ref) => (
10 |   <ScrollAreaPrimitive.Root
11 |     ref={ref}
12 |     className={cn("relative overflow-hidden", className)}
13 |     {...props}
14 |   >
15 |     <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
16 |       {children}
17 |     </ScrollAreaPrimitive.Viewport>
18 |     <ScrollBar />
19 |     <ScrollAreaPrimitive.Corner />
20 |   </ScrollAreaPrimitive.Root>
21 | ))
22 | ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName
23 | 
24 | const ScrollBar = React.forwardRef<
25 |   React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
26 |   React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
27 | >(({ className, orientation = "vertical", ...props }, ref) => (
28 |   <ScrollAreaPrimitive.ScrollAreaScrollbar
29 |     ref={ref}
30 |     orientation={orientation}
31 |     className={cn(
32 |       "flex touch-none select-none transition-colors",
33 |       orientation === "vertical" &&
34 |         "h-full w-2.5 border-l border-l-transparent p-[1px]",
35 |       orientation === "horizontal" &&
36 |         "h-2.5 flex-col border-t border-t-transparent p-[1px]",
37 |       className
38 |     )}
39 |     {...props}
40 |   >
41 |     <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
42 |   </ScrollAreaPrimitive.ScrollAreaScrollbar>
43 | ))
44 | ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName
45 | 
46 | export { ScrollArea, ScrollBar }
47 | 


--------------------------------------------------------------------------------
/client/src/components/ui/select.tsx:
--------------------------------------------------------------------------------
  1 | "use client"
  2 | 
  3 | import * as React from "react"
  4 | import * as SelectPrimitive from "@radix-ui/react-select"
  5 | import { Check, ChevronDown, ChevronUp } from "lucide-react"
  6 | 
  7 | import { cn } from "@/lib/utils"
  8 | 
  9 | const Select = SelectPrimitive.Root
 10 | 
 11 | const SelectGroup = SelectPrimitive.Group
 12 | 
 13 | const SelectValue = SelectPrimitive.Value
 14 | 
 15 | const SelectTrigger = React.forwardRef<
 16 |   React.ElementRef<typeof SelectPrimitive.Trigger>,
 17 |   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
 18 | >(({ className, children, ...props }, ref) => (
 19 |   <SelectPrimitive.Trigger
 20 |     ref={ref}
 21 |     className={cn(
 22 |       "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
 23 |       className
 24 |     )}
 25 |     {...props}
 26 |   >
 27 |     {children}
 28 |     <SelectPrimitive.Icon asChild>
 29 |       <ChevronDown className="h-4 w-4 opacity-50" />
 30 |     </SelectPrimitive.Icon>
 31 |   </SelectPrimitive.Trigger>
 32 | ))
 33 | SelectTrigger.displayName = SelectPrimitive.Trigger.displayName
 34 | 
 35 | const SelectScrollUpButton = React.forwardRef<
 36 |   React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
 37 |   React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
 38 | >(({ className, ...props }, ref) => (
 39 |   <SelectPrimitive.ScrollUpButton
 40 |     ref={ref}
 41 |     className={cn(
 42 |       "flex cursor-default items-center justify-center py-1",
 43 |       className
 44 |     )}
 45 |     {...props}
 46 |   >
 47 |     <ChevronUp className="h-4 w-4" />
 48 |   </SelectPrimitive.ScrollUpButton>
 49 | ))
 50 | SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName
 51 | 
 52 | const SelectScrollDownButton = React.forwardRef<
 53 |   React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
 54 |   React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
 55 | >(({ className, ...props }, ref) => (
 56 |   <SelectPrimitive.ScrollDownButton
 57 |     ref={ref}
 58 |     className={cn(
 59 |       "flex cursor-default items-center justify-center py-1",
 60 |       className
 61 |     )}
 62 |     {...props}
 63 |   >
 64 |     <ChevronDown className="h-4 w-4" />
 65 |   </SelectPrimitive.ScrollDownButton>
 66 | ))
 67 | SelectScrollDownButton.displayName =
 68 |   SelectPrimitive.ScrollDownButton.displayName
 69 | 
 70 | const SelectContent = React.forwardRef<
 71 |   React.ElementRef<typeof SelectPrimitive.Content>,
 72 |   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
 73 | >(({ className, children, position = "popper", ...props }, ref) => (
 74 |   <SelectPrimitive.Portal>
 75 |     <SelectPrimitive.Content
 76 |       ref={ref}
 77 |       className={cn(
 78 |         "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
 79 |         position === "popper" &&
 80 |           "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
 81 |         className
 82 |       )}
 83 |       position={position}
 84 |       {...props}
 85 |     >
 86 |       <SelectScrollUpButton />
 87 |       <SelectPrimitive.Viewport
 88 |         className={cn(
 89 |           "p-1",
 90 |           position === "popper" &&
 91 |             "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
 92 |         )}
 93 |       >
 94 |         {children}
 95 |       </SelectPrimitive.Viewport>
 96 |       <SelectScrollDownButton />
 97 |     </SelectPrimitive.Content>
 98 |   </SelectPrimitive.Portal>
 99 | ))
100 | SelectContent.displayName = SelectPrimitive.Content.displayName
101 | 
102 | const SelectLabel = React.forwardRef<
103 |   React.ElementRef<typeof SelectPrimitive.Label>,
104 |   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
105 | >(({ className, ...props }, ref) => (
106 |   <SelectPrimitive.Label
107 |     ref={ref}
108 |     className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
109 |     {...props}
110 |   />
111 | ))
112 | SelectLabel.displayName = SelectPrimitive.Label.displayName
113 | 
114 | const SelectItem = React.forwardRef<
115 |   React.ElementRef<typeof SelectPrimitive.Item>,
116 |   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
117 | >(({ className, children, ...props }, ref) => (
118 |   <SelectPrimitive.Item
119 |     ref={ref}
120 |     className={cn(
121 |       "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
122 |       className
123 |     )}
124 |     {...props}
125 |   >
126 |     <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
127 |       <SelectPrimitive.ItemIndicator>
128 |         <Check className="h-4 w-4" />
129 |       </SelectPrimitive.ItemIndicator>
130 |     </span>
131 | 
132 |     <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
133 |   </SelectPrimitive.Item>
134 | ))
135 | SelectItem.displayName = SelectPrimitive.Item.displayName
136 | 
137 | const SelectSeparator = React.forwardRef<
138 |   React.ElementRef<typeof SelectPrimitive.Separator>,
139 |   React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
140 | >(({ className, ...props }, ref) => (
141 |   <SelectPrimitive.Separator
142 |     ref={ref}
143 |     className={cn("-mx-1 my-1 h-px bg-muted", className)}
144 |     {...props}
145 |   />
146 | ))
147 | SelectSeparator.displayName = SelectPrimitive.Separator.displayName
148 | 
149 | export {
150 |   Select,
151 |   SelectGroup,
152 |   SelectValue,
153 |   SelectTrigger,
154 |   SelectContent,
155 |   SelectLabel,
156 |   SelectItem,
157 |   SelectSeparator,
158 |   SelectScrollUpButton,
159 |   SelectScrollDownButton,
160 | }
161 | 


--------------------------------------------------------------------------------
/client/src/components/ui/separator.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import * as SeparatorPrimitive from "@radix-ui/react-separator"
 3 | 
 4 | import { cn } from "@/lib/utils"
 5 | 
 6 | const Separator = React.forwardRef<
 7 |   React.ElementRef<typeof SeparatorPrimitive.Root>,
 8 |   React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
 9 | >(
10 |   (
11 |     { className, orientation = "horizontal", decorative = true, ...props },
12 |     ref
13 |   ) => (
14 |     <SeparatorPrimitive.Root
15 |       ref={ref}
16 |       decorative={decorative}
17 |       orientation={orientation}
18 |       className={cn(
19 |         "shrink-0 bg-border",
20 |         orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
21 |         className
22 |       )}
23 |       {...props}
24 |     />
25 |   )
26 | )
27 | Separator.displayName = SeparatorPrimitive.Root.displayName
28 | 
29 | export { Separator }
30 | 


--------------------------------------------------------------------------------
/client/src/components/ui/sheet.tsx:
--------------------------------------------------------------------------------
  1 | "use client"
  2 | 
  3 | import * as React from "react"
  4 | import * as SheetPrimitive from "@radix-ui/react-dialog"
  5 | import { cva, type VariantProps } from "class-variance-authority"
  6 | import { X } from "lucide-react"
  7 | 
  8 | import { cn } from "@/lib/utils"
  9 | 
 10 | const Sheet = SheetPrimitive.Root
 11 | 
 12 | const SheetTrigger = SheetPrimitive.Trigger
 13 | 
 14 | const SheetClose = SheetPrimitive.Close
 15 | 
 16 | const SheetPortal = SheetPrimitive.Portal
 17 | 
 18 | const SheetOverlay = React.forwardRef<
 19 |   React.ElementRef<typeof SheetPrimitive.Overlay>,
 20 |   React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
 21 | >(({ className, ...props }, ref) => (
 22 |   <SheetPrimitive.Overlay
 23 |     className={cn(
 24 |       "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
 25 |       className
 26 |     )}
 27 |     {...props}
 28 |     ref={ref}
 29 |   />
 30 | ))
 31 | SheetOverlay.displayName = SheetPrimitive.Overlay.displayName
 32 | 
 33 | const sheetVariants = cva(
 34 |   "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
 35 |   {
 36 |     variants: {
 37 |       side: {
 38 |         top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
 39 |         bottom:
 40 |           "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
 41 |         left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
 42 |         right:
 43 |           "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
 44 |       },
 45 |     },
 46 |     defaultVariants: {
 47 |       side: "right",
 48 |     },
 49 |   }
 50 | )
 51 | 
 52 | interface SheetContentProps
 53 |   extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
 54 |     VariantProps<typeof sheetVariants> {}
 55 | 
 56 | const SheetContent = React.forwardRef<
 57 |   React.ElementRef<typeof SheetPrimitive.Content>,
 58 |   SheetContentProps
 59 | >(({ side = "right", className, children, ...props }, ref) => (
 60 |   <SheetPortal>
 61 |     <SheetOverlay />
 62 |     <SheetPrimitive.Content
 63 |       ref={ref}
 64 |       className={cn(sheetVariants({ side }), className)}
 65 |       {...props}
 66 |     >
 67 |       {children}
 68 |       <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
 69 |         <X className="h-4 w-4" />
 70 |         <span className="sr-only">Close</span>
 71 |       </SheetPrimitive.Close>
 72 |     </SheetPrimitive.Content>
 73 |   </SheetPortal>
 74 | ))
 75 | SheetContent.displayName = SheetPrimitive.Content.displayName
 76 | 
 77 | const SheetHeader = ({
 78 |   className,
 79 |   ...props
 80 | }: React.HTMLAttributes<HTMLDivElement>) => (
 81 |   <div
 82 |     className={cn(
 83 |       "flex flex-col space-y-2 text-center sm:text-left",
 84 |       className
 85 |     )}
 86 |     {...props}
 87 |   />
 88 | )
 89 | SheetHeader.displayName = "SheetHeader"
 90 | 
 91 | const SheetFooter = ({
 92 |   className,
 93 |   ...props
 94 | }: React.HTMLAttributes<HTMLDivElement>) => (
 95 |   <div
 96 |     className={cn(
 97 |       "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
 98 |       className
 99 |     )}
100 |     {...props}
101 |   />
102 | )
103 | SheetFooter.displayName = "SheetFooter"
104 | 
105 | const SheetTitle = React.forwardRef<
106 |   React.ElementRef<typeof SheetPrimitive.Title>,
107 |   React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
108 | >(({ className, ...props }, ref) => (
109 |   <SheetPrimitive.Title
110 |     ref={ref}
111 |     className={cn("text-lg font-semibold text-foreground", className)}
112 |     {...props}
113 |   />
114 | ))
115 | SheetTitle.displayName = SheetPrimitive.Title.displayName
116 | 
117 | const SheetDescription = React.forwardRef<
118 |   React.ElementRef<typeof SheetPrimitive.Description>,
119 |   React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
120 | >(({ className, ...props }, ref) => (
121 |   <SheetPrimitive.Description
122 |     ref={ref}
123 |     className={cn("text-sm text-muted-foreground", className)}
124 |     {...props}
125 |   />
126 | ))
127 | SheetDescription.displayName = SheetPrimitive.Description.displayName
128 | 
129 | export {
130 |   Sheet,
131 |   SheetPortal,
132 |   SheetOverlay,
133 |   SheetTrigger,
134 |   SheetClose,
135 |   SheetContent,
136 |   SheetHeader,
137 |   SheetFooter,
138 |   SheetTitle,
139 |   SheetDescription,
140 | }
141 | 


--------------------------------------------------------------------------------
/client/src/components/ui/skeleton.tsx:
--------------------------------------------------------------------------------
 1 | import { cn } from "@/lib/utils"
 2 | 
 3 | function Skeleton({
 4 |   className,
 5 |   ...props
 6 | }: React.HTMLAttributes<HTMLDivElement>) {
 7 |   return (
 8 |     <div
 9 |       className={cn("animate-pulse rounded-md bg-muted", className)}
10 |       {...props}
11 |     />
12 |   )
13 | }
14 | 
15 | export { Skeleton }
16 | 


--------------------------------------------------------------------------------
/client/src/components/ui/slider.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import * as SliderPrimitive from "@radix-ui/react-slider"
 3 | 
 4 | import { cn } from "@/lib/utils"
 5 | 
 6 | const Slider = React.forwardRef<
 7 |   React.ElementRef<typeof SliderPrimitive.Root>,
 8 |   React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
 9 | >(({ className, ...props }, ref) => (
10 |   <SliderPrimitive.Root
11 |     ref={ref}
12 |     className={cn(
13 |       "relative flex w-full touch-none select-none items-center",
14 |       className
15 |     )}
16 |     {...props}
17 |   >
18 |     <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
19 |       <SliderPrimitive.Range className="absolute h-full bg-primary" />
20 |     </SliderPrimitive.Track>
21 |     <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
22 |   </SliderPrimitive.Root>
23 | ))
24 | Slider.displayName = SliderPrimitive.Root.displayName
25 | 
26 | export { Slider }
27 | 


--------------------------------------------------------------------------------
/client/src/components/ui/switch.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import * as SwitchPrimitives from "@radix-ui/react-switch"
 3 | 
 4 | import { cn } from "@/lib/utils"
 5 | 
 6 | const Switch = React.forwardRef<
 7 |   React.ElementRef<typeof SwitchPrimitives.Root>,
 8 |   React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
 9 | >(({ className, ...props }, ref) => (
10 |   <SwitchPrimitives.Root
11 |     className={cn(
12 |       "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
13 |       className
14 |     )}
15 |     {...props}
16 |     ref={ref}
17 |   >
18 |     <SwitchPrimitives.Thumb
19 |       className={cn(
20 |         "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
21 |       )}
22 |     />
23 |   </SwitchPrimitives.Root>
24 | ))
25 | Switch.displayName = SwitchPrimitives.Root.displayName
26 | 
27 | export { Switch }
28 | 


--------------------------------------------------------------------------------
/client/src/components/ui/table.tsx:
--------------------------------------------------------------------------------
  1 | import * as React from "react"
  2 | 
  3 | import { cn } from "@/lib/utils"
  4 | 
  5 | const Table = React.forwardRef<
  6 |   HTMLTableElement,
  7 |   React.HTMLAttributes<HTMLTableElement>
  8 | >(({ className, ...props }, ref) => (
  9 |   <div className="relative w-full overflow-auto">
 10 |     <table
 11 |       ref={ref}
 12 |       className={cn("w-full caption-bottom text-sm", className)}
 13 |       {...props}
 14 |     />
 15 |   </div>
 16 | ))
 17 | Table.displayName = "Table"
 18 | 
 19 | const TableHeader = React.forwardRef<
 20 |   HTMLTableSectionElement,
 21 |   React.HTMLAttributes<HTMLTableSectionElement>
 22 | >(({ className, ...props }, ref) => (
 23 |   <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
 24 | ))
 25 | TableHeader.displayName = "TableHeader"
 26 | 
 27 | const TableBody = React.forwardRef<
 28 |   HTMLTableSectionElement,
 29 |   React.HTMLAttributes<HTMLTableSectionElement>
 30 | >(({ className, ...props }, ref) => (
 31 |   <tbody
 32 |     ref={ref}
 33 |     className={cn("[&_tr:last-child]:border-0", className)}
 34 |     {...props}
 35 |   />
 36 | ))
 37 | TableBody.displayName = "TableBody"
 38 | 
 39 | const TableFooter = React.forwardRef<
 40 |   HTMLTableSectionElement,
 41 |   React.HTMLAttributes<HTMLTableSectionElement>
 42 | >(({ className, ...props }, ref) => (
 43 |   <tfoot
 44 |     ref={ref}
 45 |     className={cn(
 46 |       "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
 47 |       className
 48 |     )}
 49 |     {...props}
 50 |   />
 51 | ))
 52 | TableFooter.displayName = "TableFooter"
 53 | 
 54 | const TableRow = React.forwardRef<
 55 |   HTMLTableRowElement,
 56 |   React.HTMLAttributes<HTMLTableRowElement>
 57 | >(({ className, ...props }, ref) => (
 58 |   <tr
 59 |     ref={ref}
 60 |     className={cn(
 61 |       "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
 62 |       className
 63 |     )}
 64 |     {...props}
 65 |   />
 66 | ))
 67 | TableRow.displayName = "TableRow"
 68 | 
 69 | const TableHead = React.forwardRef<
 70 |   HTMLTableCellElement,
 71 |   React.ThHTMLAttributes<HTMLTableCellElement>
 72 | >(({ className, ...props }, ref) => (
 73 |   <th
 74 |     ref={ref}
 75 |     className={cn(
 76 |       "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
 77 |       className
 78 |     )}
 79 |     {...props}
 80 |   />
 81 | ))
 82 | TableHead.displayName = "TableHead"
 83 | 
 84 | const TableCell = React.forwardRef<
 85 |   HTMLTableCellElement,
 86 |   React.TdHTMLAttributes<HTMLTableCellElement>
 87 | >(({ className, ...props }, ref) => (
 88 |   <td
 89 |     ref={ref}
 90 |     className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
 91 |     {...props}
 92 |   />
 93 | ))
 94 | TableCell.displayName = "TableCell"
 95 | 
 96 | const TableCaption = React.forwardRef<
 97 |   HTMLTableCaptionElement,
 98 |   React.HTMLAttributes<HTMLTableCaptionElement>
 99 | >(({ className, ...props }, ref) => (
100 |   <caption
101 |     ref={ref}
102 |     className={cn("mt-4 text-sm text-muted-foreground", className)}
103 |     {...props}
104 |   />
105 | ))
106 | TableCaption.displayName = "TableCaption"
107 | 
108 | export {
109 |   Table,
110 |   TableHeader,
111 |   TableBody,
112 |   TableFooter,
113 |   TableHead,
114 |   TableRow,
115 |   TableCell,
116 |   TableCaption,
117 | }
118 | 


--------------------------------------------------------------------------------
/client/src/components/ui/tabs.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import * as TabsPrimitive from "@radix-ui/react-tabs"
 3 | 
 4 | import { cn } from "@/lib/utils"
 5 | 
 6 | const Tabs = TabsPrimitive.Root
 7 | 
 8 | const TabsList = React.forwardRef<
 9 |   React.ElementRef<typeof TabsPrimitive.List>,
10 |   React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
11 | >(({ className, ...props }, ref) => (
12 |   <TabsPrimitive.List
13 |     ref={ref}
14 |     className={cn(
15 |       "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
16 |       className
17 |     )}
18 |     {...props}
19 |   />
20 | ))
21 | TabsList.displayName = TabsPrimitive.List.displayName
22 | 
23 | const TabsTrigger = React.forwardRef<
24 |   React.ElementRef<typeof TabsPrimitive.Trigger>,
25 |   React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
26 | >(({ className, ...props }, ref) => (
27 |   <TabsPrimitive.Trigger
28 |     ref={ref}
29 |     className={cn(
30 |       "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
31 |       className
32 |     )}
33 |     {...props}
34 |   />
35 | ))
36 | TabsTrigger.displayName = TabsPrimitive.Trigger.displayName
37 | 
38 | const TabsContent = React.forwardRef<
39 |   React.ElementRef<typeof TabsPrimitive.Content>,
40 |   React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
41 | >(({ className, ...props }, ref) => (
42 |   <TabsPrimitive.Content
43 |     ref={ref}
44 |     className={cn(
45 |       "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
46 |       className
47 |     )}
48 |     {...props}
49 |   />
50 | ))
51 | TabsContent.displayName = TabsPrimitive.Content.displayName
52 | 
53 | export { Tabs, TabsList, TabsTrigger, TabsContent }
54 | 


--------------------------------------------------------------------------------
/client/src/components/ui/textarea.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | 
 3 | import { cn } from "@/lib/utils"
 4 | 
 5 | const Textarea = React.forwardRef<
 6 |   HTMLTextAreaElement,
 7 |   React.ComponentProps<"textarea">
 8 | >(({ className, ...props }, ref) => {
 9 |   return (
10 |     <textarea
11 |       className={cn(
12 |         "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
13 |         className
14 |       )}
15 |       ref={ref}
16 |       {...props}
17 |     />
18 |   )
19 | })
20 | Textarea.displayName = "Textarea"
21 | 
22 | export { Textarea }
23 | 


--------------------------------------------------------------------------------
/client/src/components/ui/theme-toggle.tsx:
--------------------------------------------------------------------------------
 1 | import { Moon, Sun } from 'lucide-react';
 2 | import { Button } from '@/components/ui/button';
 3 | import {
 4 |   DropdownMenu,
 5 |   DropdownMenuContent,
 6 |   DropdownMenuRadioGroup,
 7 |   DropdownMenuRadioItem,
 8 |   DropdownMenuTrigger,
 9 | } from '@/components/ui/dropdown-menu';
10 | import { useTheme } from '@/hooks/useTheme';
11 | 
12 | export function ThemeToggle() {
13 |   const { theme, setTheme } = useTheme();
14 | 
15 |   return (
16 |     <DropdownMenu>
17 |       <DropdownMenuTrigger asChild>
18 |         <Button 
19 |           variant="outline" 
20 |           size="sm"
21 |           className="relative h-9 w-9 p-0 border-border hover:border-ring hover:bg-accent transition-all duration-200"
22 |           data-testid="theme-toggle-button"
23 |         >
24 |           <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all duration-300 dark:-rotate-90 dark:scale-0" />
25 |           <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all duration-300 dark:rotate-0 dark:scale-100" />
26 |           <span className="sr-only">Toggle theme</span>
27 |         </Button>
28 |       </DropdownMenuTrigger>
29 |       <DropdownMenuContent align="end" className="min-w-[8rem]">
30 |         <DropdownMenuRadioGroup value={theme} onValueChange={(value) => setTheme(value as Theme)}>
31 |           <DropdownMenuRadioItem 
32 |             value="light"
33 |             data-testid="theme-light"
34 |           >
35 |             <Sun className="mr-2 h-4 w-4" />
36 |             <span>Light</span>
37 |           </DropdownMenuRadioItem>
38 |           <DropdownMenuRadioItem 
39 |             value="dark"
40 |             data-testid="theme-dark"
41 |           >
42 |             <Moon className="mr-2 h-4 w-4" />
43 |             <span>Dark</span>
44 |           </DropdownMenuRadioItem>
45 |           <DropdownMenuRadioItem 
46 |             value="system"
47 |             data-testid="theme-system"
48 |           >
49 |             <div className="mr-2 h-4 w-4 relative">
50 |               <Sun className="absolute h-4 w-4 scale-50" />
51 |               <Moon className="absolute h-4 w-4 scale-50 translate-x-1 translate-y-1" />
52 |             </div>
53 |             <span>System</span>
54 |           </DropdownMenuRadioItem>
55 |         </DropdownMenuRadioGroup>
56 |       </DropdownMenuContent>
57 |     </DropdownMenu>
58 |   );
59 | }
60 | 
61 | export function SimpleThemeToggle() {
62 |   const { isDark, toggleTheme } = useTheme();
63 | 
64 |   return (
65 |     <Button
66 |       variant="outline"
67 |       size="sm"
68 |       onClick={toggleTheme}
69 |       className="relative h-9 w-9 p-0 border-border hover:border-ring hover:bg-accent transition-all duration-200"
70 |       data-testid="simple-theme-toggle"
71 |     >
72 |       <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all duration-300 dark:-rotate-90 dark:scale-0" />
73 |       <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all duration-300 dark:rotate-0 dark:scale-100" />
74 |       <span className="sr-only">{isDark ? 'Switch to light mode' : 'Switch to dark mode'}</span>
75 |     </Button>
76 |   );
77 | }


--------------------------------------------------------------------------------
/client/src/components/ui/toast.tsx:
--------------------------------------------------------------------------------
  1 | import * as React from "react"
  2 | import * as ToastPrimitives from "@radix-ui/react-toast"
  3 | import { cva, type VariantProps } from "class-variance-authority"
  4 | import { X } from "lucide-react"
  5 | 
  6 | import { cn } from "@/lib/utils"
  7 | 
  8 | const ToastProvider = ToastPrimitives.Provider
  9 | 
 10 | const ToastViewport = React.forwardRef<
 11 |   React.ElementRef<typeof ToastPrimitives.Viewport>,
 12 |   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
 13 | >(({ className, ...props }, ref) => (
 14 |   <ToastPrimitives.Viewport
 15 |     ref={ref}
 16 |     className={cn(
 17 |       "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
 18 |       className
 19 |     )}
 20 |     {...props}
 21 |   />
 22 | ))
 23 | ToastViewport.displayName = ToastPrimitives.Viewport.displayName
 24 | 
 25 | const toastVariants = cva(
 26 |   "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
 27 |   {
 28 |     variants: {
 29 |       variant: {
 30 |         default: "border bg-background text-foreground",
 31 |         destructive:
 32 |           "destructive group border-destructive bg-destructive text-destructive-foreground",
 33 |       },
 34 |     },
 35 |     defaultVariants: {
 36 |       variant: "default",
 37 |     },
 38 |   }
 39 | )
 40 | 
 41 | const Toast = React.forwardRef<
 42 |   React.ElementRef<typeof ToastPrimitives.Root>,
 43 |   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
 44 |     VariantProps<typeof toastVariants>
 45 | >(({ className, variant, ...props }, ref) => {
 46 |   return (
 47 |     <ToastPrimitives.Root
 48 |       ref={ref}
 49 |       className={cn(toastVariants({ variant }), className)}
 50 |       {...props}
 51 |     />
 52 |   )
 53 | })
 54 | Toast.displayName = ToastPrimitives.Root.displayName
 55 | 
 56 | const ToastAction = React.forwardRef<
 57 |   React.ElementRef<typeof ToastPrimitives.Action>,
 58 |   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
 59 | >(({ className, ...props }, ref) => (
 60 |   <ToastPrimitives.Action
 61 |     ref={ref}
 62 |     className={cn(
 63 |       "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
 64 |       className
 65 |     )}
 66 |     {...props}
 67 |   />
 68 | ))
 69 | ToastAction.displayName = ToastPrimitives.Action.displayName
 70 | 
 71 | const ToastClose = React.forwardRef<
 72 |   React.ElementRef<typeof ToastPrimitives.Close>,
 73 |   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
 74 | >(({ className, ...props }, ref) => (
 75 |   <ToastPrimitives.Close
 76 |     ref={ref}
 77 |     className={cn(
 78 |       "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
 79 |       className
 80 |     )}
 81 |     toast-close=""
 82 |     {...props}
 83 |   >
 84 |     <X className="h-4 w-4" />
 85 |   </ToastPrimitives.Close>
 86 | ))
 87 | ToastClose.displayName = ToastPrimitives.Close.displayName
 88 | 
 89 | const ToastTitle = React.forwardRef<
 90 |   React.ElementRef<typeof ToastPrimitives.Title>,
 91 |   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
 92 | >(({ className, ...props }, ref) => (
 93 |   <ToastPrimitives.Title
 94 |     ref={ref}
 95 |     className={cn("text-sm font-semibold", className)}
 96 |     {...props}
 97 |   />
 98 | ))
 99 | ToastTitle.displayName = ToastPrimitives.Title.displayName
100 | 
101 | const ToastDescription = React.forwardRef<
102 |   React.ElementRef<typeof ToastPrimitives.Description>,
103 |   React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
104 | >(({ className, ...props }, ref) => (
105 |   <ToastPrimitives.Description
106 |     ref={ref}
107 |     className={cn("text-sm opacity-90", className)}
108 |     {...props}
109 |   />
110 | ))
111 | ToastDescription.displayName = ToastPrimitives.Description.displayName
112 | 
113 | type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>
114 | 
115 | type ToastActionElement = React.ReactElement<typeof ToastAction>
116 | 
117 | export {
118 |   type ToastProps,
119 |   type ToastActionElement,
120 |   ToastProvider,
121 |   ToastViewport,
122 |   Toast,
123 |   ToastTitle,
124 |   ToastDescription,
125 |   ToastClose,
126 |   ToastAction,
127 | }
128 | 


--------------------------------------------------------------------------------
/client/src/components/ui/toaster.tsx:
--------------------------------------------------------------------------------
 1 | import { useToast } from "@/hooks/use-toast"
 2 | import {
 3 |   Toast,
 4 |   ToastClose,
 5 |   ToastDescription,
 6 |   ToastProvider,
 7 |   ToastTitle,
 8 |   ToastViewport,
 9 | } from "@/components/ui/toast"
10 | 
11 | export function Toaster() {
12 |   const { toasts } = useToast()
13 | 
14 |   return (
15 |     <ToastProvider>
16 |       {toasts.map(function ({ id, title, description, action, ...props }) {
17 |         return (
18 |           <Toast key={id} {...props}>
19 |             <div className="grid gap-1">
20 |               {title && <ToastTitle>{title}</ToastTitle>}
21 |               {description && (
22 |                 <ToastDescription>{description}</ToastDescription>
23 |               )}
24 |             </div>
25 |             {action}
26 |             <ToastClose />
27 |           </Toast>
28 |         )
29 |       })}
30 |       <ToastViewport />
31 |     </ToastProvider>
32 |   )
33 | }
34 | 


--------------------------------------------------------------------------------
/client/src/components/ui/toggle-group.tsx:
--------------------------------------------------------------------------------
 1 | "use client"
 2 | 
 3 | import * as React from "react"
 4 | import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
 5 | import { type VariantProps } from "class-variance-authority"
 6 | 
 7 | import { cn } from "@/lib/utils"
 8 | import { toggleVariants } from "@/components/ui/toggle"
 9 | 
10 | const ToggleGroupContext = React.createContext<
11 |   VariantProps<typeof toggleVariants>
12 | >({
13 |   size: "default",
14 |   variant: "default",
15 | })
16 | 
17 | const ToggleGroup = React.forwardRef<
18 |   React.ElementRef<typeof ToggleGroupPrimitive.Root>,
19 |   React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
20 |     VariantProps<typeof toggleVariants>
21 | >(({ className, variant, size, children, ...props }, ref) => (
22 |   <ToggleGroupPrimitive.Root
23 |     ref={ref}
24 |     className={cn("flex items-center justify-center gap-1", className)}
25 |     {...props}
26 |   >
27 |     <ToggleGroupContext.Provider value={{ variant, size }}>
28 |       {children}
29 |     </ToggleGroupContext.Provider>
30 |   </ToggleGroupPrimitive.Root>
31 | ))
32 | 
33 | ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName
34 | 
35 | const ToggleGroupItem = React.forwardRef<
36 |   React.ElementRef<typeof ToggleGroupPrimitive.Item>,
37 |   React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
38 |     VariantProps<typeof toggleVariants>
39 | >(({ className, children, variant, size, ...props }, ref) => {
40 |   const context = React.useContext(ToggleGroupContext)
41 | 
42 |   return (
43 |     <ToggleGroupPrimitive.Item
44 |       ref={ref}
45 |       className={cn(
46 |         toggleVariants({
47 |           variant: context.variant || variant,
48 |           size: context.size || size,
49 |         }),
50 |         className
51 |       )}
52 |       {...props}
53 |     >
54 |       {children}
55 |     </ToggleGroupPrimitive.Item>
56 |   )
57 | })
58 | 
59 | ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName
60 | 
61 | export { ToggleGroup, ToggleGroupItem }
62 | 


--------------------------------------------------------------------------------
/client/src/components/ui/toggle.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | import * as TogglePrimitive from "@radix-ui/react-toggle"
 3 | import { cva, type VariantProps } from "class-variance-authority"
 4 | 
 5 | import { cn } from "@/lib/utils"
 6 | 
 7 | const toggleVariants = cva(
 8 |   "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
 9 |   {
10 |     variants: {
11 |       variant: {
12 |         default: "bg-transparent",
13 |         outline:
14 |           "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
15 |       },
16 |       size: {
17 |         default: "h-10 px-3 min-w-10",
18 |         sm: "h-9 px-2.5 min-w-9",
19 |         lg: "h-11 px-5 min-w-11",
20 |       },
21 |     },
22 |     defaultVariants: {
23 |       variant: "default",
24 |       size: "default",
25 |     },
26 |   }
27 | )
28 | 
29 | const Toggle = React.forwardRef<
30 |   React.ElementRef<typeof TogglePrimitive.Root>,
31 |   React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
32 |     VariantProps<typeof toggleVariants>
33 | >(({ className, variant, size, ...props }, ref) => (
34 |   <TogglePrimitive.Root
35 |     ref={ref}
36 |     className={cn(toggleVariants({ variant, size, className }))}
37 |     {...props}
38 |   />
39 | ))
40 | 
41 | Toggle.displayName = TogglePrimitive.Root.displayName
42 | 
43 | export { Toggle, toggleVariants }
44 | 


--------------------------------------------------------------------------------
/client/src/components/ui/tooltip.tsx:
--------------------------------------------------------------------------------
 1 | "use client"
 2 | 
 3 | import * as React from "react"
 4 | import * as TooltipPrimitive from "@radix-ui/react-tooltip"
 5 | 
 6 | import { cn } from "@/lib/utils"
 7 | 
 8 | const TooltipProvider = TooltipPrimitive.Provider
 9 | 
10 | const Tooltip = TooltipPrimitive.Root
11 | 
12 | const TooltipTrigger = TooltipPrimitive.Trigger
13 | 
14 | const TooltipContent = React.forwardRef<
15 |   React.ElementRef<typeof TooltipPrimitive.Content>,
16 |   React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
17 | >(({ className, sideOffset = 4, ...props }, ref) => (
18 |   <TooltipPrimitive.Content
19 |     ref={ref}
20 |     sideOffset={sideOffset}
21 |     className={cn(
22 |       "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
23 |       className
24 |     )}
25 |     {...props}
26 |   />
27 | ))
28 | TooltipContent.displayName = TooltipPrimitive.Content.displayName
29 | 
30 | export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
31 | 


--------------------------------------------------------------------------------
/client/src/contexts/ThemeContext.tsx:
--------------------------------------------------------------------------------
  1 | import { createContext, useContext, useEffect, useState, ReactNode } from 'react';
  2 | 
  3 | type Theme = 'dark' | 'light' | 'system';
  4 | 
  5 | type ThemeProviderProps = {
  6 |   children: ReactNode;
  7 |   defaultTheme?: Theme;
  8 |   storageKey?: string;
  9 | };
 10 | 
 11 | type ThemeProviderState = {
 12 |   theme: Theme;
 13 |   resolvedTheme: 'light' | 'dark';
 14 |   setTheme: (theme: Theme) => void;
 15 | };
 16 | 
 17 | const initialState: ThemeProviderState = {
 18 |   theme: 'system',
 19 |   resolvedTheme: 'light',
 20 |   setTheme: () => null,
 21 | };
 22 | 
 23 | const ThemeProviderContext = createContext<ThemeProviderState>(initialState);
 24 | 
 25 | export function ThemeProvider({
 26 |   children,
 27 |   defaultTheme = 'system',
 28 |   storageKey = 'venzip-ui-theme',
 29 |   ...props
 30 | }: ThemeProviderProps) {
 31 |   const [theme, setTheme] = useState<Theme>(
 32 |     () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
 33 |   );
 34 | 
 35 |   // Track the resolved theme for reactive updates
 36 |   const [resolvedTheme, setResolvedTheme] = useState<'light' | 'dark'>(() => {
 37 |     if (typeof window === 'undefined') return 'light';
 38 |     
 39 |     if (theme === 'system') {
 40 |       return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
 41 |     }
 42 |     return theme as 'light' | 'dark';
 43 |   });
 44 | 
 45 |   useEffect(() => {
 46 |     const root = window.document.documentElement;
 47 | 
 48 |     // Add theme transition class temporarily
 49 |     root.classList.add('theme-transitioning');
 50 |     
 51 |     root.classList.remove('light', 'dark');
 52 | 
 53 |     if (theme === 'system') {
 54 |       const systemTheme = window.matchMedia('(prefers-color-scheme: dark)')
 55 |         .matches
 56 |         ? 'dark'
 57 |         : 'light';
 58 | 
 59 |       root.classList.add(systemTheme);
 60 |       setResolvedTheme(systemTheme);
 61 |       return;
 62 |     }
 63 | 
 64 |     root.classList.add(theme);
 65 |     setResolvedTheme(theme as 'light' | 'dark');
 66 |     
 67 |     // Remove transition class after a brief delay
 68 |     const timer = setTimeout(() => {
 69 |       root.classList.remove('theme-transitioning');
 70 |     }, 300);
 71 |     
 72 |     return () => clearTimeout(timer);
 73 |   }, [theme]);
 74 | 
 75 |   // Listen for system theme changes when theme is set to 'system'
 76 |   useEffect(() => {
 77 |     if (theme !== 'system') return;
 78 | 
 79 |     const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
 80 |     
 81 |     const handleChange = () => {
 82 |       const root = window.document.documentElement;
 83 |       root.classList.add('theme-transitioning');
 84 |       root.classList.remove('light', 'dark');
 85 |       
 86 |       const systemTheme = mediaQuery.matches ? 'dark' : 'light';
 87 |       root.classList.add(systemTheme);
 88 |       setResolvedTheme(systemTheme);
 89 |       
 90 |       // Remove transition class after animation
 91 |       setTimeout(() => {
 92 |         root.classList.remove('theme-transitioning');
 93 |       }, 300);
 94 |     };
 95 | 
 96 |     mediaQuery.addEventListener('change', handleChange);
 97 |     return () => mediaQuery.removeEventListener('change', handleChange);
 98 |   }, [theme]);
 99 | 
100 |   const value = {
101 |     theme,
102 |     resolvedTheme,
103 |     setTheme: (theme: Theme) => {
104 |       localStorage.setItem(storageKey, theme);
105 |       setTheme(theme);
106 |     },
107 |   };
108 | 
109 |   return (
110 |     <ThemeProviderContext.Provider {...props} value={value}>
111 |       {children}
112 |     </ThemeProviderContext.Provider>
113 |   );
114 | }
115 | 
116 | export const useTheme = () => {
117 |   const context = useContext(ThemeProviderContext);
118 | 
119 |   if (context === undefined)
120 |     throw new Error('useTheme must be used within a ThemeProvider');
121 | 
122 |   return context;
123 | };


--------------------------------------------------------------------------------
/client/src/hooks/use-mobile.tsx:
--------------------------------------------------------------------------------
 1 | import * as React from "react"
 2 | 
 3 | const MOBILE_BREAKPOINT = 768
 4 | 
 5 | export function useIsMobile() {
 6 |   const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)
 7 | 
 8 |   React.useEffect(() => {
 9 |     const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
10 |     const onChange = () => {
11 |       setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
12 |     }
13 |     mql.addEventListener("change", onChange)
14 |     setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
15 |     return () => mql.removeEventListener("change", onChange)
16 |   }, [])
17 | 
18 |   return !!isMobile
19 | }
20 | 


--------------------------------------------------------------------------------
/client/src/hooks/use-toast.ts:
--------------------------------------------------------------------------------
  1 | import * as React from "react"
  2 | 
  3 | import type {
  4 |   ToastActionElement,
  5 |   ToastProps,
  6 | } from "@/components/ui/toast"
  7 | 
  8 | const TOAST_LIMIT = 1
  9 | const TOAST_REMOVE_DELAY = 1000000
 10 | 
 11 | type ToasterToast = ToastProps & {
 12 |   id: string
 13 |   title?: React.ReactNode
 14 |   description?: React.ReactNode
 15 |   action?: ToastActionElement
 16 | }
 17 | 
 18 | const actionTypes = {
 19 |   ADD_TOAST: "ADD_TOAST",
 20 |   UPDATE_TOAST: "UPDATE_TOAST",
 21 |   DISMISS_TOAST: "DISMISS_TOAST",
 22 |   REMOVE_TOAST: "REMOVE_TOAST",
 23 | } as const
 24 | 
 25 | let count = 0
 26 | 
 27 | function genId() {
 28 |   count = (count + 1) % Number.MAX_SAFE_INTEGER
 29 |   return count.toString()
 30 | }
 31 | 
 32 | type ActionType = typeof actionTypes
 33 | 
 34 | type Action =
 35 |   | {
 36 |       type: ActionType["ADD_TOAST"]
 37 |       toast: ToasterToast
 38 |     }
 39 |   | {
 40 |       type: ActionType["UPDATE_TOAST"]
 41 |       toast: Partial<ToasterToast>
 42 |     }
 43 |   | {
 44 |       type: ActionType["DISMISS_TOAST"]
 45 |       toastId?: ToasterToast["id"]
 46 |     }
 47 |   | {
 48 |       type: ActionType["REMOVE_TOAST"]
 49 |       toastId?: ToasterToast["id"]
 50 |     }
 51 | 
 52 | interface State {
 53 |   toasts: ToasterToast[]
 54 | }
 55 | 
 56 | const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()
 57 | 
 58 | const addToRemoveQueue = (toastId: string) => {
 59 |   if (toastTimeouts.has(toastId)) {
 60 |     return
 61 |   }
 62 | 
 63 |   const timeout = setTimeout(() => {
 64 |     toastTimeouts.delete(toastId)
 65 |     dispatch({
 66 |       type: "REMOVE_TOAST",
 67 |       toastId: toastId,
 68 |     })
 69 |   }, TOAST_REMOVE_DELAY)
 70 | 
 71 |   toastTimeouts.set(toastId, timeout)
 72 | }
 73 | 
 74 | export const reducer = (state: State, action: Action): State => {
 75 |   switch (action.type) {
 76 |     case "ADD_TOAST":
 77 |       return {
 78 |         ...state,
 79 |         toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
 80 |       }
 81 | 
 82 |     case "UPDATE_TOAST":
 83 |       return {
 84 |         ...state,
 85 |         toasts: state.toasts.map((t) =>
 86 |           t.id === action.toast.id ? { ...t, ...action.toast } : t
 87 |         ),
 88 |       }
 89 | 
 90 |     case "DISMISS_TOAST": {
 91 |       const { toastId } = action
 92 | 
 93 |       // ! Side effects ! - This could be extracted into a dismissToast() action,
 94 |       // but I'll keep it here for simplicity
 95 |       if (toastId) {
 96 |         addToRemoveQueue(toastId)
 97 |       } else {
 98 |         state.toasts.forEach((toast) => {
 99 |           addToRemoveQueue(toast.id)
100 |         })
101 |       }
102 | 
103 |       return {
104 |         ...state,
105 |         toasts: state.toasts.map((t) =>
106 |           t.id === toastId || toastId === undefined
107 |             ? {
108 |                 ...t,
109 |                 open: false,
110 |               }
111 |             : t
112 |         ),
113 |       }
114 |     }
115 |     case "REMOVE_TOAST":
116 |       if (action.toastId === undefined) {
117 |         return {
118 |           ...state,
119 |           toasts: [],
120 |         }
121 |       }
122 |       return {
123 |         ...state,
124 |         toasts: state.toasts.filter((t) => t.id !== action.toastId),
125 |       }
126 |   }
127 | }
128 | 
129 | const listeners: Array<(state: State) => void> = []
130 | 
131 | let memoryState: State = { toasts: [] }
132 | 
133 | function dispatch(action: Action) {
134 |   memoryState = reducer(memoryState, action)
135 |   listeners.forEach((listener) => {
136 |     listener(memoryState)
137 |   })
138 | }
139 | 
140 | type Toast = Omit<ToasterToast, "id">
141 | 
142 | function toast({ ...props }: Toast) {
143 |   const id = genId()
144 | 
145 |   const update = (props: ToasterToast) =>
146 |     dispatch({
147 |       type: "UPDATE_TOAST",
148 |       toast: { ...props, id },
149 |     })
150 |   const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })
151 | 
152 |   dispatch({
153 |     type: "ADD_TOAST",
154 |     toast: {
155 |       ...props,
156 |       id,
157 |       open: true,
158 |       onOpenChange: (open) => {
159 |         if (!open) dismiss()
160 |       },
161 |     },
162 |   })
163 | 
164 |   return {
165 |     id: id,
166 |     dismiss,
167 |     update,
168 |   }
169 | }
170 | 
171 | function useToast() {
172 |   const [state, setState] = React.useState<State>(memoryState)
173 | 
174 |   React.useEffect(() => {
175 |     listeners.push(setState)
176 |     return () => {
177 |       const index = listeners.indexOf(setState)
178 |       if (index > -1) {
179 |         listeners.splice(index, 1)
180 |       }
181 |     }
182 |   }, [state])
183 | 
184 |   return {
185 |     ...state,
186 |     toast,
187 |     dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
188 |   }
189 | }
190 | 
191 | export { useToast, toast }
192 | 


--------------------------------------------------------------------------------
/client/src/hooks/useAuth.ts:
--------------------------------------------------------------------------------
 1 | import { useQuery, useQueryClient } from "@tanstack/react-query";
 2 | import type { User } from "@shared/schema";
 3 | 
 4 | export function useAuth() {
 5 |   const queryClient = useQueryClient();
 6 | 
 7 |   const { data: user, isLoading, error } = useQuery<User | null>({
 8 |     queryKey: ["/api/auth/user"],
 9 |     retry: false,
10 |     refetchOnMount: true, // Always check on mount for onboarding status
11 |     staleTime: 1 * 60 * 1000, // Reduce to 1 minute for better onboarding tracking
12 |     refetchOnWindowFocus: false,
13 |     refetchOnReconnect: false,
14 |     gcTime: 5 * 60 * 1000, // Keep in cache for 5 minutes
15 |     enabled: true,
16 |   });
17 | 
18 |   const logout = async () => {
19 |     try {
20 |       // Clear auth cache first
21 |       queryClient.setQueryData(["/api/auth/user"], null);
22 |       queryClient.clear();
23 | 
24 |       // Redirect to logout endpoint (this will handle server-side logout and redirect)
25 |       window.location.href = "/api/logout";
26 |     } catch (error) {
27 |       console.error("Logout error:", error);
28 |       // Force redirect even if there's an error
29 |       window.location.href = "/api/logout";
30 |     }
31 |   };
32 | 
33 |   return {
34 |     user,
35 |     isLoading,
36 |     isAuthenticated: !!user,
37 |     error,
38 |     logout,
39 |   };
40 | }


--------------------------------------------------------------------------------
/client/src/hooks/usePagination.ts:
--------------------------------------------------------------------------------
  1 | import { useState, useCallback } from 'react';
  2 | 
  3 | export interface PaginationState {
  4 |   limit: number;
  5 |   offset: number;
  6 |   page: number;
  7 | }
  8 | 
  9 | export interface PaginationResponse<T> {
 10 |   items: T[];
 11 |   pagination: {
 12 |     total: number;
 13 |     limit: number;
 14 |     offset: number;
 15 |     hasMore: boolean;
 16 |     page: number;
 17 |     totalPages: number;
 18 |   };
 19 | }
 20 | 
 21 | export interface UsePaginationOptions {
 22 |   initialLimit?: number;
 23 |   maxLimit?: number;
 24 | }
 25 | 
 26 | export function usePagination(options: UsePaginationOptions = {}) {
 27 |   const { initialLimit = 20, maxLimit = 100 } = options;
 28 |   
 29 |   const [paginationState, setPaginationState] = useState<PaginationState>({
 30 |     limit: initialLimit,
 31 |     offset: 0,
 32 |     page: 1,
 33 |   });
 34 | 
 35 |   const setPage = useCallback((page: number) => {
 36 |     setPaginationState(prev => ({
 37 |       ...prev,
 38 |       page: Math.max(1, page),
 39 |       offset: (Math.max(1, page) - 1) * prev.limit,
 40 |     }));
 41 |   }, []);
 42 | 
 43 |   const setLimit = useCallback((limit: number) => {
 44 |     const validLimit = Math.min(Math.max(1, limit), maxLimit);
 45 |     setPaginationState(prev => ({
 46 |       ...prev,
 47 |       limit: validLimit,
 48 |       offset: 0, // Reset to first page when changing limit
 49 |       page: 1,
 50 |     }));
 51 |   }, [maxLimit]);
 52 | 
 53 |   const nextPage = useCallback(() => {
 54 |     setPaginationState(prev => ({
 55 |       ...prev,
 56 |       page: prev.page + 1,
 57 |       offset: prev.page * prev.limit,
 58 |     }));
 59 |   }, []);
 60 | 
 61 |   const prevPage = useCallback(() => {
 62 |     setPaginationState(prev => ({
 63 |       ...prev,
 64 |       page: Math.max(1, prev.page - 1),
 65 |       offset: Math.max(0, (prev.page - 2) * prev.limit),
 66 |     }));
 67 |   }, []);
 68 | 
 69 |   const reset = useCallback(() => {
 70 |     setPaginationState({
 71 |       limit: initialLimit,
 72 |       offset: 0,
 73 |       page: 1,
 74 |     });
 75 |   }, [initialLimit]);
 76 | 
 77 |   const goToFirstPage = useCallback(() => {
 78 |     setPaginationState(prev => ({
 79 |       ...prev,
 80 |       page: 1,
 81 |       offset: 0,
 82 |     }));
 83 |   }, []);
 84 | 
 85 |   const goToLastPage = useCallback((totalPages: number) => {
 86 |     setPaginationState(prev => ({
 87 |       ...prev,
 88 |       page: Math.max(1, totalPages),
 89 |       offset: Math.max(0, (totalPages - 1) * prev.limit),
 90 |     }));
 91 |   }, []);
 92 | 
 93 |   // Get query parameters for API calls
 94 |   const getQueryParams = useCallback(() => {
 95 |     return {
 96 |       limit: paginationState.limit,
 97 |       offset: paginationState.offset,
 98 |     };
 99 |   }, [paginationState]);
100 | 
101 |   // Build URL search params
102 |   const getUrlSearchParams = useCallback((additionalParams: Record<string, string> = {}) => {
103 |     const params = new URLSearchParams();
104 |     params.set('limit', paginationState.limit.toString());
105 |     params.set('offset', paginationState.offset.toString());
106 |     
107 |     Object.entries(additionalParams).forEach(([key, value]) => {
108 |       if (value) {
109 |         params.set(key, value);
110 |       }
111 |     });
112 |     
113 |     return params;
114 |   }, [paginationState]);
115 | 
116 |   return {
117 |     // State
118 |     ...paginationState,
119 |     
120 |     // Actions
121 |     setPage,
122 |     setLimit,
123 |     nextPage,
124 |     prevPage,
125 |     reset,
126 |     goToFirstPage,
127 |     goToLastPage,
128 |     
129 |     // Helpers
130 |     getQueryParams,
131 |     getUrlSearchParams,
132 |   };
133 | }
134 | 
135 | // Pagination info component helper
136 | export function getPaginationInfo(response: PaginationResponse<any>) {
137 |   const { pagination } = response;
138 |   const startItem = pagination.offset + 1;
139 |   const endItem = Math.min(pagination.offset + pagination.limit, pagination.total);
140 |   
141 |   return {
142 |     startItem,
143 |     endItem,
144 |     totalItems: pagination.total,
145 |     currentPage: pagination.page,
146 |     totalPages: pagination.totalPages,
147 |     hasNextPage: pagination.hasMore,
148 |     hasPrevPage: pagination.page > 1,
149 |     isFirstPage: pagination.page === 1,
150 |     isLastPage: pagination.page === pagination.totalPages,
151 |   };
152 | }


--------------------------------------------------------------------------------
/client/src/hooks/useSummary.ts:
--------------------------------------------------------------------------------
 1 | // client/src/hooks/useSummary.ts
 2 | import { useQuery } from "@tanstack/react-query";
 3 | import { apiRequest } from "@/lib/queryClient";
 4 | 
 5 | export function useSummary() {
 6 |   return useQuery({
 7 |     queryKey: ["/api/summary"],
 8 |     queryFn: async () => {
 9 |       try {
10 |         const res = await apiRequest("GET", "/api/summary");
11 |         if (!res.ok) {
12 |           console.warn("Summary API failed:", res.status, res.statusText);
13 |           
14 |           // Handle specific error codes
15 |           if (res.status === 401) {
16 |             throw new Error("Authentication required");
17 |           } else if (res.status === 403) {
18 |             throw new Error("Access denied");
19 |           } else if (res.status >= 500) {
20 |             throw new Error("Server error - please try again");
21 |           } else {
22 |             throw new Error(`Failed to fetch summary: ${res.status}`);
23 |           }
24 |         }
25 |         
26 |         const data = await res.json();
27 |         
28 |         // Validate and sanitize data structure
29 |         const sanitizedData = {
30 |           compliancePercent: Math.max(0, Math.min(100, data.compliancePercent || 0)),
31 |           gaps: Array.isArray(data.gaps) ? data.gaps.filter(gap => gap && gap.id && gap.title) : [],
32 |           stats: {
33 |             uploads: Math.max(0, data.stats?.uploads || 0),
34 |             conversations: Math.max(0, data.stats?.conversations || 0),
35 |             tasksOpenHigh: Math.max(0, data.stats?.tasksOpenHigh || 0),
36 |             risksHigh: Math.max(0, data.stats?.risksHigh || 0),
37 |           },
38 |           recentActivity: Array.isArray(data.recentActivity) ? 
39 |             data.recentActivity.filter(activity => activity && activity.id && activity.action) : [],
40 |           hasData: data.compliancePercent > 0 || (data.gaps && data.gaps.length > 0) || 
41 |                    (data.stats && Object.values(data.stats).some(val => val > 0)),
42 |           error: data.error,
43 |           lastUpdated: new Date().toISOString()
44 |         };
45 |         
46 |         console.log("Summary data loaded:", sanitizedData);
47 |         return sanitizedData;
48 |       } catch (error) {
49 |         console.error("Error fetching summary:", error);
50 |         
51 |         // Return detailed error information for debugging
52 |         const fallbackData = {
53 |           compliancePercent: 0,
54 |           gaps: [],
55 |           stats: {
56 |             uploads: 0,
57 |             conversations: 0,
58 |             tasksOpenHigh: 0,
59 |             risksHigh: 0,
60 |           },
61 |           recentActivity: [],
62 |           hasData: false,
63 |           error: error instanceof Error ? error.message : "Unknown error",
64 |           lastUpdated: new Date().toISOString()
65 |         };
66 |         
67 |         // Don't throw in fallback mode - return error data instead
68 |         if (error instanceof Error && error.message.includes("Authentication")) {
69 |           throw error; // Re-throw auth errors
70 |         }
71 |         
72 |         return fallbackData;
73 |       }
74 |     },
75 |     refetchOnWindowFocus: false,
76 |     retry: (failureCount, error) => {
77 |       // Don't retry auth errors
78 |       if (error instanceof Error && error.message.includes("Authentication")) {
79 |         return false;
80 |       }
81 |       // Retry up to 3 times for other errors
82 |       return failureCount < 3;
83 |     },
84 |     retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 10000),
85 |     staleTime: 30000,
86 |     gcTime: 5 * 60 * 1000, // Keep in cache for 5 minutes
87 |   });
88 | }


--------------------------------------------------------------------------------
/client/src/hooks/useTheme.ts:
--------------------------------------------------------------------------------
 1 | import { useTheme as useThemeContext } from '@/contexts/ThemeContext';
 2 | 
 3 | export function useTheme() {
 4 |   const context = useThemeContext();
 5 |   
 6 |   if (!context) {
 7 |     throw new Error('useTheme must be used within a ThemeProvider');
 8 |   }
 9 | 
10 |   const { theme, resolvedTheme, setTheme } = context;
11 | 
12 |   const toggleTheme = () => {
13 |     if (theme === 'light') {
14 |       setTheme('dark');
15 |     } else if (theme === 'dark') {
16 |       setTheme('light');
17 |     } else {
18 |       // If system, toggle to the opposite of current system preference
19 |       const systemIsDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
20 |       setTheme(systemIsDark ? 'light' : 'dark');
21 |     }
22 |   };
23 | 
24 |   return {
25 |     theme,
26 |     resolvedTheme,
27 |     setTheme,
28 |     toggleTheme,
29 |     isDark: resolvedTheme === 'dark',
30 |     isLight: resolvedTheme === 'light',
31 |     isSystem: theme === 'system'
32 |   };
33 | }


--------------------------------------------------------------------------------
/client/src/hooks/useTour.ts:
--------------------------------------------------------------------------------
 1 | import { createContext, useContext } from 'react';
 2 | 
 3 | export interface TourStep {
 4 |   target: string;
 5 |   title: string;
 6 |   content: string;
 7 |   placement?: 'top' | 'bottom' | 'left' | 'right' | 'center';
 8 |   action?: 'click' | 'navigate' | 'wait';
 9 |   prerequisites?: string[];
10 |   disableBeacon?: boolean;
11 |   showSkip?: boolean;
12 |   offset?: number;
13 |   // Enhanced tour functionality
14 |   navigateTo?: string;
15 |   fallbackTarget?: string;
16 |   skipCondition?: () => boolean;
17 |   onBeforeStep?: () => void;
18 |   onAfterStep?: () => void;
19 | }
20 | 
21 | export interface TourState {
22 |   isActive: boolean;
23 |   currentStep: number;
24 |   totalSteps: number;
25 |   completedTours: string[];
26 |   currentTourId: string | null;
27 |   isNavigating?: boolean;
28 |   userPreferences: {
29 |     autoStart: boolean;
30 |     skipTutorials: boolean;
31 |     hasSeenWelcome: boolean;
32 |   };
33 | }
34 | 
35 | export interface TourContextType {
36 |   state: TourState;
37 |   startTour: (tourId: string, steps: TourStep[]) => void;
38 |   nextStep: () => void;
39 |   previousStep: () => void;
40 |   skipTour: () => void;
41 |   endTour: () => void;
42 |   setUserPreference: (key: keyof TourState['userPreferences'], value: boolean) => void;
43 |   markTourCompleted: (tourId: string) => void;
44 |   isTourCompleted: (tourId: string) => boolean;
45 |   getCurrentStep: () => TourStep | null;
46 | }
47 | 
48 | export const TourContext = createContext<TourContextType | null>(null);
49 | 
50 | export const useTour = () => {
51 |   const context = useContext(TourContext);
52 |   if (!context) {
53 |     throw new Error('useTour must be used within a TourProvider');
54 |   }
55 |   return context;
56 | };


--------------------------------------------------------------------------------
/client/src/lib/authUtils.ts:
--------------------------------------------------------------------------------
1 | export function isUnauthorizedError(error: Error): boolean {
2 |   return /^401: .*Unauthorized/.test(error.message);
3 | }


--------------------------------------------------------------------------------
/client/src/lib/queryClient.ts:
--------------------------------------------------------------------------------
 1 | import { QueryClient, QueryFunction } from "@tanstack/react-query";
 2 | 
 3 | async function throwIfResNotOk(res: Response) {
 4 |   if (!res.ok) {
 5 |     const text = (await res.text()) || res.statusText;
 6 |     throw new Error(`${res.status}: ${text}`);
 7 |   }
 8 | }
 9 | 
10 | export async function apiRequest(
11 |   method: string,
12 |   url: string,
13 |   data?: unknown | undefined,
14 | ): Promise<Response> {
15 |   const res = await fetch(url, {
16 |     method,
17 |     headers: data ? { "Content-Type": "application/json" } : {},
18 |     body: data ? JSON.stringify(data) : undefined,
19 |     credentials: "include",
20 |   });
21 | 
22 |   await throwIfResNotOk(res);
23 |   return res;
24 | }
25 | 
26 | type UnauthorizedBehavior = "returnNull" | "throw";
27 | export const getQueryFn: <T>(options: {
28 |   on401: UnauthorizedBehavior;
29 | }) => QueryFunction<T> =
30 |   ({ on401: unauthorizedBehavior }) =>
31 |   async ({ queryKey }) => {
32 |     const res = await fetch(queryKey.join("/") as string, {
33 |       credentials: "include",
34 |     });
35 | 
36 |     if (unauthorizedBehavior === "returnNull" && res.status === 401) {
37 |       return null;
38 |     }
39 | 
40 |     await throwIfResNotOk(res);
41 |     return await res.json();
42 |   };
43 | 
44 | export const queryClient = new QueryClient({
45 |   defaultOptions: {
46 |     queries: {
47 |       queryFn: getQueryFn({ on401: "returnNull" }),
48 |       refetchInterval: false,
49 |       refetchOnWindowFocus: false,
50 |       staleTime: 30 * 1000, // 30 seconds
51 |       retry: (failureCount, error) => {
52 |         // Don't retry on auth errors
53 |         if (error && error.message.includes('401')) {
54 |           return false;
55 |         }
56 |         return failureCount < 1;
57 |       },
58 |       networkMode: 'online',
59 |     },
60 |     mutations: {
61 |       retry: false,
62 |     },
63 |   },
64 | });
65 | 


--------------------------------------------------------------------------------
/client/src/lib/utils.ts:
--------------------------------------------------------------------------------
1 | import { clsx, type ClassValue } from "clsx"
2 | import { twMerge } from "tailwind-merge"
3 | 
4 | export function cn(...inputs: ClassValue[]) {
5 |   return twMerge(clsx(inputs))
6 | }
7 | 


--------------------------------------------------------------------------------
/client/src/main.tsx:
--------------------------------------------------------------------------------
1 | import { createRoot } from "react-dom/client";
2 | import App from "./App";
3 | import "./index.css";
4 | 
5 | createRoot(document.getElementById("root")!).render(<App />);
6 | 


--------------------------------------------------------------------------------
/client/src/pages/compliance-insights.tsx:
--------------------------------------------------------------------------------
 1 | import { GapDetection } from '@/components/compliance/GapDetection';
 2 | import { ProgressTracking } from '@/components/compliance/ProgressTracking';
 3 | import { ReportGenerator } from '@/components/reports/ReportGenerator';
 4 | 
 5 | export default function ComplianceInsights() {
 6 |   return (
 7 |     <div className="container mx-auto p-6 space-y-8 max-w-7xl">
 8 |       {/* Header */}
 9 |       <div className="glass-card p-8 animate-fadeInUp">
10 |         <div className="flex items-center justify-between">
11 |           <div>
12 |             <h1 className="text-4xl md:text-5xl font-extrabold text-gray-900 mb-4 tracking-tight">
13 |               Compliance <span className="text-gradient-primary bg-clip-text text-transparent bg-gradient-hero animate-gradient-x">Insights</span>
14 |             </h1>
15 |             <p className="text-xl text-gray-600 leading-relaxed">
16 |               Track progress, identify gaps, and monitor compliance velocity across all frameworks
17 |             </p>
18 |           </div>
19 |         </div>
20 |       </div>
21 | 
22 |       {/* Progress Tracking */}
23 |       <div className="animate-fadeInUp" style={{animationDelay: '0.1s'}}>
24 |         <ProgressTracking />
25 |       </div>
26 | 
27 |       {/* Gap Detection */}
28 |       <div className="animate-fadeInUp" style={{animationDelay: '0.2s'}}>
29 |         <GapDetection />
30 |       </div>
31 | 
32 |       {/* Report Generation */}
33 |       <div className="animate-fadeInUp" style={{animationDelay: '0.3s'}}>
34 |         <ReportGenerator />
35 |       </div>
36 |     </div>
37 |   );
38 | }


--------------------------------------------------------------------------------
/client/src/pages/documents.tsx:
--------------------------------------------------------------------------------
 1 | // client/src/pages/documents.tsx
 2 | import FileUpload from "@/components/file-upload";
 3 | import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 4 | import LazyAIChat from "@/components/LazyAIChat";
 5 | import { FileText, Upload } from "lucide-react";
 6 | 
 7 | export default function Documents() {
 8 |   return (
 9 |     <>
10 |       <div className="pt-16 min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-teal-50">
11 |         <div className="max-w-5xl mx-auto px-4 py-12 grid gap-6">
12 |           <FileUpload />
13 | 
14 |           {/* Placeholder: future list of uploaded docs */}
15 |           <Card className="glass-card">
16 |             <CardHeader>
17 |               <CardTitle className="flex items-center gap-2">
18 |                 <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
19 |                   <FileText className="h-4 w-4 text-blue-600" />
20 |                 </div>
21 |                 Documents
22 |               </CardTitle>
23 |             </CardHeader>
24 |             <CardContent className="text-center py-12">
25 |               <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
26 |                 <Upload className="h-8 w-8 text-gray-400" />
27 |               </div>
28 |               <p className="text-sm text-gray-500 mb-2">Your recent uploads will appear here</p>
29 |               <p className="text-xs text-gray-400">Upload documents using the form above to get started</p>
30 |             </CardContent>
31 |           </Card>
32 |         </div>
33 |       </div>
34 |       <LazyAIChat />
35 |     </>
36 |   );
37 | }


--------------------------------------------------------------------------------
/client/src/pages/evidence.tsx:
--------------------------------------------------------------------------------
 1 | import EvidenceMappingDashboard from "@/components/evidence-mapping-dashboard";
 2 | import LazyAIChat from "@/components/LazyAIChat";
 3 | import { Shield, Brain, MapPin, Target, CheckCircle } from "lucide-react";
 4 | 
 5 | export default function Evidence() {
 6 |   return (
 7 |     <>
 8 |       <div className="pt-16 min-h-screen bg-gradient-to-br from-gray-50/80 via-white/50 to-venzip-primary/5 relative overflow-hidden">
 9 |         {/* Background decoration */}
10 |         <div className="absolute inset-0 bg-dot-pattern opacity-5"></div>
11 |         <div className="absolute top-20 right-20 w-96 h-96 bg-gradient-to-br from-venzip-primary/10 to-transparent rounded-full blur-3xl animate-float"></div>
12 |         <div className="absolute bottom-20 left-20 w-80 h-80 bg-gradient-to-br from-venzip-accent/10 to-transparent rounded-full blur-2xl animate-float" style={{animationDelay: '3s'}}></div>
13 |         <div className="absolute top-1/2 left-1/2 w-64 h-64 bg-gradient-to-br from-venzip-secondary/8 to-transparent rounded-full blur-3xl animate-float" style={{animationDelay: '1.5s'}}></div>
14 | 
15 |         <div className="max-w-7xl mx-auto px-6 py-16 relative z-10">
16 |           {/* Enhanced Page Header */}
17 |           <div className="mb-12 text-center animate-fadeInUp">
18 |             <h1 className="text-4xl md:text-5xl font-extrabold text-gray-900 mb-4 tracking-tight">
19 |               Evidence <span className="text-gradient-primary bg-clip-text text-transparent bg-gradient-hero animate-gradient-x">Mapping</span>
20 |             </h1>
21 |             <p className="text-xl text-gray-600 max-w-2xl mx-auto leading-relaxed mb-8">
22 |               AI-powered document mapping to compliance requirements with intelligent analysis
23 |             </p>
24 | 
25 |             {/* Feature highlights */}
26 |             <div className="flex flex-wrap justify-center items-center gap-6 mb-8">
27 |               <div className="flex items-center gap-2 glass-card px-4 py-2 rounded-xl border-0 shadow-lg animate-fadeInUp" style={{animationDelay: '0.1s'}}>
28 |                 <div className="w-8 h-8 bg-gradient-to-br from-venzip-primary/20 to-venzip-primary/10 rounded-lg flex items-center justify-center">
29 |                   <Shield className="h-4 w-4 text-venzip-primary" />
30 |                 </div>
31 |                 <span className="text-sm font-medium text-gray-700">Automated Compliance Analysis</span>
32 |               </div>
33 |               <div className="flex items-center gap-2 glass-card px-4 py-2 rounded-xl border-0 shadow-lg animate-fadeInUp" style={{animationDelay: '0.2s'}}>
34 |                 <div className="w-8 h-8 bg-gradient-to-br from-venzip-secondary/20 to-venzip-secondary/10 rounded-lg flex items-center justify-center">
35 |                   <MapPin className="h-4 w-4 text-venzip-secondary" />
36 |                 </div>
37 |                 <span className="text-sm font-medium text-gray-700">Cross-Framework Mapping</span>
38 |               </div>
39 |               <div className="flex items-center gap-2 glass-card px-4 py-2 rounded-xl border-0 shadow-lg animate-fadeInUp" style={{animationDelay: '0.3s'}}>
40 |                 <div className="w-8 h-8 bg-gradient-to-br from-venzip-accent/20 to-venzip-accent/10 rounded-lg flex items-center justify-center">
41 |                   <Brain className="h-4 w-4 text-venzip-accent" />
42 |                 </div>
43 |                 <span className="text-sm font-medium text-gray-700">AI Quality Scoring</span>
44 |               </div>
45 |               <div className="flex items-center gap-2 glass-card px-4 py-2 rounded-xl border-0 shadow-lg animate-fadeInUp" style={{animationDelay: '0.4s'}}>
46 |                 <div className="w-8 h-8 bg-gradient-to-br from-success-green/20 to-success-green/10 rounded-lg flex items-center justify-center">
47 |                   <Target className="h-4 w-4 text-success-green" />
48 |                 </div>
49 |                 <span className="text-sm font-medium text-gray-700">Smart Gap Detection</span>
50 |               </div>
51 |             </div>
52 |           </div>
53 | 
54 |           {/* Enhanced Dashboard Content */}
55 |           <div className="animate-fadeInUp" style={{animationDelay: '0.5s'}}>
56 |             <EvidenceMappingDashboard />
57 |           </div>
58 |         </div>
59 |       </div>
60 |       <LazyAIChat />
61 |     </>
62 |   );
63 | }


--------------------------------------------------------------------------------
/client/src/pages/home.tsx:
--------------------------------------------------------------------------------
  1 | import { useAuth } from "@/hooks/useAuth";
  2 | import type { User } from "@shared/schema";
  3 | import { useQuery } from "@tanstack/react-query";
  4 | import { useLocation } from "wouter";
  5 | import { Card, CardContent } from "@/components/ui/card";
  6 | import { Button } from "@/components/ui/button";
  7 | import { 
  8 |   Settings, 
  9 |   BarChart3, 
 10 |   Shield, 
 11 |   Loader2, 
 12 |   ArrowRight,
 13 |   Target,
 14 |   Users
 15 | } from "lucide-react";
 16 | 
 17 | export default function Home() {
 18 |   const { user } = useAuth() as { user: User | undefined, isLoading: boolean, isAuthenticated: boolean };
 19 |   const [location, setLocation] = useLocation();
 20 | 
 21 |   // Check if user has company profile
 22 |   const { data: company, isLoading: companyLoading } = useQuery({
 23 |     queryKey: ["/api/company"],
 24 |     retry: 1,
 25 |   });
 26 | 
 27 |   // Show loading state while checking company status
 28 |   if (companyLoading) {
 29 |     return (
 30 |       <div className="max-w-4xl mx-auto p-6 pt-20">
 31 |         <Card className="bg-white/80 backdrop-blur-sm">
 32 |           <CardContent className="p-8 text-center">
 33 |             <div className="w-6 h-6 border-2 border-venzip-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
 34 |             <p className="text-gray-600">Setting up your workspace...</p>
 35 |           </CardContent>
 36 |         </Card>
 37 |       </div>
 38 |     );
 39 |   }
 40 | 
 41 |   const hasCompany = company && !company.error;
 42 |   const hasSelectedFrameworks = hasCompany && company.selectedFrameworks && company.selectedFrameworks.length > 0;
 43 | 
 44 |   return (
 45 |     <div className="max-w-4xl mx-auto p-6">
 46 |       <Card className="glass-card">
 47 |         <CardContent className="p-12 text-center">
 48 |           <div className="w-20 h-20 mx-auto mb-8 bg-gradient-primary rounded-full flex items-center justify-center animate-float shadow-xl">
 49 |             <Shield className="h-10 w-10 text-white" />
 50 |           </div>
 51 | 
 52 |           <h1 className="text-4xl font-bold text-gray-900 mb-4">
 53 |             Welcome to Venzip, {user?.firstName || user?.email || 'User'}!
 54 |           </h1>
 55 | 
 56 |           <p className="text-xl text-gray-600 mb-8">
 57 |             {hasSelectedFrameworks 
 58 |               ? "Your compliance workspace is ready!" 
 59 |               : "Let's get your compliance program set up"}
 60 |           </p>
 61 | 
 62 |           {/* Setup progress indicators */}
 63 |           <div className="grid md:grid-cols-3 gap-6 mb-8">
 64 |             <div className={`p-6 rounded-xl ${hasCompany ? 'bg-green-50' : 'bg-white/50'}`}>
 65 |               <div className={`w-12 h-12 rounded-xl flex items-center justify-center mx-auto mb-4 ${
 66 |                 hasCompany ? 'bg-green-100' : 'bg-venzip-primary/20'
 67 |               }`}>
 68 |                 <Users className={`h-6 w-6 ${hasCompany ? 'text-green-600' : 'text-venzip-primary'}`} />
 69 |               </div>
 70 |               <h3 className="font-semibold mb-2">Company Profile</h3>
 71 |               <p className="text-sm text-gray-600">
 72 |                 {hasCompany ? "✓ Complete" : "Set up your organization"}
 73 |               </p>
 74 |             </div>
 75 | 
 76 |             <div className={`p-6 rounded-xl ${hasSelectedFrameworks ? 'bg-green-50' : 'bg-white/50'}`}>
 77 |               <div className={`w-12 h-12 rounded-xl flex items-center justify-center mx-auto mb-4 ${
 78 |                 hasSelectedFrameworks ? 'bg-green-100' : 'bg-venzip-accent/20'
 79 |               }`}>
 80 |                 <Target className={`h-6 w-6 ${hasSelectedFrameworks ? 'text-green-600' : 'text-venzip-accent'}`} />
 81 |               </div>
 82 |               <h3 className="font-semibold mb-2">Choose Frameworks</h3>
 83 |               <p className="text-sm text-gray-600">
 84 |                 {hasSelectedFrameworks ? "✓ Complete" : "Select compliance standards"}
 85 |               </p>
 86 |             </div>
 87 | 
 88 |             <div className="p-6 bg-white/50 rounded-xl">
 89 |               <div className="w-12 h-12 bg-success-green/20 rounded-xl flex items-center justify-center mx-auto mb-4">
 90 |                 <BarChart3 className="h-6 w-6 text-success-green" />
 91 |               </div>
 92 |               <h3 className="font-semibold mb-2">Start Tracking</h3>
 93 |               <p className="text-sm text-gray-600">Monitor compliance progress</p>
 94 |             </div>
 95 |           </div>
 96 | 
 97 |           <div className="flex justify-center space-x-4">
 98 |             {hasSelectedFrameworks ? (
 99 |               <Button 
100 |                 onClick={() => setLocation("/dashboard")}
101 |                 className="bg-gradient-primary hover:shadow-xl hover:scale-105 transition-all duration-300 text-white font-semibold px-8 py-3 rounded-xl flex items-center"
102 |               >
103 |                 <BarChart3 className="h-4 w-4 mr-2" />
104 |                 Go to Dashboard
105 |                 <ArrowRight className="h-4 w-4 ml-2" />
106 |               </Button>
107 |             ) : (
108 |               <>
109 |                 <Button 
110 |                   onClick={() => setLocation("/onboarding")}
111 |                   className="bg-gradient-primary hover:shadow-xl hover:scale-105 transition-all duration-300 text-white font-semibold px-8 py-3 rounded-xl flex items-center"
112 |                 >
113 |                   <Settings className="h-4 w-4 mr-2" />
114 |                   {hasCompany ? "Complete Setup" : "Start Setup"}
115 |                   <ArrowRight className="h-4 w-4 ml-2" />
116 |                 </Button>
117 | 
118 |                 <Button 
119 |                   onClick={() => setLocation("/dashboard")}
120 |                   variant="outline"
121 |                   className="hover:shadow-lg hover:scale-105 transition-all duration-300 font-semibold px-8 py-3 rounded-xl flex items-center"
122 |                 >
123 |                   <BarChart3 className="h-4 w-4 mr-2" />
124 |                   View Dashboard
125 |                 </Button>
126 |               </>
127 |             )}
128 |           </div>
129 |         </CardContent>
130 |       </Card>
131 |     </div>
132 |   );
133 | }


--------------------------------------------------------------------------------
/client/src/pages/not-found.tsx:
--------------------------------------------------------------------------------
 1 | import { Card, CardContent } from "@/components/ui/card";
 2 | import { AlertCircle } from "lucide-react";
 3 | 
 4 | export default function NotFound() {
 5 |   return (
 6 |     <div className="min-h-screen w-full flex items-center justify-center bg-gray-50">
 7 |       <Card className="w-full max-w-md mx-4">
 8 |         <CardContent className="pt-6">
 9 |           <div className="flex mb-4 gap-2">
10 |             <AlertCircle className="h-8 w-8 text-red-500" />
11 |             <h1 className="text-2xl font-bold text-gray-900">404 Page Not Found</h1>
12 |           </div>
13 | 
14 |           <p className="mt-4 text-sm text-gray-600">
15 |             Did you forget to add the page to the router?
16 |           </p>
17 |         </CardContent>
18 |       </Card>
19 |     </div>
20 |   );
21 | }
22 | 


--------------------------------------------------------------------------------
/client/src/pages/tasks.tsx:
--------------------------------------------------------------------------------
  1 | // client/src/pages/tasks.tsx
  2 | import { useState } from "react";
  3 | import { Dialog, DialogContent } from "@/components/ui/dialog";
  4 | // import Navigation from "@/components/navigation"; // Removed import
  5 | import LazyAIChat from "@/components/LazyAIChat";
  6 | import TaskList from "@/components/tasks/TaskList";
  7 | import TaskForm from "@/components/tasks/TaskForm";
  8 | import TaskDetails from "@/components/tasks/TaskDetails";
  9 | 
 10 | interface Task {
 11 |   id: string;
 12 |   title: string;
 13 |   description?: string;
 14 |   category: string;
 15 |   priority: 'low' | 'medium' | 'high' | 'critical';
 16 |   status: 'not_started' | 'in_progress' | 'under_review' | 'completed' | 'blocked';
 17 |   dueDate?: string;
 18 |   progressPercentage: number;
 19 |   framework: {
 20 |     id: string;
 21 |     name: string;
 22 |     displayName: string;
 23 |   };
 24 |   assignedTo?: {
 25 |     id: string;
 26 |     firstName: string;
 27 |     lastName: string;
 28 |     email: string;
 29 |   };
 30 |   tags: string[];
 31 | }
 32 | 
 33 | export default function TasksPage() {
 34 |   const [showCreateForm, setShowCreateForm] = useState(false);
 35 |   const [showEditForm, setShowEditForm] = useState(false);
 36 |   const [showTaskDetails, setShowTaskDetails] = useState(false);
 37 |   const [selectedTask, setSelectedTask] = useState<Task | null>(null);
 38 | 
 39 |   const handleCreateTask = () => {
 40 |     setShowCreateForm(true);
 41 |   };
 42 | 
 43 |   const handleEditTask = (task: Task) => {
 44 |     setSelectedTask(task);
 45 |     setShowEditForm(true);
 46 |   };
 47 | 
 48 |   const handleViewTask = (task: Task) => {
 49 |     setSelectedTask(task);
 50 |     setShowTaskDetails(true);
 51 |   };
 52 | 
 53 |   const handleFormSuccess = () => {
 54 |     setShowCreateForm(false);
 55 |     setShowEditForm(false);
 56 |     setSelectedTask(null);
 57 |   };
 58 | 
 59 |   const handleFormCancel = () => {
 60 |     setShowCreateForm(false);
 61 |     setShowEditForm(false);
 62 |     setSelectedTask(null);
 63 |   };
 64 | 
 65 |   const handleDetailsClose = () => {
 66 |     setShowTaskDetails(false);
 67 |     setSelectedTask(null);
 68 |   };
 69 | 
 70 |   return (
 71 |     <>
 72 |       {/* <Navigation /> */} {/* Removed Navigation component */}
 73 |       <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-teal-50">
 74 |         <div className="container mx-auto">
 75 |           <TaskList
 76 |             onCreateTask={handleCreateTask}
 77 |             onEditTask={handleEditTask}
 78 |             onViewTask={handleViewTask}
 79 |           />
 80 | 
 81 |           {/* Create Task Dialog */}
 82 |           <Dialog open={showCreateForm} onOpenChange={setShowCreateForm}>
 83 |             <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
 84 |               <TaskForm
 85 |                 onSuccess={handleFormSuccess}
 86 |                 onCancel={handleFormCancel}
 87 |               />
 88 |             </DialogContent>
 89 |           </Dialog>
 90 | 
 91 |           {/* Edit Task Dialog */}
 92 |           <Dialog open={showEditForm} onOpenChange={setShowEditForm}>
 93 |             <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
 94 |               {selectedTask && (
 95 |                 <TaskForm
 96 |                   task={{
 97 |                     ...selectedTask,
 98 |                     frameworkId: selectedTask.framework.id,
 99 |                     assignedTo: selectedTask.assignedTo?.email || undefined
100 |                   }}
101 |                   onSuccess={handleFormSuccess}
102 |                   onCancel={handleFormCancel}
103 |                 />
104 |               )}
105 |             </DialogContent>
106 |           </Dialog>
107 | 
108 |           {/* Task Details Dialog */}
109 |           <Dialog open={showTaskDetails} onOpenChange={setShowTaskDetails}>
110 |             <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
111 |               {selectedTask && (
112 |                 <TaskDetails
113 |                   task={selectedTask}
114 |                   onClose={handleDetailsClose}
115 |                   onEdit={handleEditTask}
116 |                 />
117 |               )}
118 |             </DialogContent>
119 |           </Dialog>
120 |         </div>
121 |       </div>
122 |       <LazyAIChat />
123 |     </>
124 |   );
125 | }


--------------------------------------------------------------------------------
/components.json:
--------------------------------------------------------------------------------
 1 | {
 2 |     "$schema": "https://ui.shadcn.com/schema.json",
 3 |     "style": "new-york",
 4 |     "rsc": false,
 5 |     "tsx": true,
 6 |     "tailwind": {
 7 |       "config": "tailwind.config.ts",
 8 |       "css": "client/src/index.css",
 9 |       "baseColor": "neutral",
10 |       "cssVariables": true,
11 |       "prefix": ""
12 |     },
13 |     "aliases": {
14 |       "components": "@/components",
15 |       "utils": "@/lib/utils",
16 |       "ui": "@/components/ui",
17 |       "lib": "@/lib",
18 |       "hooks": "@/hooks"
19 |     }
20 | }


--------------------------------------------------------------------------------
/drizzle.config.ts:
--------------------------------------------------------------------------------
 1 | import { defineConfig } from "drizzle-kit";
 2 | 
 3 | if (!process.env.DATABASE_URL) {
 4 |   throw new Error("DATABASE_URL, ensure the database is provisioned");
 5 | }
 6 | 
 7 | export default defineConfig({
 8 |   out: "./migrations",
 9 |   schema: "./shared/schema.ts",
10 |   dialect: "postgresql",
11 |   dbCredentials: {
12 |     url: process.env.DATABASE_URL,
13 |   },
14 | });
15 | 


--------------------------------------------------------------------------------
/package.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "name": "rest-express",
  3 |   "version": "1.0.0",
  4 |   "type": "module",
  5 |   "license": "MIT",
  6 |   "scripts": {
  7 |     "dev": "NODE_ENV=development tsx server/index.ts",
  8 |     "build": "vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist",
  9 |     "start": "NODE_ENV=production node dist/index.js",
 10 |     "check": "tsc",
 11 |     "db:push": "drizzle-kit push",
 12 |     "db:seed": "tsx server/seedData.ts",
 13 |     "db:migrate": "drizzle-kit migrate",
 14 |     "db:setup": "npm run db:push && npm run db:seed"
 15 |   },
 16 |   "dependencies": {
 17 |     "@anthropic-ai/sdk": "^0.37.0",
 18 |     "@google-cloud/storage": "^7.17.0",
 19 |     "@hookform/resolvers": "^3.10.0",
 20 |     "@jridgewell/trace-mapping": "^0.3.25",
 21 |     "@neondatabase/serverless": "^0.10.4",
 22 |     "@radix-ui/react-accordion": "^1.2.4",
 23 |     "@radix-ui/react-alert-dialog": "^1.1.7",
 24 |     "@radix-ui/react-aspect-ratio": "^1.1.3",
 25 |     "@radix-ui/react-avatar": "^1.1.4",
 26 |     "@radix-ui/react-checkbox": "^1.1.5",
 27 |     "@radix-ui/react-collapsible": "^1.1.4",
 28 |     "@radix-ui/react-context-menu": "^2.2.7",
 29 |     "@radix-ui/react-dialog": "^1.1.7",
 30 |     "@radix-ui/react-dropdown-menu": "^2.1.7",
 31 |     "@radix-ui/react-hover-card": "^1.1.7",
 32 |     "@radix-ui/react-label": "^2.1.3",
 33 |     "@radix-ui/react-menubar": "^1.1.7",
 34 |     "@radix-ui/react-navigation-menu": "^1.2.6",
 35 |     "@radix-ui/react-popover": "^1.1.7",
 36 |     "@radix-ui/react-progress": "^1.1.3",
 37 |     "@radix-ui/react-radio-group": "^1.2.4",
 38 |     "@radix-ui/react-scroll-area": "^1.2.4",
 39 |     "@radix-ui/react-select": "^2.1.7",
 40 |     "@radix-ui/react-separator": "^1.1.3",
 41 |     "@radix-ui/react-slider": "^1.2.4",
 42 |     "@radix-ui/react-slot": "^1.2.0",
 43 |     "@radix-ui/react-switch": "^1.1.4",
 44 |     "@radix-ui/react-tabs": "^1.1.4",
 45 |     "@radix-ui/react-toast": "^1.2.7",
 46 |     "@radix-ui/react-toggle": "^1.1.3",
 47 |     "@radix-ui/react-toggle-group": "^1.1.3",
 48 |     "@radix-ui/react-tooltip": "^1.2.0",
 49 |     "@reactour/tour": "^3.8.0",
 50 |     "@tanstack/react-query": "^5.60.5",
 51 |     "@types/memoizee": "^0.4.12",
 52 |     "@types/multer": "^2.0.0",
 53 |     "@types/passport-google-oauth20": "^2.0.16",
 54 |     "@types/pdfkit": "^0.17.3",
 55 |     "@uppy/aws-s3": "^4.3.2",
 56 |     "@uppy/core": "^4.5.3",
 57 |     "@uppy/dashboard": "^4.4.3",
 58 |     "@uppy/drag-drop": "^4.2.2",
 59 |     "@uppy/file-input": "^4.2.2",
 60 |     "@uppy/progress-bar": "^4.3.2",
 61 |     "@uppy/react": "^4.5.2",
 62 |     "@vercel/postgres": "^0.10.0",
 63 |     "class-variance-authority": "^0.7.1",
 64 |     "clsx": "^2.1.1",
 65 |     "cmdk": "^1.1.1",
 66 |     "connect-pg-simple": "^10.0.0",
 67 |     "date-fns": "^3.6.0",
 68 |     "drizzle-orm": "^0.39.1",
 69 |     "drizzle-zod": "^0.7.0",
 70 |     "embla-carousel-react": "^8.6.0",
 71 |     "express": "^4.21.2",
 72 |     "express-session": "^1.18.1",
 73 |     "framer-motion": "^11.13.1",
 74 |     "google-auth-library": "^10.3.0",
 75 |     "input-otp": "^1.4.2",
 76 |     "lucide-react": "^0.453.0",
 77 |     "memoizee": "^0.4.17",
 78 |     "memorystore": "^1.6.7",
 79 |     "multer": "^2.0.2",
 80 |     "next-themes": "^0.4.6",
 81 |     "openid-client": "^6.6.4",
 82 |     "passport": "^0.7.0",
 83 |     "passport-google-oauth20": "^2.0.0",
 84 |     "passport-local": "^1.0.0",
 85 |     "pdfjs-dist": "^5.4.149",
 86 |     "pdfkit": "^0.17.2",
 87 |     "puppeteer": "^24.19.0",
 88 |     "react": "^18.3.1",
 89 |     "react-day-picker": "^8.10.1",
 90 |     "react-dom": "^18.3.1",
 91 |     "react-hook-form": "^7.55.0",
 92 |     "react-icons": "^5.4.0",
 93 |     "react-resizable-panels": "^2.1.7",
 94 |     "recharts": "^2.15.2",
 95 |     "tailwind-merge": "^2.6.0",
 96 |     "tailwindcss-animate": "^1.0.7",
 97 |     "tw-animate-css": "^1.2.5",
 98 |     "vaul": "^1.1.2",
 99 |     "wouter": "^3.3.5",
100 |     "ws": "^8.18.0",
101 |     "zod": "^3.24.2",
102 |     "zod-validation-error": "^3.4.0"
103 |   },
104 |   "devDependencies": {
105 |     "@replit/vite-plugin-cartographer": "^0.3.0",
106 |     "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
107 |     "@tailwindcss/typography": "^0.5.15",
108 |     "@tailwindcss/vite": "^4.1.3",
109 |     "@types/connect-pg-simple": "^7.0.3",
110 |     "@types/express": "4.17.21",
111 |     "@types/express-session": "^1.18.0",
112 |     "@types/node": "20.16.11",
113 |     "@types/passport": "^1.0.16",
114 |     "@types/passport-local": "^1.0.38",
115 |     "@types/react": "^18.3.11",
116 |     "@types/react-dom": "^18.3.1",
117 |     "@types/ws": "^8.5.13",
118 |     "@vitejs/plugin-react": "^4.3.2",
119 |     "autoprefixer": "^10.4.20",
120 |     "drizzle-kit": "^0.30.4",
121 |     "esbuild": "^0.25.0",
122 |     "postcss": "^8.4.47",
123 |     "tailwindcss": "^3.4.17",
124 |     "tsx": "^4.19.1",
125 |     "typescript": "5.6.3",
126 |     "vite": "^5.4.19"
127 |   },
128 |   "optionalDependencies": {
129 |     "bufferutil": "^4.0.8"
130 |   }
131 | }
132 | 


--------------------------------------------------------------------------------
/postcss.config.js:
--------------------------------------------------------------------------------
1 | export default {
2 |   plugins: {
3 |     tailwindcss: {},
4 |     autoprefixer: {},
5 |   },
6 | }
7 | 


--------------------------------------------------------------------------------
/replit.md:
--------------------------------------------------------------------------------
 1 | # replit.md
 2 | 
 3 | ## Overview
 4 | 
 5 | Venzip is an AI-powered compliance and cybersecurity platform designed to simplify regulatory requirements for small to mid-sized businesses. The MVP demonstrates core functionality for automated compliance workflows across ISO 27001, SOC 2, GDPR, and HIPAA frameworks. The platform features real-time compliance dashboards with visual risk mapping, AI-driven document analysis using Claude, and an intuitive user experience for non-technical compliance teams.
 6 | 
 7 | ## User Preferences
 8 | 
 9 | Preferred communication style: Simple, everyday language.
10 | 
11 | ## System Architecture
12 | 
13 | ### Frontend Architecture
14 | - **React with TypeScript**: Modern component-based UI using functional components and hooks
15 | - **Vite**: Fast build tool and development server for optimal development experience
16 | - **Wouter**: Lightweight client-side routing solution
17 | - **TanStack Query**: Server state management for data fetching, caching, and synchronization
18 | - **Tailwind CSS + shadcn/ui**: Utility-first CSS framework with pre-built component library
19 | - **Design System**: Custom Venzip brand colors with glassmorphism effects and modern visual styling
20 | 
21 | ### Backend Architecture
22 | - **Express.js**: Node.js web framework handling API routes and middleware
23 | - **TypeScript**: Type-safe server-side development
24 | - **Drizzle ORM**: Type-safe database operations with PostgreSQL
25 | - **RESTful API**: Standard HTTP methods for CRUD operations on compliance resources
26 | - **Modular Route Structure**: Organized API endpoints for auth, companies, tasks, documents, risks, and chat
27 | 
28 | ### Authentication System
29 | - **Replit Authentication**: OAuth-based authentication integrated with Replit's identity provider
30 | - **Session Management**: PostgreSQL-backed session storage with express-session
31 | - **Passport.js**: Authentication middleware with OpenID Connect strategy
32 | - **Cookie-based Sessions**: Secure HTTP-only cookies with 7-day TTL
33 | 
34 | ### Data Storage
35 | - **PostgreSQL**: Primary database using Neon serverless PostgreSQL
36 | - **Drizzle Schema**: Type-safe database schema with tables for users, companies, frameworks, tasks, documents, risks, and chat messages
37 | - **Connection Pooling**: Neon serverless connection pooling for optimal database performance
38 | - **Migration System**: Drizzle-kit for database schema migrations
39 | 
40 | ### AI Integration
41 | - **Anthropic Claude**: Latest Claude Sonnet 4 model for compliance analysis and chat functionality
42 | - **Enhanced Document Analysis**: AI-powered analysis with advanced gap detection, document classification, and completeness scoring
43 | - **Intelligent Risk Assessment**: Comprehensive risk evaluation including regulatory implications, cost estimates, and remediation timelines
44 | - **Smart Task Prioritization**: AI-driven task prioritization considering dependencies, effort estimates, and urgency levels
45 | - **Compliance Gap Detection**: Framework-specific gap analysis with severity assessment and remediation roadmaps
46 | - **Advanced Recommendations**: Strategic compliance recommendations with timeline planning and success metrics
47 | - **Context-Aware Chat**: Enhanced AI assistance with user profile awareness and personalized guidance
48 | 
49 | ### File Management
50 | - **Multer**: Multipart form data handling for document uploads
51 | - **File Type Validation**: Support for PDF, DOC, DOCX, XLS, XLSX, and image formats
52 | - **Size Limits**: 50MB maximum file size for uploaded documents
53 | - **Local Storage**: Files stored in uploads directory with metadata in database
54 | 
55 | ## External Dependencies
56 | 
57 | ### Third-Party Services
58 | - **Neon Database**: Serverless PostgreSQL hosting with connection pooling
59 | - **Anthropic API**: Claude AI model access for document analysis and chat features
60 | - **Replit Authentication**: OAuth identity provider for user authentication
61 | - **Google Cloud Storage**: File storage service (configured but not actively used in current implementation)
62 | 
63 | ### Frontend Libraries
64 | - **Radix UI**: Unstyled, accessible UI primitives for building the design system
65 | - **React Hook Form**: Form state management with validation
66 | - **Lucide React**: Icon library for consistent iconography
67 | - **Class Variance Authority**: Utility for creating variant-based component APIs
68 | 
69 | ### Backend Libraries
70 | - **Express Session**: Session management middleware
71 | - **Connect PG Simple**: PostgreSQL session store
72 | - **Passport**: Authentication middleware
73 | - **OpenID Client**: OAuth/OpenID Connect client implementation
74 | - **Multer**: File upload handling
75 | - **WebSocket (ws)**: WebSocket implementation for Neon database connections
76 | 
77 | ### Development Tools
78 | - **ESBuild**: Fast JavaScript bundler for production builds
79 | - **PostCSS**: CSS post-processor for Tailwind CSS
80 | - **TypeScript**: Static type checking for both frontend and backend
81 | - **Drizzle Kit**: Database schema management and migrations


--------------------------------------------------------------------------------
/scripts/migrate.ts:
--------------------------------------------------------------------------------
 1 | 
 2 | #!/usr/bin/env tsx
 3 | 
 4 | import { runMigrations } from "../server/runMigrations";
 5 | 
 6 | async function main() {
 7 |   try {
 8 |     await runMigrations();
 9 |     console.log("Migration completed successfully");
10 |     process.exit(0);
11 |   } catch (error) {
12 |     console.error("Migration failed:", error);
13 |     process.exit(1);
14 |   }
15 | }
16 | 
17 | main();
18 | 


--------------------------------------------------------------------------------
/server/db.ts:
--------------------------------------------------------------------------------
 1 | import { Pool, neonConfig } from '@neondatabase/serverless';
 2 | import { drizzle } from 'drizzle-orm/neon-serverless';
 3 | import ws from "ws";
 4 | import * as schema from "@shared/schema";
 5 | 
 6 | neonConfig.webSocketConstructor = ws;
 7 | 
 8 | if (!process.env.DATABASE_URL) {
 9 |   throw new Error(
10 |     "DATABASE_URL must be set. Did you forget to provision a database?",
11 |   );
12 | }
13 | 
14 | export const pool = new Pool({ connectionString: process.env.DATABASE_URL });
15 | export const db = drizzle({ client: pool, schema });


--------------------------------------------------------------------------------
/server/index.ts:
--------------------------------------------------------------------------------
 1 | import express, { type Request, Response, NextFunction } from "express";
 2 | import { sql } from "drizzle-orm";
 3 | import { setupAuth } from "./replitAuth";
 4 | import { registerRoutes } from "./routes";
 5 | import { setupVite, serveStatic, log } from "./vite";
 6 | import "./background-scheduler.js"; // Auto-start background scheduler
 7 | 
 8 | const app = express();
 9 | app.use(express.json());
10 | app.use(express.urlencoded({ extended: false }));
11 | 
12 | app.use((req, res, next) => {
13 |   const start = Date.now();
14 |   const path = req.path;
15 |   let capturedJsonResponse: Record<string, any> | undefined = undefined;
16 | 
17 |   const originalResJson = res.json;
18 |   res.json = function (bodyJson, ...args) {
19 |     capturedJsonResponse = bodyJson;
20 |     return originalResJson.apply(res, [bodyJson, ...args]);
21 |   };
22 | 
23 |   res.on("finish", () => {
24 |     const duration = Date.now() - start;
25 |     if (path.startsWith("/api")) {
26 |       let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
27 |       if (capturedJsonResponse) {
28 |         logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
29 |       }
30 | 
31 |       if (logLine.length > 80) {
32 |         logLine = logLine.slice(0, 79) + "…";
33 |       }
34 | 
35 |       log(logLine);
36 |     }
37 |   });
38 | 
39 |   next();
40 | });
41 | 
42 | (async () => {
43 |   const { db } = await import("./db");
44 |   
45 |   // Test database connection
46 |   try {
47 |     await db.execute(sql`SELECT 1`);
48 |     console.log("✅ Database connected successfully");
49 | 
50 |     // Use Drizzle's schema sync instead of manual migrations
51 |     console.log("🔄 Starting database schema sync...");
52 |     console.log("✅ Database schema sync completed - using Drizzle's built-in schema management");
53 | 
54 |     // Run comprehensive seed data with proper error handling
55 |     try {
56 |       const { seedComplianceData } = await import("./seedComplianceData");
57 |       await seedComplianceData();
58 |       console.log("✅ Comprehensive compliance data seeding completed");
59 |     } catch (seedError) {
60 |       console.warn("⚠️ Database seeding warning:", seedError);
61 |       // Don't exit on seeding failure - continue with server startup
62 |     }
63 |   } catch (error) {
64 |     console.error("❌ Database connection failed:", error);
65 |     process.exit(1);
66 |   }
67 | 
68 |   const server = await registerRoutes(app);
69 | 
70 |   app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
71 |     const status = err.status || err.statusCode || 500;
72 |     const message = err.message || "Internal Server Error";
73 | 
74 |     res.status(status).json({ message });
75 |     throw err;
76 |   });
77 | 
78 |   // importantly only setup vite in development and after
79 |   // setting up all the other routes so the catch-all route
80 |   // doesn't interfere with the other routes
81 |   if (app.get("env") === "development") {
82 |     await setupVite(app, server);
83 |   } else {
84 |     serveStatic(app);
85 |   }
86 | 
87 |   // ALWAYS serve the app on the port specified in the environment variable PORT
88 |   // Other ports are firewalled. Default to 5000 if not specified.
89 |   // this serves both the API and the client.
90 |   // It is the only port that is not firewalled.
91 |   const port = parseInt(process.env.PORT || '5000', 10);
92 |   server.listen(port, "0.0.0.0", () => {
93 |     log(`serving on port ${port}`);
94 |   });
95 | })();


--------------------------------------------------------------------------------
/server/migrations/003_add_task_fields.sql:
--------------------------------------------------------------------------------
 1 | 
 2 | -- Migration to add missing task fields
 3 | ALTER TABLE tasks ADD COLUMN IF NOT EXISTS progress_percentage INTEGER DEFAULT 0;
 4 | ALTER TABLE tasks ADD COLUMN IF NOT EXISTS estimated_hours INTEGER;
 5 | ALTER TABLE tasks ADD COLUMN IF NOT EXISTS actual_hours INTEGER;
 6 | ALTER TABLE tasks ADD COLUMN IF NOT EXISTS ai_priority_score INTEGER;
 7 | ALTER TABLE tasks ADD COLUMN IF NOT EXISTS ai_reasoning TEXT;
 8 | ALTER TABLE tasks ADD COLUMN IF NOT EXISTS ai_next_action TEXT;
 9 | ALTER TABLE tasks ADD COLUMN IF NOT EXISTS ai_analyzed_at TIMESTAMP;
10 | ALTER TABLE tasks ADD COLUMN IF NOT EXISTS tags JSONB;
11 | ALTER TABLE tasks ADD COLUMN IF NOT EXISTS dependencies JSONB;
12 | ALTER TABLE tasks ADD COLUMN IF NOT EXISTS compliance_requirement TEXT;
13 | ALTER TABLE tasks ADD COLUMN IF NOT EXISTS evidence_required BOOLEAN DEFAULT false;
14 | 


--------------------------------------------------------------------------------
/server/migrations/004_add_onboarding_completed.sql:
--------------------------------------------------------------------------------
 1 | 
 2 | -- Add onboarding completion tracking
 3 | ALTER TABLE companies ADD COLUMN onboarding_completed BOOLEAN DEFAULT false;
 4 | 
 5 | -- Update existing companies that have frameworks selected as completed
 6 | UPDATE companies 
 7 | SET onboarding_completed = true 
 8 | WHERE selected_frameworks IS NOT NULL 
 9 |   AND json_array_length(selected_frameworks) > 0
10 |   AND name IS NOT NULL 
11 |   AND contact_email IS NOT NULL;
12 | 


--------------------------------------------------------------------------------
/server/pagination.ts:
--------------------------------------------------------------------------------
 1 | import { z } from "zod";
 2 | 
 3 | // Common pagination schema for consistency across endpoints
 4 | export const paginationSchema = z.object({
 5 |   limit: z.coerce.number().int().positive().max(100).default(20),
 6 |   offset: z.coerce.number().int().min(0).default(0),
 7 | });
 8 | 
 9 | // Extended pagination with search and filters
10 | export const searchPaginationSchema = paginationSchema.extend({
11 |   search: z.string().optional(),
12 | });
13 | 
14 | // Risk filters with pagination
15 | export const riskFilterSchema = searchPaginationSchema.extend({
16 |   category: z.string().optional(),
17 |   impact: z.enum(['low', 'medium', 'high']).optional(),
18 |   likelihood: z.enum(['low', 'medium', 'high']).optional(),
19 |   frameworkId: z.string().optional(),
20 | });
21 | 
22 | // Document filters with pagination
23 | export const documentFilterSchema = searchPaginationSchema.extend({
24 |   frameworkId: z.string().optional(),
25 |   documentType: z.string().optional(), // maps to fileType in schema
26 |   status: z.enum(['pending', 'verified', 'rejected']).optional(),
27 | });
28 | 
29 | // Notification filters with pagination
30 | export const notificationFilterSchema = paginationSchema.extend({
31 |   filter: z.enum(['all', 'unread', 'high', 'urgent']).default('all'),
32 |   priority: z.enum(['low', 'medium', 'high', 'urgent']).optional(),
33 | });
34 | 
35 | // Learning resource filters with pagination
36 | export const learningResourceFilterSchema = searchPaginationSchema.extend({
37 |   frameworkId: z.string().optional(),
38 |   resourceType: z.enum(['pdf', 'video', 'article', 'course']).optional(),
39 |   category: z.string().optional(),
40 |   difficulty: z.enum(['beginner', 'intermediate', 'advanced']).optional(),
41 | });
42 | 
43 | // Generic pagination response type
44 | export interface PaginationResponse<T> {
45 |   items: T[];
46 |   pagination: {
47 |     total: number;
48 |     limit: number;
49 |     offset: number;
50 |     hasMore: boolean;
51 |     page: number;
52 |     totalPages: number;
53 |   };
54 | }
55 | 
56 | // Helper function to create pagination response
57 | export function createPaginationResponse<T>(
58 |   items: T[],
59 |   total: number,
60 |   limit: number,
61 |   offset: number
62 | ): PaginationResponse<T> {
63 |   const page = Math.floor(offset / limit) + 1;
64 |   const totalPages = Math.ceil(total / limit);
65 |   
66 |   return {
67 |     items,
68 |     pagination: {
69 |       total,
70 |       limit,
71 |       offset,
72 |       hasMore: total > offset + limit,
73 |       page,
74 |       totalPages,
75 |     },
76 |   };
77 | }
78 | 
79 | // Helper function to apply pagination to any array
80 | export function applyPagination<T>(
81 |   items: T[],
82 |   limit: number,
83 |   offset: number
84 | ): { paginatedItems: T[]; total: number } {
85 |   const total = items.length;
86 |   const paginatedItems = items.slice(offset, offset + limit);
87 |   return { paginatedItems, total };
88 | }


--------------------------------------------------------------------------------
/server/runMigrations.ts:
--------------------------------------------------------------------------------
 1 | 
 2 | export async function runMigrations() {
 3 |   console.log("🔄 Starting database schema sync...");
 4 |   
 5 |   try {
 6 |     // The schema will be automatically synced when the database connection is established
 7 |     // Drizzle will handle all table creation and updates based on the schema definition
 8 |     console.log("✅ Database schema sync completed - using Drizzle's built-in schema management");
 9 |   } catch (error) {
10 |     console.error("❌ Schema sync failed:", error);
11 |     throw error;
12 |   }
13 | }
14 | 


--------------------------------------------------------------------------------
/server/seedBasicRequirements.ts:
--------------------------------------------------------------------------------
  1 | 
  2 | import { db } from './db';
  3 | import { complianceRequirements, frameworks } from '@shared/schema';
  4 | import { eq } from 'drizzle-orm';
  5 | 
  6 | export async function seedBasicRequirements() {
  7 |   console.log('🌱 Seeding basic compliance requirements...');
  8 |   
  9 |   try {
 10 |     // Get existing frameworks
 11 |     const existingFrameworks = await db.select().from(frameworks);
 12 |     
 13 |     // Basic requirements for each framework
 14 |     const basicRequirements = [
 15 |       // SOC 2 requirements
 16 |       {
 17 |         frameworkId: 'soc2',
 18 |         requirementId: 'CC6.1',
 19 |         title: 'Logical Access Controls',
 20 |         description: 'The entity implements logical access security software, infrastructure, and architectures over protected information assets to protect them from security events.',
 21 |         category: 'access_control',
 22 |         priority: 'high',
 23 |         evidenceTypes: ['access_control_policy', 'user_access_review', 'authentication_logs']
 24 |       },
 25 |       {
 26 |         frameworkId: 'soc2', 
 27 |         requirementId: 'CC6.2',
 28 |         title: 'Multi-Factor Authentication',
 29 |         description: 'Prior to issuing system credentials and granting system access, the entity registers and authorizes new internal and external users whose access is administered by the entity.',
 30 |         category: 'access_control',
 31 |         priority: 'high',
 32 |         evidenceTypes: ['mfa_policy', 'user_registration_process', 'access_provisioning']
 33 |       },
 34 |       // ISO 27001 requirements
 35 |       {
 36 |         frameworkId: 'iso27001',
 37 |         requirementId: 'A.9.2.1',
 38 |         title: 'User Registration and De-registration',
 39 |         description: 'A formal user registration and de-registration process shall be implemented to enable assignment of access rights.',
 40 |         category: 'access_control', 
 41 |         priority: 'high',
 42 |         evidenceTypes: ['user_lifecycle_policy', 'access_request_forms', 'deprovisioning_logs']
 43 |       },
 44 |       {
 45 |         frameworkId: 'iso27001',
 46 |         requirementId: 'A.12.6.1', 
 47 |         title: 'Management of Technical Vulnerabilities',
 48 |         description: 'Information about technical vulnerabilities of information systems being used shall be obtained in a timely fashion.',
 49 |         category: 'vulnerability_management',
 50 |         priority: 'medium',
 51 |         evidenceTypes: ['vulnerability_scan_reports', 'patch_management_policy', 'remediation_tracking']
 52 |       },
 53 |       // HIPAA requirements
 54 |       {
 55 |         frameworkId: 'hipaa',
 56 |         requirementId: '164.312(a)(1)',
 57 |         title: 'Access Control (Administrative Safeguards)',
 58 |         description: 'Implement technical policies and procedures for electronic information systems that maintain electronic protected health information.',
 59 |         category: 'access_control',
 60 |         priority: 'critical',
 61 |         evidenceTypes: ['hipaa_access_policy', 'ephi_access_controls', 'user_access_logs']
 62 |       },
 63 |       {
 64 |         frameworkId: 'hipaa',
 65 |         requirementId: '164.312(e)(1)',
 66 |         title: 'Transmission Security',
 67 |         description: 'Implement technical security measures to guard against unauthorized access to electronic protected health information.',
 68 |         category: 'data_protection',
 69 |         priority: 'high',
 70 |         evidenceTypes: ['encryption_policy', 'transmission_logs', 'network_security_controls']
 71 |       }
 72 |     ];
 73 | 
 74 |     // Insert requirements
 75 |     let insertedCount = 0;
 76 |     for (const req of basicRequirements) {
 77 |       // Check if framework exists
 78 |       const framework = existingFrameworks.find(f => f.id === req.frameworkId || f.name === req.frameworkId);
 79 |       if (!framework) {
 80 |         console.log(`Framework ${req.frameworkId} not found, skipping requirement ${req.requirementId}`);
 81 |         continue;
 82 |       }
 83 | 
 84 |       // Check if requirement already exists
 85 |       const existing = await db.select().from(complianceRequirements)
 86 |         .where(eq(complianceRequirements.requirementId, req.requirementId))
 87 |         .limit(1);
 88 | 
 89 |       if (existing.length === 0) {
 90 |         await db.insert(complianceRequirements).values({
 91 |           ...req,
 92 |           frameworkId: framework.id // Use the actual framework ID
 93 |         });
 94 |         insertedCount++;
 95 |       }
 96 |     }
 97 | 
 98 |     console.log(`✅ Seeded ${insertedCount} basic compliance requirements`);
 99 |   } catch (error) {
100 |     console.error('❌ Error seeding basic requirements:', error);
101 |   }
102 | }
103 | 


--------------------------------------------------------------------------------
/server/vite.ts:
--------------------------------------------------------------------------------
 1 | import express, { type Express } from "express";
 2 | import fs from "fs";
 3 | import path from "path";
 4 | import { createServer as createViteServer, createLogger } from "vite";
 5 | import { type Server } from "http";
 6 | import viteConfig from "../vite.config";
 7 | import { nanoid } from "nanoid";
 8 | 
 9 | const viteLogger = createLogger();
10 | 
11 | export function log(message: string, source = "express") {
12 |   const formattedTime = new Date().toLocaleTimeString("en-US", {
13 |     hour: "numeric",
14 |     minute: "2-digit",
15 |     second: "2-digit",
16 |     hour12: true,
17 |   });
18 | 
19 |   console.log(`${formattedTime} [${source}] ${message}`);
20 | }
21 | 
22 | export async function setupVite(app: Express, server: Server) {
23 |   const serverOptions = {
24 |     middlewareMode: true,
25 |     hmr: { server },
26 |     allowedHosts: true as const,
27 |   };
28 | 
29 |   const vite = await createViteServer({
30 |     ...viteConfig,
31 |     configFile: false,
32 |     customLogger: {
33 |       ...viteLogger,
34 |       error: (msg, options) => {
35 |         viteLogger.error(msg, options);
36 |         process.exit(1);
37 |       },
38 |     },
39 |     server: serverOptions,
40 |     appType: "custom",
41 |   });
42 | 
43 |   app.use(vite.middlewares);
44 |   app.use("*", async (req, res, next) => {
45 |     const url = req.originalUrl;
46 | 
47 |     try {
48 |       const clientTemplate = path.resolve(
49 |         import.meta.dirname,
50 |         "..",
51 |         "client",
52 |         "index.html",
53 |       );
54 | 
55 |       // always reload the index.html file from disk incase it changes
56 |       let template = await fs.promises.readFile(clientTemplate, "utf-8");
57 |       template = template.replace(
58 |         `src="/src/main.tsx"`,
59 |         `src="/src/main.tsx?v=${nanoid()}"`,
60 |       );
61 |       const page = await vite.transformIndexHtml(url, template);
62 |       res.status(200).set({ "Content-Type": "text/html" }).end(page);
63 |     } catch (e) {
64 |       vite.ssrFixStacktrace(e as Error);
65 |       next(e);
66 |     }
67 |   });
68 | }
69 | 
70 | export function serveStatic(app: Express) {
71 |   const distPath = path.resolve(import.meta.dirname, "public");
72 | 
73 |   if (!fs.existsSync(distPath)) {
74 |     throw new Error(
75 |       `Could not find the build directory: ${distPath}, make sure to build the client first`,
76 |     );
77 |   }
78 | 
79 |   app.use(express.static(distPath));
80 | 
81 |   // fall through to index.html if the file doesn't exist
82 |   app.use("*", (_req, res) => {
83 |     res.sendFile(path.resolve(distPath, "index.html"));
84 |   });
85 | }
86 | 


--------------------------------------------------------------------------------
/tailwind.config.ts:
--------------------------------------------------------------------------------
  1 | import type { Config } from "tailwindcss";
  2 | 
  3 | export default {
  4 |   darkMode: ["class"],
  5 |   content: ["./client/index.html", "./client/src/**/*.{js,jsx,ts,tsx}"],
  6 |   theme: {
  7 |     extend: {
  8 |       borderRadius: {
  9 |         lg: "var(--radius)",
 10 |         md: "calc(var(--radius) - 2px)",
 11 |         sm: "calc(var(--radius) - 4px)",
 12 |       },
 13 |       colors: {
 14 |         background: "var(--background)",
 15 |         foreground: "var(--foreground)",
 16 |         card: {
 17 |           DEFAULT: "var(--card)",
 18 |           foreground: "var(--card-foreground)",
 19 |         },
 20 |         popover: {
 21 |           DEFAULT: "var(--popover)",
 22 |           foreground: "var(--popover-foreground)",
 23 |         },
 24 |         primary: {
 25 |           DEFAULT: "var(--primary)",
 26 |           foreground: "var(--primary-foreground)",
 27 |         },
 28 |         secondary: {
 29 |           DEFAULT: "var(--secondary)",
 30 |           foreground: "var(--secondary-foreground)",
 31 |         },
 32 |         muted: {
 33 |           DEFAULT: "var(--muted)",
 34 |           foreground: "var(--muted-foreground)",
 35 |         },
 36 |         accent: {
 37 |           DEFAULT: "var(--accent)",
 38 |           foreground: "var(--accent-foreground)",
 39 |         },
 40 |         destructive: {
 41 |           DEFAULT: "var(--destructive)",
 42 |           foreground: "var(--destructive-foreground)",
 43 |         },
 44 |         border: "var(--border)",
 45 |         input: "var(--input)",
 46 |         ring: "var(--ring)",
 47 |         chart: {
 48 |           "1": "var(--chart-1)",
 49 |           "2": "var(--chart-2)",
 50 |           "3": "var(--chart-3)",
 51 |           "4": "var(--chart-4)",
 52 |           "5": "var(--chart-5)",
 53 |         },
 54 |         sidebar: {
 55 |           DEFAULT: "var(--sidebar-background)",
 56 |           foreground: "var(--sidebar-foreground)",
 57 |           primary: "var(--sidebar-primary)",
 58 |           "primary-foreground": "var(--sidebar-primary-foreground)",
 59 |           accent: "var(--sidebar-accent)",
 60 |           "accent-foreground": "var(--sidebar-accent-foreground)",
 61 |           border: "var(--sidebar-border)",
 62 |           ring: "var(--sidebar-ring)",
 63 |         },
 64 |         // Venzip Brand Colors
 65 |         'venzip-primary': '#4ECDC4',
 66 |         'venzip-primary-dark': '#3DB5AC',
 67 |         'venzip-primary-light': '#7FE3DB',
 68 |         'venzip-secondary': '#44D9E8',
 69 |         'venzip-accent': '#52E5A3',
 70 |         'success-green': '#00D9AA',
 71 |         'warning-orange': '#FF8C42',
 72 |         'danger-coral': '#FF6B6B',
 73 |         'info-blue': '#4DABF7',
 74 |       },
 75 |       fontFamily: {
 76 |         sans: ["var(--font-sans)"],
 77 |         serif: ["var(--font-serif)"],
 78 |         mono: ["var(--font-mono)"],
 79 |       },
 80 |       backgroundImage: {
 81 |         'gradient-primary': 'linear-gradient(135deg, #4ECDC4 0%, #44D9E8 50%, #52E5A3 100%)',
 82 |         'gradient-success': 'linear-gradient(135deg, #00D9AA 0%, #52E5A3 100%)',
 83 |         'gradient-warning': 'linear-gradient(135deg, #FF8C42 0%, #FFB347 100%)',
 84 |         'gradient-danger': 'linear-gradient(135deg, #FF6B6B 0%, #FF8E92 100%)',
 85 |         'glass-bg': 'rgba(78, 205, 196, 0.1)',
 86 |       },
 87 |       backdropBlur: {
 88 |         'xs': '2px',
 89 |       },
 90 |       animation: {
 91 |         'float': 'float 6s ease-in-out infinite',
 92 |         'pulse-slow': 'pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite',
 93 |         'slide-up': 'slideUp 0.5s ease-out',
 94 |         'scale-in': 'scaleIn 0.3s ease-out',
 95 |         'fade-in': 'fadeIn 0.6s ease-out',
 96 |         "accordion-down": "accordion-down 0.2s ease-out",
 97 |         "accordion-up": "accordion-up 0.2s ease-out",
 98 |       },
 99 |       keyframes: {
100 |         float: {
101 |           '0%, 100%': { transform: 'translateY(0px)' },
102 |           '50%': { transform: 'translateY(-20px)' },
103 |         },
104 |         slideUp: {
105 |           '0%': { transform: 'translateY(20px)', opacity: '0' },
106 |           '100%': { transform: 'translateY(0)', opacity: '1' },
107 |         },
108 |         scaleIn: {
109 |           '0%': { transform: 'scale(0.9)', opacity: '0' },
110 |           '100%': { transform: 'scale(1)', opacity: '1' },
111 |         },
112 |         fadeIn: {
113 |           '0%': { opacity: '0' },
114 |           '100%': { opacity: '1' },
115 |         },
116 |         "accordion-down": {
117 |           from: {
118 |             height: "0",
119 |           },
120 |           to: {
121 |             height: "var(--radix-accordion-content-height)",
122 |           },
123 |         },
124 |         "accordion-up": {
125 |           from: {
126 |             height: "var(--radix-accordion-content-height)",
127 |           },
128 |           to: {
129 |             height: "0",
130 |           },
131 |         },
132 |       },
133 |     },
134 |   },
135 |   plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
136 | } satisfies Config;
137 | 


--------------------------------------------------------------------------------
/tsconfig.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "include": ["client/src/**/*", "shared/**/*", "server/**/*"],
 3 |   "exclude": ["node_modules", "build", "dist", "**/*.test.ts"],
 4 |   "compilerOptions": {
 5 |     "incremental": true,
 6 |     "tsBuildInfoFile": "./node_modules/typescript/tsbuildinfo",
 7 |     "noEmit": true,
 8 |     "module": "ESNext",
 9 |     "strict": true,
10 |     "lib": ["esnext", "dom", "dom.iterable"],
11 |     "jsx": "preserve",
12 |     "esModuleInterop": true,
13 |     "skipLibCheck": true,
14 |     "allowImportingTsExtensions": true,
15 |     "moduleResolution": "bundler",
16 |     "baseUrl": ".",
17 |     "types": ["node", "vite/client"],
18 |     "paths": {
19 |       "@/*": ["./client/src/*"],
20 |       "@shared/*": ["./shared/*"]
21 |     }
22 |   }
23 | }
24 | 


--------------------------------------------------------------------------------
/vite.config.ts:
--------------------------------------------------------------------------------
 1 | import { defineConfig } from "vite";
 2 | import react from "@vitejs/plugin-react";
 3 | import path from "path";
 4 | import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
 5 | 
 6 | export default defineConfig({
 7 |   plugins: [
 8 |     react(),
 9 |     runtimeErrorOverlay(),
10 |     ...(process.env.NODE_ENV !== "production" &&
11 |     process.env.REPL_ID !== undefined
12 |       ? [
13 |           await import("@replit/vite-plugin-cartographer").then((m) =>
14 |             m.cartographer(),
15 |           ),
16 |         ]
17 |       : []),
18 |   ],
19 |   resolve: {
20 |     alias: {
21 |       "@": path.resolve(import.meta.dirname, "client", "src"),
22 |       "@shared": path.resolve(import.meta.dirname, "shared"),
23 |       "@assets": path.resolve(import.meta.dirname, "attached_assets"),
24 |     },
25 |   },
26 |   root: path.resolve(import.meta.dirname, "client"),
27 |   build: {
28 |     outDir: path.resolve(import.meta.dirname, "dist/public"),
29 |     emptyOutDir: true,
30 |   },
31 |   server: {
32 |     fs: {
33 |       strict: true,
34 |       deny: ["**/.*"],
35 |     },
36 |   },
37 | });
38 | 


---------------------------------------------------------