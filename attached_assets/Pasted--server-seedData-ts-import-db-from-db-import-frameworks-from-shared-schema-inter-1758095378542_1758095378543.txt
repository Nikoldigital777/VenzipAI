// server/seedData.ts
import { db } from "./db";
import { frameworks } from "@shared/schema";

interface Framework {
  id: string;
  name: string;
  displayName: string;
  description: string;
  complexity: 'low' | 'medium' | 'high';
  estimatedTimeMonths: number;
  totalControls: number;
  icon: string;
  color: string;
  isActive: boolean;
}

const frameworksData: Framework[] = [
  {
    id: 'soc2',
    name: 'soc2',
    displayName: 'SOC 2',
    description: 'System and Organization Controls for service organizations, focusing on security, availability, processing integrity, confidentiality, and privacy.',
    complexity: 'medium',
    estimatedTimeMonths: 6,
    totalControls: 64,
    icon: 'fas fa-shield-alt',
    color: '#4ECDC4',
    isActive: true
  },
  {
    id: 'iso27001',
    name: 'iso27001',
    displayName: 'ISO 27001',
    description: 'International standard for information security management systems (ISMS), providing a systematic approach to managing sensitive information.',
    complexity: 'high',
    estimatedTimeMonths: 12,
    totalControls: 114,
    icon: 'fas fa-certificate',
    color: '#44D9E8',
    isActive: true
  },
  {
    id: 'hipaa',
    name: 'hipaa',
    displayName: 'HIPAA',
    description: 'Health Insurance Portability and Accountability Act, ensuring the protection of sensitive patient health information.',
    complexity: 'medium',
    estimatedTimeMonths: 4,
    totalControls: 18,
    icon: 'fas fa-user-md',
    color: '#52E5A3',
    isActive: true
  },
  {
    id: 'gdpr',
    name: 'gdpr',
    displayName: 'GDPR',
    description: 'General Data Protection Regulation for organizations processing personal data of EU residents.',
    complexity: 'high',
    estimatedTimeMonths: 8,
    totalControls: 99,
    icon: 'fas fa-gavel',
    color: '#FF8C42',
    isActive: true
  },
  {
    id: 'pci-dss',
    name: 'pci-dss',
    displayName: 'PCI DSS',
    description: 'Payment Card Industry Data Security Standard for organizations handling credit card information.',
    complexity: 'high',
    estimatedTimeMonths: 10,
    totalControls: 12,
    icon: 'fas fa-credit-card',
    color: '#4DABF7',
    isActive: true
  }
];

export async function seedFrameworks() {
  console.log('Seeding frameworks...');
  
  try {
    // Check if frameworks already exist
    const existingFrameworks = await db.select().from(frameworks);
    
    if (existingFrameworks.length > 0) {
      console.log('Frameworks already exist, skipping seed');
      return;
    }

    // Insert all frameworks
    await db.insert(frameworks).values(frameworksData);
    
    console.log(`Successfully seeded ${frameworksData.length} frameworks`);
  } catch (error) {
    console.error('Error seeding frameworks:', error);
    throw error;
  }
}

export async function seedLearningResources() {
  console.log('Seeding learning resources...');
  
  const learningResourcesData = [
    {
      id: 'soc2-intro',
      title: 'SOC 2 Compliance Fundamentals',
      description: 'Understanding the basics of SOC 2 Type I and Type II audits',
      frameworkId: 'soc2',
      resourceType: 'article' as const,
      category: 'Getting Started',
      difficulty: 'beginner' as const,
      url: 'https://example.com/soc2-intro',
      estimatedReadTime: 15,
      isActive: true
    },
    {
      id: 'iso27001-intro',
      title: 'ISO 27001 Implementation Guide',
      description: 'Step-by-step guide to implementing an Information Security Management System',
      frameworkId: 'iso27001',
      resourceType: 'pdf' as const,
      category: 'Implementation',
      difficulty: 'intermediate' as const,
      url: 'https://example.com/iso27001-guide.pdf',
      estimatedReadTime: 45,
      isActive: true
    },
    {
      id: 'hipaa-intro',
      title: 'HIPAA Privacy and Security Rules',
      description: 'Understanding HIPAA requirements for healthcare organizations',
      frameworkId: 'hipaa',
      resourceType: 'video' as const,
      category: 'Regulations',
      difficulty: 'beginner' as const,
      url: 'https://example.com/hipaa-overview',
      estimatedReadTime: 30,
      isActive: true
    }
  ];

  try {
    // Note: Uncomment when you have learningResources table
    // const { learningResources } = await import("@shared/schema");
    // const existing = await db.select().from(learningResources).limit(1);
    
    // if (existing.length === 0) {
    //   await db.insert(learningResources).values(learningResourcesData);
    //   console.log(`Successfully seeded ${learningResourcesData.length} learning resources`);
    // }
    
    console.log('Learning resources seed skipped - table not implemented yet');
  } catch (error) {
    console.error('Error seeding learning resources:', error);
  }
}

// Main seed function
export async function runSeeds() {
  console.log('Starting database seeding...');
  
  await seedFrameworks();
  await seedLearningResources();
  
  console.log('Database seeding completed');
}

// Run seeds if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  runSeeds()
    .then(() => {
      console.log('Seeding finished successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Seeding failed:', error);
      process.exit(1);
    });
}