// server/seedData.ts
import { db } from "./db";

// Define the frameworks table structure for seeding
const frameworksData = [
  {
    id: 'soc2',
    name: 'soc2',
    displayName: 'SOC 2',
    description: 'System and Organization Controls for service organizations, focusing on security, availability, processing integrity, confidentiality, and privacy.',
    complexity: 'medium',
    estimatedTimeMonths: 6,
    totalControls: 64,
    icon: 'fas fa-shield-alt',
    color: '#4ECDC4',
    isActive: true
  },
  {
    id: 'iso27001',
    name: 'iso27001',
    displayName: 'ISO 27001',
    description: 'International standard for information security management systems (ISMS), providing a systematic approach to managing sensitive information.',
    complexity: 'high',
    estimatedTimeMonths: 12,
    totalControls: 114,
    icon: 'fas fa-certificate',
    color: '#44D9E8',
    isActive: true
  },
  {
    id: 'hipaa',
    name: 'hipaa',
    displayName: 'HIPAA',
    description: 'Health Insurance Portability and Accountability Act, ensuring the protection of sensitive patient health information.',
    complexity: 'medium',
    estimatedTimeMonths: 4,
    totalControls: 18,
    icon: 'fas fa-user-md',
    color: '#52E5A3',
    isActive: true
  },
  {
    id: 'gdpr',
    name: 'gdpr',
    displayName: 'GDPR',
    description: 'General Data Protection Regulation for organizations processing personal data of EU residents.',
    complexity: 'high',
    estimatedTimeMonths: 8,
    totalControls: 99,
    icon: 'fas fa-gavel',
    color: '#FF8C42',
    isActive: true
  }
];

export async function seedFrameworks() {
  console.log('Seeding frameworks...');
  
  try {
    // Use raw SQL since we might not have the frameworks table in schema yet
    const existingCheck = await db.execute(`
      SELECT COUNT(*) as count FROM frameworks WHERE id IN ('soc2', 'iso27001', 'hipaa', 'gdpr')
    `);
    
    const existingCount = (existingCheck.rows[0] as any)?.count || 0;
    
    if (existingCount > 0) {
      console.log(`Found ${existingCount} existing frameworks, skipping seed`);
      return;
    }

    // Insert frameworks using raw SQL to avoid schema dependencies
    for (const framework of frameworksData) {
      await db.execute(`
        INSERT INTO frameworks (
          id, name, display_name, description, complexity, 
          estimated_time_months, total_controls, icon, color, is_active
        ) VALUES (
          '${framework.id}', 
          '${framework.name}', 
          '${framework.displayName}', 
          '${framework.description.replace(/'/g, "''")}', 
          '${framework.complexity}',
          ${framework.estimatedTimeMonths}, 
          ${framework.totalControls}, 
          '${framework.icon}', 
          '${framework.color}', 
          ${framework.isActive}
        )
        ON CONFLICT (id) DO NOTHING
      `);
    }
    
    console.log(`Successfully seeded ${frameworksData.length} frameworks`);
  } catch (error) {
    console.error('Error seeding frameworks:', error);
    // Don't throw error in MVP - just log and continue
  }
}

// Seed some basic tasks for each framework to make the app feel populated
export async function seedSampleTasks() {
  console.log('Seeding sample tasks...');
  
  const sampleTasks = [
    {
      id: 'task-soc2-1',
      title: 'Document Security Policies',
      description: 'Create and document information security policies as required by SOC 2 Trust Services Criteria.',
      category: 'Documentation',
      priority: 'high',
      status: 'not_started',
      frameworkId: 'soc2',
      progressPercentage: 0
    },
    {
      id: 'task-soc2-2',
      title: 'Implement Access Controls',
      description: 'Set up user access controls and authentication mechanisms.',
      category: 'Implementation',
      priority: 'high',
      status: 'in_progress',
      frameworkId: 'soc2',
      progressPercentage: 25
    },
    {
      id: 'task-iso27001-1',
      title: 'Risk Assessment Framework',
      description: 'Establish risk assessment methodology and conduct initial risk assessment.',
      category: 'Risk Management',
      priority: 'critical',
      status: 'not_started',
      frameworkId: 'iso27001',
      progressPercentage: 0
    },
    {
      id: 'task-hipaa-1',
      title: 'Privacy Impact Assessment',
      description: 'Conduct privacy impact assessment for patient data handling procedures.',
      category: 'Privacy',
      priority: 'high',
      status: 'not_started',
      frameworkId: 'hipaa',
      progressPercentage: 0
    },
    {
      id: 'task-gdpr-1',
      title: 'Data Processing Inventory',
      description: 'Create comprehensive inventory of all personal data processing activities.',
      category: 'Data Governance',
      priority: 'high',
      status: 'not_started',
      frameworkId: 'gdpr',
      progressPercentage: 0
    }
  ];

  try {
    // Check if tasks already exist
    const existingTasksCheck = await db.execute(`
      SELECT COUNT(*) as count FROM tasks WHERE id LIKE 'task-%'
    `);
    
    const existingTasksCount = (existingTasksCheck.rows[0] as any)?.count || 0;
    
    if (existingTasksCount > 0) {
      console.log(`Found ${existingTasksCount} existing sample tasks, skipping seed`);
      return;
    }

    // Insert sample tasks
    for (const task of sampleTasks) {
      await db.execute(`
        INSERT INTO tasks (
          id, title, description, category, priority, status, 
          framework_id, progress_percentage, created_at, updated_at
        ) VALUES (
          '${task.id}', 
          '${task.title}', 
          '${task.description.replace(/'/g, "''")}', 
          '${task.category}', 
          '${task.priority}',
          '${task.status}', 
          '${task.frameworkId}', 
          ${task.progressPercentage},
          NOW(),
          NOW()
        )
        ON CONFLICT (id) DO NOTHING
      `);
    }
    
    console.log(`Successfully seeded ${sampleTasks.length} sample tasks`);
  } catch (error) {
    console.error('Error seeding sample tasks:', error);
    // Don't throw error in MVP
  }
}

// Main seed function
export async function runSeeds() {
  console.log('🌱 Starting database seeding...');
  
  try {
    await seedFrameworks();
    await seedSampleTasks();
    console.log('✅ Database seeding completed successfully');
  } catch (error) {
    console.error('❌ Database seeding failed:', error);
    // Don't throw in MVP - let the app start even if seeding fails
  }
}

// Run seeds if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  runSeeds()
    .then(() => {
      console.log('Seeding finished');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Seeding failed:', error);
      process.exit(1);
    });
}

-- server/migrations/create-frameworks-table.sql

-- Create frameworks table if it doesn't exist
CREATE TABLE IF NOT EXISTS frameworks (
  id VARCHAR(100) PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  display_name VARCHAR(255) NOT NULL,
  description TEXT,
  complexity VARCHAR(20) NOT NULL CHECK (complexity IN ('low', 'medium', 'high')),
  estimated_time_months INTEGER NOT NULL,
  total_controls INTEGER NOT NULL,
  icon VARCHAR(100),
  color VARCHAR(20),
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_frameworks_active ON frameworks(is_active);
CREATE INDEX IF NOT EXISTS idx_frameworks_complexity ON frameworks(complexity);
CREATE INDEX IF NOT EXISTS idx_frameworks_name ON frameworks(name);

-- Ensure tasks table has proper framework_id column and constraint
ALTER TABLE tasks 
ADD COLUMN IF NOT EXISTS framework_id VARCHAR(100);

-- Add foreign key constraint from tasks to frameworks
ALTER TABLE tasks 
DROP CONSTRAINT IF EXISTS fk_tasks_framework_id;

ALTER TABLE tasks 
ADD CONSTRAINT fk_tasks_framework_id 
FOREIGN KEY (framework_id) REFERENCES frameworks(id);

-- Fix frameworks_companies table foreign key constraint
ALTER TABLE frameworks_companies 
DROP CONSTRAINT IF EXISTS fk_frameworks_companies_framework_id;

ALTER TABLE frameworks_companies 
ADD CONSTRAINT fk_frameworks_companies_framework_id 
FOREIGN KEY (framework_id) REFERENCES frameworks(id);

-- Add some helpful indexes
CREATE INDEX IF NOT EXISTS idx_tasks_framework_id ON tasks(framework_id);
CREATE INDEX IF NOT EXISTS idx_frameworks_companies_framework_id ON frameworks_companies(framework_id);

// Modify your server/index.ts to include seeding

import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes";
import { setupVite, serveStatic, log } from "./vite";
import { runSeeds } from "./seedData"; // Add this import
import "./background-scheduler.js";

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// ... your existing middleware ...

(async () => {
  // Initialize database with seed data
  try {
    log("Initializing database...");
    await runSeeds();
  } catch (error) {
    log(`Database initialization warning: ${error}`, "database");
    // Continue startup even if seeding fails
  }

  const server = await registerRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });

  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  const port = parseInt(process.env.PORT || '3001', 10);
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true,
  }, () => {
    log(`Server running on port ${port}`);
    log(`Frameworks: SOC 2, ISO 27001, HIPAA, GDPR ready`);
  });
})();

You're absolutely right about the migration issue. The error occurs because the migration script has flawed logic - it's trying to drop constraints from tables that don't exist yet.
Here's the immediate fix:
Step 1: Remove Problematic Migration Files
Delete these migration files that have backwards logic:
rm server/migrations/add-onboarding-tables.sql
rm server/migrations/fix-schema-issues.sql  
rm server/migrations/fix-user-columns.sql
Step 2: Add Frameworks Table to Your Schema
First, make sure your shared/schema.ts includes the frameworks table:## Step 3: Use Drizzle Push Instead of Manual Migrations
Run this command to sync your database schema safely:
npx drizzle-kit push --force
This approach is much better because:
* Drizzle automatically handles table creation order and dependencies
* No risk of trying to drop constraints that don't exist
* Type-safe schema synchronization
* Handles existing data safely
Step 4: Then Run Your Seed Script
After the schema is properly synced:
npm run db:seed
Or just start your server, which will run seeds automatically:
npm run dev
Why This Approach is Better
Your original migration files had this flawed logic:
-- This tries to drop something that doesn't exist yet:
ALTER TABLE frameworks_companies 
DROP CONSTRAINT IF EXISTS fk_frameworks_companies_framework_id;
Using drizzle-kit push instead:
* Compares your TypeScript schema with the actual database state
* Generates the correct DDL statements in proper order
* Handles constraints and foreign keys automatically
* Much less error-prone than manual SQL migrations
This should resolve your migration errors and get your MVP running with the frameworks properly seeded (SOC 2, ISO 27001, HIPAA, GDPR).
